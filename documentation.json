{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [
        {
            "name": "DataPage",
            "id": "class-DataPage-70bc2b7f062db07a8ebc6e8d403df2d1",
            "file": "src/app/model/data-page.ts",
            "type": "class",
            "sourceCode": "export class DataPage<T> {\r\n  totalPages: number;\r\n  totalElements: number;\r\n  numberOfElements: number;\r\n  size: number;\r\n  number: number;\r\n  sort: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "number",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "numberOfElements",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "size",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sort",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalElements",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "totalPages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HeaderOptions",
            "id": "class-HeaderOptions-75685ec00c92f0dc3915624a6fc5d64d",
            "file": "src/app/model/header-options.ts",
            "type": "class",
            "sourceCode": "import {MenuItem} from './menu-item';\r\n\r\nexport class HeaderOptions {\r\n  public title: string\r\n  public siteBrandingName: string;\r\n  public siteBrandingSlogan: string;\r\n  public showSearch?: boolean;\r\n  public showCompact?: boolean;\r\n  public menuItems?: MenuItem[];\r\n  public utilityItems?: MenuItem[];\r\n\r\n  constructor() {\r\n\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "properties": [
                {
                    "name": "menuItems",
                    "type": "MenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showCompact",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showSearch",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "siteBrandingName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "siteBrandingSlogan",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "utilityItems",
                    "type": "MenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MenuItem",
            "id": "class-MenuItem-6b7a12a8dfae0a2b00646e56cc0500d0",
            "file": "src/app/model/menu-item.ts",
            "type": "class",
            "sourceCode": "export class MenuItem {\r\n  public readonly label: string\r\n  public readonly url: string;\r\n  public readonly shownByDefault?: boolean;\r\n\r\n  public subItems?: MenuItem[] = [];\r\n\r\n  constructor(label: string, url: string, subItems?: MenuItem[], shownByDefault?: boolean ) {\r\n    this.label = label;\r\n    this.url = url;\r\n    this.subItems = subItems;\r\n    this.shownByDefault = shownByDefault;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "label",
                        "type": "string"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "subItems",
                        "type": "MenuItem[]",
                        "optional": true
                    },
                    {
                        "name": "shownByDefault",
                        "type": "boolean",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "label",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subItems",
                        "type": "MenuItem[]",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shownByDefault",
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "shownByDefault",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "subItems",
                    "defaultValue": "[]",
                    "type": "MenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UtilityFunctions",
            "id": "class-UtilityFunctions-faec13eac260bbc6590eaf56e370ca95",
            "file": "src/app/components/utility-functions.ts",
            "type": "class",
            "sourceCode": "export const ARIA_EXPANDED = 'aria-expanded';\r\nexport const ARIA_CONTROLS = 'aria-controls';\r\nexport const HIDDEN = 'hidden';\r\n\r\nexport class UtilityFunctions {\r\n\r\n  static select(selector: string, context: ParentNode): [] {\r\n\r\n    if (typeof selector !== 'string') {\r\n      return [];\r\n    }\r\n\r\n    if (!context || !this.isElement(context)) {\r\n      context = window.document; // eslint-disable-line no-param-reassign\r\n    }\r\n\r\n    const selection = context.querySelectorAll(selector);\r\n    return Array.prototype.slice.call(selection);\r\n  }\r\n\r\n  static isElement(value): any {\r\n    return value && typeof value === 'object' && value.nodeType === 1;\r\n  }\r\n\r\n  static selectClosestTo(targetSelector: string, closestToSelector: string, context: Element): any {\r\n    const elements: Element[] = UtilityFunctions.select(targetSelector, context);\r\n    return elements.filter((element) => element.closest(closestToSelector) === context);\r\n  }\r\n\r\n  static toggleControl(target: HTMLElement, expanded?: boolean, attribute?: string): boolean {\r\n\r\n    const safeAttribute: string = attribute || ARIA_EXPANDED;\r\n\r\n    let safeExpanded = expanded;\r\n\r\n    if (typeof safeExpanded !== 'boolean') {\r\n      // invert the existing button value\r\n      safeExpanded = target.getAttribute(safeAttribute) === 'false';\r\n    }\r\n\r\n    target.setAttribute(safeAttribute, safeExpanded.toString());\r\n\r\n    const controlledElementId = target.getAttribute(ARIA_CONTROLS);\r\n    if (controlledElementId) {\r\n      const controlledElement = document.getElementById(controlledElementId);\r\n      if (!controlledElement) {\r\n        throw new Error(`aria-controls is not properly configured: ${controlledElementId}`);\r\n      }\r\n      if (safeExpanded) {\r\n        controlledElement.removeAttribute(HIDDEN);\r\n      } else {\r\n        controlledElement.setAttribute(HIDDEN, '');\r\n      }\r\n    }\r\n\r\n    return safeExpanded;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "isElement",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "selector",
                            "type": "string"
                        },
                        {
                            "name": "context",
                            "type": "ParentNode"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "ParentNode",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectClosestTo",
                    "args": [
                        {
                            "name": "targetSelector",
                            "type": "string"
                        },
                        {
                            "name": "closestToSelector",
                            "type": "string"
                        },
                        {
                            "name": "context",
                            "type": "Element"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetSelector",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "closestToSelector",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "Element",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleControl",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "expanded",
                            "type": "boolean",
                            "optional": true
                        },
                        {
                            "name": "attribute",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expanded",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attribute",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-1b21730e574d9fb5d2d657b2c98d7c67",
            "file": "src/app/components/accordion/accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-accordion",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordionButtons",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "'jazzAccordionButtons', {descendants: true, read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "toggleControl",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  OnInit,\r\n  QueryList\r\n} from '@angular/core';\r\nimport {prefix as PREFIX} from '../../config';\r\n\r\nconst ACCORDION_SELECTOR = `.${PREFIX}-accordion`;\r\nconst MULTISELECTABLE = 'aria-multiselectable';\r\n\r\nexport const ARIA_EXPANDED = 'aria-expanded';\r\nexport const ARIA_CONTROLS = 'aria-controls';\r\nexport const HIDDEN = 'hidden';\r\n\r\n@Component({\r\n  selector: 'app-jazz-accordion',\r\n  templateUrl: './accordion.component.html'\r\n})\r\nexport class AccordionComponent implements OnInit, AfterContentInit {\r\n  @ContentChildren('jazzAccordionButtons', {descendants: true, read: ElementRef}) accordionButtons: QueryList<ElementRef>;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterContentInit(): void{\r\n    this.accordionButtons.forEach((btn) => {\r\n      btn.nativeElement.addEventListener('click', this.click);\r\n    });\r\n  }\r\n\r\n  click = (event: Event): void => {\r\n    const button = event.target as HTMLElement;\r\n    const accordionEl = button.closest(ACCORDION_SELECTOR);\r\n    const multiselectable = accordionEl.getAttribute(MULTISELECTABLE) === 'true';\r\n\r\n    const expanded = this.toggleControl(button, null);\r\n\r\n    if (expanded && !multiselectable) {\r\n      this.accordionButtons.forEach((other) => {\r\n        if (other.nativeElement !== button) {\r\n          this.toggleControl(other.nativeElement, false);\r\n        }\r\n      });\r\n    }\r\n    event.stopImmediatePropagation();\r\n  }\r\n\r\n  toggleControl = (target: Element, expanded?: boolean): any => {\r\n\r\n    let safeExpanded = expanded;\r\n\r\n    if (typeof safeExpanded !== 'boolean') {\r\n      // invert the existing button value\r\n      safeExpanded = target.getAttribute(ARIA_EXPANDED) === 'false';\r\n    }\r\n\r\n    target.setAttribute(ARIA_EXPANDED, safeExpanded.toString());\r\n\r\n    const controlledElementId = target.getAttribute(ARIA_CONTROLS);\r\n    const controlledElement = document.getElementById(controlledElementId);\r\n    if (!controlledElement) {\r\n      throw new Error(`aria-controls is not properly configured: ${controlledElementId}`);\r\n    }\r\n\r\n    if (safeExpanded) {\r\n      controlledElement.removeAttribute(HIDDEN);\r\n    } else {\r\n      controlledElement.setAttribute(HIDDEN, '');\r\n    }\r\n\r\n    return safeExpanded;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "templateData": "<div class=\"jazz-accordion\" role=\"region\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-331e122d4982bc72ee1edcaf6506dc18",
            "file": "src/app/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "heading",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-jazz-alert',\r\n  templateUrl: './alert.component.html'\r\n})\r\nexport class AlertComponent {\r\n\r\n  constructor() { }\r\n\r\n  @Input()\r\n  heading: string;\r\n\r\n  @Input()\r\n  title: string;\r\n\r\n  @Input()\r\n  content: string;\r\n\r\n  @Output()\r\n  onClose: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  close(): void {\r\n    this.onClose.emit(true);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "templateData": "<section class=\"jazz-alert-section\">\r\n  <h2 class=\"jazz-alert-section__heading jazz-visually-hidden\">{{ heading }}</h2>\r\n  <div class=\"jazz-alert-section__content\">\r\n    <div class=\"jazz-row\">\r\n      <h3 class=\"jazz-alert-section__title\">{{ title }}</h3>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n  <a title=\"Hide alert with title {{ title }} until it is updated\" class=\"jazz-alert-section__close\" role=\"button\" (click)=\"close()\">X</a>\r\n</section>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-703aa876a1eec8f2bcddfad40ddebf4b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "headerOptions",
                    "type": "HeaderOptions",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "defaultValue": "'Princeton Design System'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\r\nimport {MenuItem} from './model/menu-item';\r\nimport {HeaderOptions} from './model/header-options';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Princeton Design System';\r\n  headerOptions: HeaderOptions;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    const mainMenu: MenuItem[] = [\r\n     {\r\n       label: 'Main Menu 1',\r\n       url: '/mainMenu1',\r\n       subItems:\r\n        [\r\n          {\r\n          label: 'Sub Menu 1',\r\n          url: '/level2item1',\r\n          shownByDefault: true,\r\n          subItems:\r\n            [\r\n              {label: 'Level 3 Menu 1', url: '/level3item1'},\r\n              {label: 'Level 3 Menu 2', url: '/level3item2'},\r\n              {label: 'Level 3 Menu 3', url: '/level3item3'}\r\n            ],\r\n          },\r\n          {\r\n            label: 'Sub Menu 2',\r\n            url: '/level2item2',\r\n            subItems: [\r\n              {label: 'Level 3a Menu 1', url: '/level3aitem1'},\r\n              {label: 'Level 3a Menu 2', url: '/level3aitem2'},\r\n              {label: 'Level 3a Menu 3', url: '/level3aitem3'}\r\n            ]\r\n          },\r\n          {\r\n            label: 'Sub Menu 3',\r\n            url: '/level2item2'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n       label: 'Main Menu 2',\r\n       url: '/mainMenu2',\r\n       subItems:\r\n         [\r\n           {label: 'Level 3 Menu 1', url: '/level3item1'},\r\n           {label: 'Level 3 Menu 2', url: '/level3item2'},\r\n           {label: 'Level 3 Menu 3', url: '/level3item3'}\r\n         ],\r\n         },\r\n     {label: 'Main Menu 3', url: '/mainMenu3'}\r\n   ];\r\n\r\n    const utilityMenu: MenuItem[] = [];\r\n    utilityMenu.push(new MenuItem('Documentation', '/documentation'));\r\n    utilityMenu.push(new MenuItem('Log In', '/login'));\r\n\r\n    this.headerOptions = new HeaderOptions();\r\n    this.headerOptions.title = this.title;\r\n    this.headerOptions.siteBrandingName = 'RELATIVITY';\r\n    this.headerOptions.siteBrandingSlogan = 'The Princeton University Design System';\r\n    this.headerOptions.showCompact = false;\r\n    this.headerOptions.showSearch = true;\r\n    // this.headerOptions.menuItems = mainMenu;\r\n    // this.headerOptions.utilityItems = utilityMenu;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"jazz-body-flex-container\">\r\n  <!--<app-jazz-header [headerOptions]=\"headerOptions\">-->\r\n  <app-jazz-header [title]=\"'Princeton University Design System'\" [siteBrandingName]=\"'RELATIVITY'\" [siteBrandingSlogan]=\"'The Princeton University Design System'\" [showCompact]=false [showSearch]=true>\r\n    <app-jazz-main-menu>\r\n      <app-jazz-main-menu-item label=\"Main Menu 1\" url=\"/mainMenu1\">\r\n          <app-jazz-main-menu-item label=\"Level 2 Menu 1\" url=\"/level2item1\" shownByDefault=\"true\">\r\n            <app-jazz-main-menu-item label=\"Level 3 Menu 1\" url=\"/level3item1\"></app-jazz-main-menu-item>\r\n            <app-jazz-main-menu-item label=\"Level 3 Menu 2\" url=\"/level3item1\"></app-jazz-main-menu-item>\r\n            <app-jazz-main-menu-item label=\"Level 3 Menu 3\" url=\"/level3item1\"></app-jazz-main-menu-item>\r\n          </app-jazz-main-menu-item>\r\n          <app-jazz-main-menu-item label=\"Level 2 Menu 2\" url=\"/level2item1\"></app-jazz-main-menu-item>\r\n          <app-jazz-main-menu-item label=\"Level 2 Menu 3\" url=\"/level2item1\"></app-jazz-main-menu-item>\r\n      </app-jazz-main-menu-item>\r\n      <app-jazz-main-menu-item label=\"Main Menu 2\" url=\"/mainMenu2\"></app-jazz-main-menu-item>\r\n      <app-jazz-main-menu-item label=\"Main Menu 3\" url=\"/mainMenu3\"></app-jazz-main-menu-item>\r\n    </app-jazz-main-menu>\r\n\r\n    <app-jazz-utility-menu>\r\n      <app-jazz-utility-item label=\"Documentation\" url=\"/documentation\"></app-jazz-utility-item>\r\n      <app-jazz-utility-item label=\"Log In\" url=\"/login\"></app-jazz-utility-item>\r\n    </app-jazz-utility-menu>\r\n</app-jazz-header>\r\n\r\n<main>\r\n  <div class=\"jazz-container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</main>\r\n\r\n  <footer role=\"contentinfo\" class=\"jazz-footer\">\r\n    <div class=\"jazz-container jazz-footer__content\">\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-3 col-xs-12\">\r\n          <ul class=\"jazz-footer__list\">\r\n            <li><a href=\"javascript:void(0);\"><i class=\"jazz-icon jazz-icon-email jazz-icon-white\" aria-hidden=\"true\"></i>  finance@princeton.edu</a></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"col-sm-3 col-xs-12\">\r\n          <ul class=\"jazz-footer__list\">\r\n            <li><a href=\"javascript:void(0);\"><i class=\"jazz-icon jazz-icon-phone jazz-icon-white\" aria-hidden=\"true\"></i>  609-258-3080</a></li>\r\n            <li><a href=\"javascript:void(0);\"><i class=\"jazz-icon jazz-icon-printer jazz-icon-white\" aria-hidden=\"true\"></i>  609-258-3080</a></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"col-sm-3 col-xs-12\">\r\n          <ul class=\"jazz-footer__list\">\r\n            <li><i class=\"jazz-icon jazz-icon-map-pin jazz-icon-transparent\" aria-hidden=\"true\"></i>  701 Carnegie Center</li>\r\n            <li><i class=\"jazz-icon jazz-icon-map-pin jazz-icon-white\" aria-hidden=\"true\"></i>  Suite 435</li>\r\n            <li><i class=\"jazz-icon jazz-icon-map-pin jazz-icon-transparent\" aria-hidden=\"true\"></i>  Princeton, NJ 08540</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"col-sm-3 col-xs-12 jazz-footer-text--right\">\r\n          <ul class=\"jazz-footer__list\">\r\n            <li><img class=\"jazz-footer__shield\" src=\"./assets/logos/shield.svg\" />  Web Development Services</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"jazz-footer__subfooter\">\r\n      <div class=\"jazz-container\">\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-4 col-xs-12\">\r\n            <a href=\"javascript:void(0)\">Accessibility</a>\r\n          </div>\r\n          <div class=\"col-sm-4 col-xs-12 jazz-footer-text--center\">\r\n            &copy; 2020 The Trustees of Princeton University\r\n          </div>\r\n          <div class=\"col-sm-4 col-xs-12\">\r\n            <a href=\"https://www.princeton.edu\" target=\"_blank\" class=\"jazz-no-icon\"><img class=\"jazz-footer__logo\" src=\"./assets/icons/pu-logo-stacked-white.svg\" alt=\"Princeton University\" /></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </footer>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-df6155eda7db1aa1fd1fc4d3926fddbc",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "description": "<p>Is this button disabled?</p>\n",
                    "line": 38
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 32
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 12
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 24,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, Output, EventEmitter} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-jazz-button',\r\n  templateUrl: './button.component.html'\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Is this button disabled?\r\n   */\r\n  @Input()\r\n  disabled = false;\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  click = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    // const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n    //\r\n    // return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n    return ['jazz-btn'];\r\n  }\r\n\r\n  public getDisabled(): string {\r\n    return this.disabled ? 'disabled' : '';\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 46
                    }
                }
            },
            "templateData": "<button\r\n  type=\"button\"\r\n  (click)=\"click.emit($event)\"\r\n  [ngClass]=\"classes\"\r\n  [disabled]=\"disabled\"\r\n>\r\n  {{ label }}\r\n</button>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-be41606a46746b1a5ade88101cf0358c",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "headerOptions",
                    "line": 28,
                    "type": "HeaderOptions"
                },
                {
                    "name": "showCompact",
                    "defaultValue": "false",
                    "line": 43,
                    "type": "boolean"
                },
                {
                    "name": "showSearch",
                    "defaultValue": "true",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "siteBrandingName",
                    "line": 34,
                    "type": "string"
                },
                {
                    "name": "siteBrandingSlogan",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 31,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mainMenu",
                    "type": "MainMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "MainMenuComponent"
                        }
                    ]
                },
                {
                    "name": "utilityMenu",
                    "type": "UtilityMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "UtilityMenuComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "displayWindowSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "retrieveMainMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "retrieveMenuItems",
                    "args": [
                        {
                            "name": "menuComponent",
                            "type": "MainMenuItemComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "MenuItem",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "menuComponent",
                            "type": "MainMenuItemComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveUtilityMenus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 52
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  HostListener,\r\n  Input,\r\n  AfterViewInit, ChangeDetectorRef, AfterViewChecked, ContentChild, OnInit\r\n} from '@angular/core';\r\nimport {HeaderOptions} from '../../model/header-options';\r\nimport {ARIA_EXPANDED} from '../menu/menu-constants';\r\nimport {\r\n  ICON_CLOSE,\r\n  ICON_SEARCH,\r\n  ICON_SELECTOR,\r\n  SEARCH_PANEL,\r\n  SEARCH_SELECTOR,\r\n  SEARCH_SHOWN_STYLE\r\n} from './header-constants';\r\nimport {MenuItem} from '../../model/menu-item';\r\nimport {MainMenuComponent} from './main-menu/main-menu';\r\nimport {MainMenuItemComponent} from './main-menu/main-menu-item';\r\nimport {UtilityMenuComponent} from './utility-menu/utility-menu';\r\n\r\n@Component({\r\n  selector: 'app-jazz-header',\r\n  templateUrl: './header.component.html'\r\n})\r\nexport class HeaderComponent implements OnInit, AfterViewInit, AfterViewChecked {\r\n  @Input()\r\n  headerOptions?: HeaderOptions;\r\n\r\n  @Input()\r\n  title?: string;\r\n\r\n  @Input()\r\n  siteBrandingName?: string;\r\n\r\n  @Input()\r\n  siteBrandingSlogan?: string;\r\n\r\n  @Input()\r\n  showSearch?: boolean = true;\r\n\r\n  @Input()\r\n  showCompact?: boolean = false;\r\n\r\n  @ContentChild(MainMenuComponent)\r\n  mainMenu: MainMenuComponent;\r\n\r\n  @ContentChild(UtilityMenuComponent)\r\n  utilityMenu: UtilityMenuComponent;\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event): void {\r\n    this.displayWindowSize();\r\n  }\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.checkInputs();\r\n  }\r\n\r\n  checkInputs(): void {\r\n    if (this.headerOptions &&  (this.siteBrandingName || this.siteBrandingSlogan || this.title || this.showSearch || this.showCompact)) {\r\n       console.warn('Please specify either the headerOptions or the individual properties for the header');\r\n    }\r\n\r\n    if (!this.headerOptions) {\r\n       this.headerOptions = Object.assign({}, {\r\n            title: this.title,\r\n            siteBrandingName: this.siteBrandingName,\r\n            siteBrandingSlogan: this.siteBrandingSlogan,\r\n            showSearch: this.showSearch,\r\n            showCompact: this.showCompact\r\n       });\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.retrieveMainMenu();\r\n    this.retrieveUtilityMenus();\r\n  }\r\n\r\n  retrieveUtilityMenus(): void {\r\n    if (!this.headerOptions.utilityItems && this.utilityMenu && this.utilityMenu.utilityMenuComponents.length > 0) {\r\n      const utilityMenu: MenuItem[] = [];\r\n      this.utilityMenu.utilityMenuComponents.forEach((item) => {\r\n         utilityMenu.push(Object.assign({}, {label: item.label, url: item.url}));\r\n      });\r\n      this.headerOptions.utilityItems = utilityMenu;\r\n    }\r\n  }\r\n\r\n  retrieveMainMenu(): void {\r\n    if (!this.headerOptions.menuItems && this.mainMenu && this.mainMenu.menuComponents.length > 0) {\r\n      const mainMenu: MenuItem[] = [];\r\n      this.mainMenu.menuComponents.forEach((item) => {\r\n        mainMenu.push(this.retrieveMenuItems(item));\r\n      });\r\n      this.headerOptions.menuItems = mainMenu;\r\n    }\r\n  }\r\n\r\n  retrieveMenuItems(menuComponent: MainMenuItemComponent): MenuItem {\r\n    const menuItem: MenuItem = Object.assign(new MenuItem(menuComponent.label, menuComponent.url), {\r\n      shownByDefault: menuComponent.shownByDefault ? menuComponent.shownByDefault : false,\r\n      subItems: []\r\n    });\r\n    if (menuComponent.menuComponents.length > 0) {\r\n      const removeSelf = menuComponent.menuComponents.filter(x => x !== menuComponent);\r\n      removeSelf.forEach((comp) => {\r\n        menuItem.subItems.push(this.retrieveMenuItems(comp));\r\n      });\r\n    }\r\n    return menuItem;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  displayWindowSize(): void {\r\n    // Search Reset\r\n    document.querySelectorAll(SEARCH_PANEL).forEach((searchbar) => {\r\n      searchbar.classList.remove(SEARCH_SHOWN_STYLE);\r\n    });\r\n\r\n    document.querySelectorAll(SEARCH_SELECTOR).forEach((button) => {\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n      const searchToggleIcon = button.querySelector(ICON_SELECTOR);\r\n      searchToggleIcon.classList.remove(ICON_CLOSE);\r\n      searchToggleIcon.classList.add(ICON_SEARCH);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "AfterViewChecked"
            ],
            "templateData": "<header role=\"banner\" class=\"jazz-header\" *ngIf=\"!headerOptions.showCompact\">\r\n  <h1 class=\"jazz-visually-hidden\">{{headerOptions.title}}</h1>\r\n  <div class=\"jazz-skip-links\">\r\n    <a href=\"#main-content\" class=\"jazz-skip-link\">Skip to main content</a>\r\n    <a href=\"#search\" class=\"jazz-skip-link\">Skip to search options</a>\r\n  </div>\r\n  <div class=\"jazz-container\">\r\n  <div class=\"jazz-header-container\">\r\n    <div class=\"jazz-header-right-container\">\r\n      <div class=\"jazz-header__utility-menu jazz-header__utility-menu--hide-small\">\r\n        <ul *ngIf=\"headerOptions && headerOptions.utilityItems && headerOptions.utilityItems.length > 0\">\r\n          <li *ngFor=\"let utilityItem of headerOptions.utilityItems\">\r\n            <a [routerLink]=\"utilityItem.url\" routerLinkActive=\"active\" #menuLink=\"routerLinkActive\"\r\n               [attr.aria-current]=\"menuLink.isActive ? 'page' : undefined\">{{utilityItem.label}}</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"jazz-header__search-bar\" *ngIf=\"headerOptions.showSearch\">\r\n          <h2 class=\"jazz-visually-hidden\">Search</h2>\r\n          <app-jazz-search-button></app-jazz-search-button>\r\n          <div class=\"jazz-header__search-bar-panel\">\r\n            <form action=\"javascript:void(0)\" method=\"get\" accept-charset=\"UTF-8\" role=\"search\">\r\n              <label class=\"jazz-visually-hidden\" for=\"search-field\">Search</label>\r\n              <a id=\"search\">\r\n                <input type=\"search\" id=\"search-field\" placeholder=\"Search\" autocomplete=\"off\" />\r\n              </a>\r\n              <button class=\"jazz-button\" type=\"submit\">\r\n                <span class=\"jazz-visually-hidden\">Search</span>\r\n              </button>\r\n            </form>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"jazz-header-break\"></div>\r\n  <div class=\"jazz-header__site-branding\">\r\n    <div class=\"jazz-header__site-branding-contents\">\r\n      <a href=\"./\" title=\"Home\" rel=\"home\" tabindex=\"-1\" aria-hidden=\"true\" class=\"jazz-header__site-branding-home-link\"><img src=\"./assets/logos/shield.svg\" alt=\"{{ headerOptions.siteBrandingName }}\"/></a>\r\n      <div class=\"jazz-header__site-branding-info\">\r\n        <div class=\"jazz-header__site-branding-name\">\r\n          <a href=\"./\" title=\"Home\" rel=\"home\">{{ headerOptions.siteBrandingName }}</a>\r\n        </div>\r\n        <div class=\"jazz-header__site-branding-slogan\">\r\n          {{ headerOptions.siteBrandingSlogan }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"jazz-header-collapsed-header\">\r\n    <div class=\"jazz-container\">\r\n      <div class=\"jazz-header-collapsed-container\">\r\n        <div class=\"jazz-header-collapsed__pu-branding\">\r\n          <a href=\"javascript:void(0);\" title=\"{{headerOptions.title}}\"><img src=\"./assets/logos/shield.svg\" alt=\"{{headerOptions.title}}\" /></a>\r\n        </div>\r\n        <div class=\"jazz-header-collapsed__site-branding--divider\">\r\n        </div>\r\n        <div class=\"jazz-header-collapsed__site-branding\">\r\n          <div class=\"jazz-header-collapsed__site-branding-info\">\r\n            <div class=\"jazz-header-collapsed__site-branding-name\">\r\n              <a href=\"javascript:void(0);\" title=\"Home\" rel=\"home\">{{ headerOptions.siteBrandingName }}</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <app-jazz-menu [menuItems]=\"headerOptions.menuItems\" [utilityItems]=\"headerOptions.utilityItems\">\r\n\r\n  </app-jazz-menu>\r\n  </div>\r\n</header>\r\n\r\n<header role=\"banner\" class=\"jazz-header-compact\" *ngIf=\"headerOptions.showCompact\">\r\n  <h1 class=\"jazz-visually-hidden\">{{ headerOptions.title }}</h1>\r\n  <div class=\"jazz-skip-links\">\r\n    <a href=\"#main-content\" class=\"jazz-skip-link\">Skip to main content</a>\r\n    <a href=\"#search\" class=\"jazz-skip-link\">Skip to search options</a>\r\n  </div>\r\n  <div class=\"jazz-container\">\r\n    <div class=\"jazz-header-compact-container\">\r\n      <div class=\"jazz-header-compact-logo\">\r\n        <div class=\"jazz-header-compact__pu-branding\">\r\n          <a href=\"javascript:void(0);\" title=\"{{ headerOptions.title }}\"><img src=\"./assets/logos/pu-standard-ww-ws.png\" alt=\"{{ headerOptions.title }}\" /></a>\r\n        </div>\r\n        <div class=\"jazz-header-compact__site-branding--divider\">\r\n        </div>\r\n        <div class=\"jazz-header-compact__site-branding\">\r\n          <div class=\"jazz-header-compact__site-branding-info\">\r\n            <div class=\"jazz-header-compact__site-branding-name\">\r\n              <a href=\"javascript:void(0);\" title=\"Home\" rel=\"home\">{{ headerOptions.siteBrandingName }}</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"jazz-header-collapsed-header\">\r\n        <div class=\"jazz-header-collapsed-container\">\r\n          <div class=\"jazz-header-collapsed__pu-branding\">\r\n            <a href=\"javascript:void(0);\" title=\"{{ headerOptions.title }}\"><img src=\"./assets/logos/shield.svg\" alt=\"{{ headerOptions.title }}\" /></a>\r\n          </div>\r\n          <div class=\"jazz-header-collapsed__site-branding--divider\">\r\n          </div>\r\n          <div class=\"jazz-header-collapsed__site-branding\">\r\n            <div class=\"jazz-header-collapsed__site-branding-info\">\r\n              <div class=\"jazz-header-collapsed__site-branding-name\">\r\n                <a href=\"javascript:void(0);\" title=\"Home\" rel=\"home\">{{ headerOptions.siteBrandingName }}</a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"jazz-header-break\"></div>\r\n      <nav aria-label=\"Main Menu\" class=\"jazz-menu__main-menu\">\r\n        <div class=\"jazz-menu__main-menu-navbar\">\r\n          <app-jazz-menu-main-button></app-jazz-menu-main-button>\r\n          <div class=\"jazz-menu__nav-container\">\r\n            <div class=\"jazz-header-compact__utility-menu\">\r\n              <ul class=\"jazz-menubar\">\r\n                <li *ngFor=\"let menuItem of headerOptions.utilityItems\">\r\n                  <a [routerLink]=\"menuItem.url\" routerLinkActive=\"active\" #menuLink=\"routerLinkActive\"\r\n                     [attr.aria-current]=\"menuLink.isActive ? 'page' : undefined\">{{menuItem.label}}</a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"jazz-header-compact__utility-menu--divider\"></div>\r\n            <div class=\"jazz-header-compact__utility-menu\">\r\n              <ul class=\"jazz-menubar\">\r\n                <li><a href=\"javascript void(0);\">Net Id</a></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</header>\r\n"
        },
        {
            "name": "MainMenu1Component",
            "id": "component-MainMenu1Component-cf03a015b75976871788aecbf0091842",
            "file": "src/app/main-menu/main-menu1/main-menu1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-menu1",
            "styleUrls": [
                "./main-menu1.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-menu1',\r\n  templateUrl: './main-menu1.component.html',\r\n  styleUrls: ['./main-menu1.component.css']\r\n})\r\nexport class MainMenu1Component implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-menu1.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"jazz-page-title\">Main Menu 1</h1>\r\n<h2>Accordion</h2>\r\n<p>\r\n  This section describes the first point. Careful consideration of these points should be considered.\r\n</p>\r\n<app-jazz-accordion>\r\n  <h2>\r\n    <button #jazzAccordionButtons class=\"jazz-accordion__button\" aria-expanded=\"false\" aria-controls=\"content1\">Sed porttitor lectus nibh?</button>\r\n  </h2>\r\n  <div class=\"jazz-accordion__content\" id=\"content1\" hidden>\r\n    Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem. Praesent sapien massa, convallis a\r\n    pellentesque nec, egestas non nisi.\r\n  </div>\r\n  <h2>\r\n    <button #jazzAccordionButtons class=\"jazz-accordion__button\" aria-expanded=\"true\" aria-controls=\"content2\">\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ultricies ligula sed magna dictum porta?\r\n    </button>\r\n  </h2>\r\n  <div aria-hidden=\"false\" class=\"jazz-accordion__content\" id=\"content2\">\r\n    Quisque velit nisi, pretium ut lacinia in, elementum id enim. Curabitur arcu erat, accumsan id imperdiet\r\n    et, porttitor at sem. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus.\r\n    Cras ultricies ligula sed magna dictum porta.\r\n  </div>\r\n  <h2>\r\n    <button #jazzAccordionButtons class=\"jazz-accordion__button\" aria-expanded=\"false\" aria-controls=\"content3\">\r\n      Vivamus magna justo, lacinia eget consectetur sed, convallis at tellus. Curabitur aliquet quam id dui posuere blandit.\r\n    </button>\r\n  </h2>\r\n  <div class=\"jazz-accordion__content\" id=\"content3\" hidden>\r\n    Nulla porttitor accumsan tincidunt. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices\r\n    posuere cubilia Curae; Donec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet ligula.\r\n    Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem.\r\n  </div>\r\n  <h2>\r\n    <button #jazzAccordionButtons class=\"jazz-accordion__button\" aria-expanded=\"false\" aria-controls=\"content4\">\r\n      Vivamus magna justo, lacinia eget consectetur sed, convallis at tellus. Curabitur aliquet quam id dui posuere blandit.\r\n    </button>\r\n  </h2>\r\n  <div class=\"jazz-accordion__content\" id=\"content4\" hidden>\r\n    Nulla porttitor accumsan tincidunt. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices\r\n    posuere cubilia Curae; Donec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet ligula.\r\n    Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem.\r\n  </div>\r\n</app-jazz-accordion>\r\n"
        },
        {
            "name": "MainMenu2Component",
            "id": "component-MainMenu2Component-5b4a00fcc8e68e01f5633e273f00bf76",
            "file": "src/app/main-menu/main-menu2/main-menu2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-menu2",
            "styleUrls": [
                "./main-menu2.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-menu2',\r\n  templateUrl: './main-menu2.component.html',\r\n  styleUrls: ['./main-menu2.component.css']\r\n})\r\nexport class MainMenu2Component implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  clicked(): void {\r\n    alert('Button was clicked');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-menu2.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"jazz-page-title\">Main Menu 2</h1>\r\n<h2>Second Point</h2>\r\n\r\n<nav class=\"jazz-breadcrumb\" aria-label=\"Breadcrumbs\">\r\n  <ol class=\"jazz-breadcrumb__list\">\r\n    <li class=\"jazz-breadcrumb__list-item\">\r\n      <a href=\"#\" class=\"jazz-breadcrumb__link\">Home</a>\r\n    </li>\r\n    <li class=\"jazz-breadcrumb__list-item\">\r\n      <a href=\"#\" class=\"jazz-breadcrumb__link\">Another Link</a>\r\n    </li>\r\n    <li class=\"jazz-breadcrumb__list-item\">\r\n      <a href=\"#\" class=\"jazz-breadcrumb__link\">Yet Another Link Level</a>\r\n    </li>\r\n    <li class=\"jazz-breadcrumb__list-item jazz-current\" aria-current=\"page\">And finally here were are the page description</li>\r\n  </ol>\r\n</nav>\r\n\r\n<p>\r\n  This section describes the second point. Careful consideration of these points should be considered. This is a button that activates a dialog box.\r\n  <app-jazz-modal-dialog [title]=\"'Sample Dialog'\" [buttonLabel]=\"'Click Me!'\" (buttonClicked)=\"clicked()\">\r\n      This is the content of the dialog\r\n  </app-jazz-modal-dialog>\r\n</p>\r\n\r\n"
        },
        {
            "name": "MainMenu3Component",
            "id": "component-MainMenu3Component-62b7e8136f2408df17eca68eb72b43ab",
            "file": "src/app/main-menu/main-menu3/main-menu3.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-menu3",
            "styleUrls": [
                "./main-menu3.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu3.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-menu3',\r\n  templateUrl: './main-menu3.component.html',\r\n  styleUrls: ['./main-menu3.component.css']\r\n})\r\nexport class MainMenu3Component implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-menu3.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"jazz-page-title\">Main Menu 3</h1>\r\n<h2>Third Point</h2>\r\n<p>\r\n  This section describes the third point. Careful consideration of these points should be considered.\r\n</p>\r\n"
        },
        {
            "name": "MainMenuComponent",
            "id": "component-MainMenuComponent-54d6491afc2678f3b57c3eb209bccbe8",
            "file": "src/app/components/header/main-menu/main-menu.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-main-menu",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuComponents",
                    "type": "QueryList<MainMenuItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MainMenuItemComponent, {descendants: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ContentChildren, QueryList} from '@angular/core';\r\nimport {MainMenuItemComponent} from './main-menu-item';\r\n\r\n@Component({\r\n  selector: 'app-jazz-main-menu',\r\n  template: `\r\n      <ng-content></ng-content>\r\n  `,\r\n})\r\nexport class MainMenuComponent {\r\n  @ContentChildren(MainMenuItemComponent, {descendants: false}) menuComponents: QueryList<MainMenuItemComponent>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MainMenuItemComponent",
            "id": "component-MainMenuItemComponent-eed74411d805a2887ac084847e691249",
            "file": "src/app/components/header/main-menu/main-menu-item.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-main-menu-item",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "shownByDefault",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "url",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuComponents",
                    "type": "QueryList<MainMenuItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MainMenuItemComponent, {descendants: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ContentChildren, Input, QueryList} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-jazz-main-menu-item',\r\n  template: `\r\n      <ng-content></ng-content>\r\n  `,\r\n})\r\nexport class MainMenuItemComponent {\r\n  @Input() url: string;\r\n  @Input() label: string;\r\n  @Input() shownByDefault: boolean;\r\n  @ContentChildren(MainMenuItemComponent, {descendants: false}) menuComponents: QueryList<MainMenuItemComponent>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MainPageComponent",
            "id": "component-MainPageComponent-bcd1eadf11ba244e98ec87e2ba70918c",
            "file": "src/app/main-page/main-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-page",
            "styleUrls": [
                "./main-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-page',\r\n  templateUrl: './main-page.component.html',\r\n  styleUrls: ['./main-page.component.css']\r\n})\r\nexport class MainPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-page.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"jazz-page-title\">Main Page</h1>\r\n<h2>Welcome to the Princeton Design System!</h2>\r\n<p>\r\n  This is the main page of the Princeton Design System.\r\n</p>\r\n\r\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-d3cbcf39d3aec82e20cc1826b7b51dce",
            "file": "src/app/components/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "mainMenuItems",
                    "line": 26,
                    "type": "MenuItem[]"
                },
                {
                    "name": "menuItems",
                    "line": 20,
                    "type": "MenuItem[]"
                },
                {
                    "name": "utilityItems",
                    "line": 23,
                    "type": "MenuItem[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeSubMenus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "displayWindowSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "getButtonForSelector",
                    "args": [
                        {
                            "name": "btnSelector",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        },
                        {
                            "name": "mainEl",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "btnSelector",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mainEl",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseOut",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetSubMenus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 29
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {MenuItem} from '../../model/menu-item';\r\nimport {Component, HostListener, Input} from '@angular/core';\r\nimport {\r\n  ARIA_EXPANDED,\r\n  HEADER_NAV_SELECTOR, HEADER_SUB_MENU_SELECTOR, ICON_CLOSE, ICON_MENU, ICON_SELECTOR, MENU_BUTTON_SELECTOR,\r\n  MENU_HIDE_STYLE, MENU_MAIN_MENU_SELECTOR,\r\n  MENU_NAV_EXPANDED_STYLE, MENU_RECENTLY_OPENED_ID, MENU_SELECTOR,\r\n  MENU_STICKY_STYLE, MENU_SUB_NAV_EXPANDED_STYLE,\r\n  MENUBAR_SHOWN_STYLE, MENUBAR_SUB_SHOWN_STYLE\r\n} from './menu-constants';\r\n\r\n\r\n@Component({\r\n  selector: 'app-jazz-menu',\r\n  templateUrl: './menu.component.html'\r\n})\r\nexport class MenuComponent {\r\n\r\n  @Input()\r\n  menuItems?: MenuItem[];\r\n\r\n  @Input()\r\n  utilityItems?: MenuItem[];\r\n\r\n  @Input()\r\n  mainMenuItems?: MenuItem[];\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event): void {\r\n    this.displayWindowSize();\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  displayWindowSize(): void {\r\n    // Main Menu Reset\r\n    document.querySelectorAll(HEADER_NAV_SELECTOR).forEach((header) => {\r\n      header.classList.remove(MENU_NAV_EXPANDED_STYLE);\r\n      header.querySelectorAll('ul').forEach((navbar) => {\r\n        navbar.classList.remove(MENU_NAV_EXPANDED_STYLE);\r\n        navbar.classList.remove(MENUBAR_SHOWN_STYLE);\r\n        navbar.classList.remove(MENU_STICKY_STYLE);\r\n        navbar.querySelectorAll('li').forEach((submenu) => {\r\n          submenu.classList.remove(MENU_STICKY_STYLE);\r\n          submenu.classList.remove(MENU_HIDE_STYLE);\r\n        });\r\n      });\r\n    });\r\n\r\n    document.querySelectorAll(MENU_BUTTON_SELECTOR).forEach((button) => {\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n      const menuToggleIcon = button.querySelector(ICON_SELECTOR);\r\n      menuToggleIcon.classList.remove(ICON_CLOSE);\r\n      menuToggleIcon.classList.add(ICON_MENU);\r\n    });\r\n\r\n    // Sub Menus Reset\r\n    document.querySelectorAll(MENU_SELECTOR).forEach((menu) => {\r\n      menu.querySelectorAll('ul').forEach((navbar) => {\r\n        navbar.classList.remove(MENU_SUB_NAV_EXPANDED_STYLE);\r\n        navbar.classList.remove(MENUBAR_SUB_SHOWN_STYLE);\r\n      });\r\n    });\r\n\r\n    document.querySelectorAll(HEADER_SUB_MENU_SELECTOR).forEach((button) => {\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n    });\r\n  }\r\n\r\n  // This retrieves the appropriate button depending on the selector passed in\r\n  getButtonForSelector(btnSelector, button, mainEl): any {\r\n    if (!button.matches(btnSelector)) {\r\n      button = mainEl.querySelector(btnSelector);\r\n    }\r\n    return button;\r\n  }\r\n\r\n  closeSubMenus(): void {\r\n    // const mainEl = event.btn.closest(MENU_MAIN_MENU_SELECTOR);\r\n    document.querySelectorAll(HEADER_NAV_SELECTOR).forEach((mainEl) => {\r\n      mainEl.querySelectorAll('li').forEach((navbar) => {\r\n        navbar.querySelectorAll('ul').forEach((list) => {\r\n          list.classList.remove(MENU_STICKY_STYLE);\r\n          list.classList.add(MENU_HIDE_STYLE);\r\n        });\r\n      });\r\n\r\n      // tslint:disable-next-line:no-shadowed-variable\r\n      mainEl.querySelectorAll(HEADER_SUB_MENU_SELECTOR).forEach((button) => {\r\n        button.setAttribute(ARIA_EXPANDED, 'false');\r\n      });\r\n    });\r\n  }\r\n\r\n  resetSubMenus(): void {\r\n    document.querySelectorAll(HEADER_NAV_SELECTOR).forEach((mainEl) => {\r\n      mainEl.querySelectorAll('li').forEach((navbar) => {\r\n        navbar.querySelectorAll('ul').forEach((list) => {\r\n          list.classList.remove(MENU_STICKY_STYLE);\r\n          list.classList.remove(MENU_HIDE_STYLE);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  onMouseOut(event): void {\r\n    const li = event.target as HTMLElement;\r\n    if (li) {\r\n      li.querySelectorAll('ul').forEach((subnav) => {\r\n        if (subnav.id === MENU_RECENTLY_OPENED_ID) {\r\n          subnav.classList.remove(MENU_HIDE_STYLE);\r\n          subnav.id = '';\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 31
            },
            "templateData": "<nav aria-label=\"Main Menu\" class=\"jazz-menu__main-menu\">\r\n  <h2 class=\"jazz-visually-hidden\">Main Menu</h2>\r\n\r\n  <div class=\"jazz-container\">\r\n    <div class=\"jazz-menu__main-menu-navbar\">\r\n      <app-jazz-menu-main-button></app-jazz-menu-main-button>\r\n      <div class=\"jazz-menu__nav-container\">\r\n        <ul *ngIf=\"menuItems && menuItems.length > 0\" class=\"jazz-menubar\" role=\"list\">\r\n            <li *ngFor=\"let level1item of menuItems\" (mouseleave)=\"onMouseOut($event)\">\r\n              <app-jazz-menu-item [menuItem]=\"level1item\" (closeSubMenus)=\"closeSubMenus()\" (resetSubMenus)=\"resetSubMenus()\"></app-jazz-menu-item>\r\n            </li>\r\n        </ul>\r\n        <div class=\"jazz-header__utility-menu jazz-header__utility-menu--hide-large\">\r\n          <ul *ngIf=\"utilityItems && utilityItems.length > 0\">\r\n            <li *ngFor=\"let utilityItem of utilityItems\" >\r\n              <a [routerLink]=\"utilityItem.url\" routerLinkActive=\"active\" #menuLink=\"routerLinkActive\"\r\n                [attr.aria-current]=\"menuLink.isActive ? 'page' : undefined\">{{utilityItem.label}}</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n"
        },
        {
            "name": "MenuItemComponent",
            "id": "component-MenuItemComponent-4814f5c6e5c51faf99acbdb45ca6eaad",
            "file": "src/app/components/menu/menu-item/menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-menu-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menuItem",
                    "line": 13,
                    "type": "MenuItem"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeSubMenus",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "resetSubMenus",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'template', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "getClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {MenuItem} from '../../../model/menu-item';\r\nimport {Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewContainerRef} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-jazz-menu-item',\r\n  templateUrl: './menu-item.component.html'\r\n})\r\nexport class MenuItemComponent implements OnInit {\r\n\r\n  @ViewChild('template', {static: true}) template;\r\n\r\n  @Input()\r\n  menuItem: MenuItem;\r\n\r\n  @Output()\r\n  closeSubMenus: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output()\r\n  resetSubMenus: EventEmitter<void> = new EventEmitter();\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.viewContainerRef.createEmbeddedView(this.template);\r\n  }\r\n\r\n  getClass(): string {\r\n    return this.menuItem.shownByDefault ? 'jazz-menubar__submenu--shown-by-default' : '';\r\n  }\r\n\r\n  close(): void {\r\n    this.closeSubMenus.emit();\r\n  }\r\n\r\n  reset(): void {\r\n    this.resetSubMenus.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #template>\r\n  <a [routerLink]=\"menuItem.url\" routerLinkActive=\"active\" #menuLink=\"routerLinkActive\"\r\n    [attr.aria-current]=\"menuLink.isActive ? 'page' : undefined\">{{menuItem.label}}</a>\r\n  <app-jazz-sub-button [menuItem]=\"menuItem\" (closeSubMenus)=\"close()\" (resetSubMenus)=\"reset()\"></app-jazz-sub-button>\r\n  <ul *ngIf=\"menuItem && menuItem.subItems && menuItem.subItems.length > 0\" [class]=\"getClass()\">\r\n    <li *ngFor=\"let levelItem of menuItem.subItems\">\r\n        <app-jazz-menu-item [menuItem]=\"levelItem\"></app-jazz-menu-item>\r\n    </li>\r\n  </ul>\r\n</ng-template>\r\n"
        },
        {
            "name": "MenuMainButtonComponent",
            "id": "component-MenuMainButtonComponent-af764d464d529cf1d9a8e4a357779952",
            "file": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-menu-main-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-main-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mainButtonTemplate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'mainButtonTemplate', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onMainMenuClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMainMenuIconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMenu",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, ViewChild, ViewContainerRef} from '@angular/core';\r\nimport {\r\n  HEADER_NAV_SELECTOR, ICON_CLOSE,\r\n  ICON_SELECTOR,\r\n  MENU_MAIN_MENU_SELECTOR,\r\n  MENU_NAV_EXPANDED_STYLE,\r\n  MENUBAR_SHOWN_STYLE\r\n} from '../menu-constants';\r\n\r\nexport const ARIA_EXPANDED = 'aria-expanded';\r\n\r\n@Component({\r\n  selector: 'app-jazz-menu-main-button',\r\n  templateUrl: './menu-main-button.component.html'\r\n})\r\nexport class MenuMainButtonComponent implements OnInit {\r\n\r\n  @ViewChild('mainButtonTemplate', {static: true}) mainButtonTemplate;\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.viewContainerRef.createEmbeddedView(this.mainButtonTemplate);\r\n  }\r\n\r\n  onMainMenuClick(event): void {\r\n    const button = event.target as HTMLElement;\r\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\r\n    const expand = !(expandedAttr && expandedAttr === 'true');\r\n    this.showMenu(expand, button);\r\n    event.stopImmediatePropagation();\r\n  }\r\n\r\n  onMainMenuIconClick(event): void {\r\n    const icon = event.target as HTMLElement;\r\n    const button = icon.closest('button');\r\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\r\n    const expand = !(expandedAttr && expandedAttr === 'true');\r\n    this.showMenu(expand, button);\r\n    event.stopImmediatePropagation();\r\n  }\r\n\r\n  // tslint:disable-next-line:typedef\r\n  showMenu(expand, button) {\r\n    // This makes sure regardless of which button is picked that the menu elements are expanded/hidden\r\n    const menuEl = button.closest(MENU_MAIN_MENU_SELECTOR);\r\n    const menuToggleIcon = button.querySelector(ICON_SELECTOR);\r\n    const navbar = menuEl.querySelector('ul');\r\n    const navContainer = menuEl.querySelector(HEADER_NAV_SELECTOR);\r\n\r\n    if (expand) {\r\n      navContainer.classList.add(MENU_NAV_EXPANDED_STYLE);\r\n      navbar.classList.add(MENUBAR_SHOWN_STYLE);\r\n      button.setAttribute(ARIA_EXPANDED, 'true');\r\n      menuToggleIcon.classList.remove('jazz-icon-menu');\r\n      menuToggleIcon.classList.add(ICON_CLOSE);\r\n    } else {\r\n      navContainer.classList.remove(MENU_NAV_EXPANDED_STYLE);\r\n      navbar.classList.remove(MENUBAR_SHOWN_STYLE);\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n      menuToggleIcon.classList.remove(ICON_CLOSE);\r\n      menuToggleIcon.classList.add('jazz-icon-menu');\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #mainButtonTemplate>\r\n  <button class=\"jazz-menu__menu-toggle\" (click)='onMainMenuClick($event)'\r\n          aria-expanded=\"false\" aria-label=\"Navigation Menu Toggle\">\r\n    Menu<i class=\"jazz-icon jazz-icon-menu\" aria-hidden=\"true\" (click)='onMainMenuIconClick($event)'></i>\r\n  </button>\r\n</ng-template>\r\n"
        },
        {
            "name": "MenuSubButtonComponent",
            "id": "component-MenuSubButtonComponent-f585b00117afd06e2a7f3692ddb3bf3e",
            "file": "src/app/components/menu/menu-sub-button/menu-sub-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-sub-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-sub-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menuItem",
                    "line": 16,
                    "type": "MenuItem"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeSubMenus",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "resetSubMenus",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "subButtonTemplate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'subButtonTemplate', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onSubMenuClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSubMenu",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSubMenuCondensed",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSubMenuFull",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewContainerRef} from '@angular/core';\r\nimport {MenuItem} from '../../../model/menu-item';\r\nimport {\r\n  ARIA_EXPANDED,\r\n  MENU_HIDE_STYLE,\r\n  MENU_RECENTLY_OPENED_ID,\r\n  MENU_STICKY_STYLE, MENU_SUB_NAV_EXPANDED_STYLE, MENUBAR_SUB_SHOWN_STYLE\r\n} from '../menu-constants';\r\n\r\n@Component({\r\n  selector: 'app-jazz-sub-button',\r\n  templateUrl: './menu-sub-button.component.html'\r\n})\r\nexport class MenuSubButtonComponent implements OnInit {\r\n  @Input()\r\n  menuItem: MenuItem;\r\n\r\n  @Output()\r\n  closeSubMenus: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output()\r\n  resetSubMenus: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('subButtonTemplate', {static: true}) subButtonTemplate;\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.viewContainerRef.createEmbeddedView(this.subButtonTemplate);\r\n  }\r\n\r\n  onSubMenuClick(event): void {\r\n    const button = event.target as HTMLElement;\r\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\r\n    const expand = !(expandedAttr && expandedAttr === 'true');\r\n    this.showSubMenu(expand, button);\r\n  }\r\n\r\n  showSubMenu(expand, button): void {\r\n    const mq = window.matchMedia('(min-width: 900px)');\r\n    if (mq.matches) {\r\n      this.showSubMenuFull(expand, button);\r\n    } else {\r\n      this.showSubMenuCondensed(expand, button);\r\n    }\r\n  }\r\n\r\n  showSubMenuFull(expand, button): void {\r\n    // This makes sure regardless of which button is picked that the menu elements are expanded/hidden\r\n    const navbar = button.closest('li');\r\n    const navContainer = navbar.querySelector('ul');\r\n    if (expand) {\r\n      this.closeSubMenus.emit();\r\n\r\n      navContainer.classList.add(MENU_STICKY_STYLE);\r\n      navContainer.classList.remove(MENU_HIDE_STYLE);\r\n      navbar.classList.add(MENU_STICKY_STYLE);\r\n      button.setAttribute(ARIA_EXPANDED, 'true');\r\n    } else {\r\n      this.resetSubMenus.emit();\r\n\r\n      navContainer.classList.remove(MENU_STICKY_STYLE);\r\n      navContainer.classList.add(MENU_HIDE_STYLE);\r\n      navContainer.id = MENU_RECENTLY_OPENED_ID;\r\n      navbar.classList.remove(MENU_STICKY_STYLE);\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n    }\r\n  }\r\n\r\n  showSubMenuCondensed(expand, button): void {\r\n    // This makes sure regardless of which button is picked that the menu elements are expanded/hidden\r\n    const navbar = button.closest('li');\r\n    const navContainer = navbar.querySelector('ul');\r\n\r\n    if (expand) {\r\n      navContainer.classList.add(MENU_SUB_NAV_EXPANDED_STYLE);\r\n      navbar.classList.add(MENUBAR_SUB_SHOWN_STYLE);\r\n      button.setAttribute(ARIA_EXPANDED, 'true');\r\n    } else {\r\n      navContainer.classList.remove(MENU_SUB_NAV_EXPANDED_STYLE);\r\n      navbar.classList.remove(MENUBAR_SUB_SHOWN_STYLE);\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #subButtonTemplate>\r\n  <button *ngIf='menuItem && menuItem.subItems && menuItem.subItems.length > 0' class=\"jazz-menu__submenu-toggle\" type=\"button\" aria-expanded=\"false\" (click)='onSubMenuClick($event)'>\r\n    <span class=\"jazz-visually-hidden\">\r\n      {{menuItem.label}}\r\n    </span>\r\n  </button>\r\n</ng-template>\r\n"
        },
        {
            "name": "ModalDialogComponent",
            "id": "component-ModalDialogComponent-9b55b16f8b5ec66e342846eed610c779",
            "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-modal-dialog",
            "styleUrls": [
                "./modal-dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonLabel",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "content",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 25,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 31,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "modalWrapper",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'jazzModalWrapper'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "focusOnFirstInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "handleKeyEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keepFocusWithin",
                    "args": [
                        {
                            "name": "keyEvent",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "keyEvent",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modalClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "onAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component, ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {UtilityFunctions} from '../utility-functions';\r\n\r\nconst INPUT_SELECTORS_EXCL_CLOSE = 'a[href]:not([disabled]), button:not([disabled]):not(.jazz-modal-button__close), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])';\r\nconst INPUT_SELECTORS = 'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])';\r\n\r\n@Component({\r\n  selector: 'app-jazz-modal-dialog',\r\n  templateUrl: './modal-dialog.component.html',\r\n  styleUrls: ['./modal-dialog.component.css']\r\n})\r\nexport class ModalDialogComponent implements OnInit {\r\n\r\n  @Input()\r\n  buttonLabel: string;\r\n\r\n  @Input()\r\n  title: string;\r\n\r\n  @Input()\r\n  content: string;\r\n\r\n  @Output()\r\n  buttonClicked: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('jazzModalWrapper')\r\n  modalWrapper: ElementRef;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onAction(event: Event): void {\r\n    console.log('onAction')\r\n\r\n    if (!this.handleKeyEvents(event)) {\r\n      return;\r\n    }\r\n\r\n    this.modalWrapper.nativeElement.classList.toggle('jazz-modal__wrapper--visible');\r\n    if (this.modalWrapper.nativeElement.classList.contains('jazz-modal__wrapper--visible')) {\r\n      this.focusOnFirstInput();\r\n    }\r\n\r\n    event.stopImmediatePropagation();\r\n  }\r\n\r\n  handleKeyEvents(event: Event): boolean {\r\n    if (event instanceof KeyboardEvent) {\r\n      const keyEvent: KeyboardEvent = event as KeyboardEvent;\r\n      const isTabPressed = (keyEvent.key === 'Tab');\r\n      const isEscPressed = (keyEvent.key === 'Escape');\r\n      const isEnterPressed = (keyEvent.key === 'Enter');\r\n\r\n      // Handle tab navigation to keep it within the window\r\n      if (isTabPressed) {\r\n        this.keepFocusWithin(keyEvent);\r\n        return false;\r\n      }\r\n\r\n      // Only allow Enter and Escape Key Press\r\n      if (!isEnterPressed && !isEscPressed) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  focusOnFirstInput(): void {\r\n    const focusableEls: HTMLElement[] = UtilityFunctions.select(INPUT_SELECTORS_EXCL_CLOSE, this.modalWrapper.nativeElement);\r\n    if (focusableEls.length > 0) {\r\n      focusableEls[0].focus();\r\n    }\r\n  }\r\n\r\n  keepFocusWithin(keyEvent): void {\r\n    const focusableEls: HTMLElement[] = UtilityFunctions.select(INPUT_SELECTORS, this.modalWrapper.nativeElement);\r\n    const firstFocusableEl = focusableEls[0];\r\n    const lastFocusableEl = focusableEls[focusableEls.length - 1];\r\n\r\n    if (keyEvent.shiftKey ) /* shift + tab */ {\r\n      if (document.activeElement === firstFocusableEl) {\r\n        lastFocusableEl.focus();\r\n        keyEvent.preventDefault();\r\n      }\r\n    } else /* tab */ {\r\n      if (document.activeElement === lastFocusableEl) {\r\n        firstFocusableEl.focus();\r\n        keyEvent.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  close(): void {\r\n    console.log('close')\r\n    this.modalWrapper.nativeElement.classList.remove('jazz-modal__wrapper--visible');\r\n  }\r\n\r\n  modalClick(): void {\r\n    this.close();\r\n    this.buttonClicked.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"jazz-modal\" role=\"region\">\r\n  <button class=\"jazz-btn jazz-modal__button\" (click)=\"onAction($event)\">{{ buttonLabel }}</button>\r\n  <div #jazzModalWrapper role=\"presentation\" class=\"jazz-modal-wrapper\" (keydown)=\"onAction($event)\">\r\n    <div role=\"dialog\" aria-label=\"Test Dialog with Script\" aria-modal=\"true\" class=\"jazz-modal-window jazz-modal--sm\">\r\n      <div class=\"jazz-modal-title\">\r\n        {{ title }}\r\n        <button class=\"jazz-modal__button jazz-modal-button__close jazz-modal-button--transparent\"\r\n                aria-label=\"Close modal dialog\" (click)=\"close()\"></button>\r\n      </div>\r\n      <div class=\"jazz-modal-content\" aria-labelledBy=\"jazz-modal-title\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n      <div class=\"jazz-modal-button-container\">\r\n        <button class=\"jazz-btn jazz-modal__button\" (click)=\"close()\">Cancel</button>\r\n        <button class=\"jazz-btn jazz-modal__button\" (click)=\"modalClick()\">OK</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PagerComponent",
            "id": "component-PagerComponent-20bc6bf5bbfa5a74e526f772fcdc2d02",
            "file": "src/app/components/pager/pager.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-pager",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pager.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataPage",
                    "line": 11,
                    "type": "DataPage<any>"
                }
            ],
            "outputsClass": [
                {
                    "name": "pagerChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "iterablePages",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "setPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {DataPage} from '../../model/data-page';\r\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-jazz-pager',\r\n  templateUrl: './pager.component.html'\r\n})\r\nexport class PagerComponent {\r\n\r\n  @Input('dataPage')\r\n  public dataPage: DataPage<any>;\r\n\r\n  @Output()\r\n  public pagerChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  iterablePages(): number[] {\r\n\r\n    const totalPages: number = this.dataPage.totalPages;\r\n    const currentPage: number = this.dataPage.number;\r\n    const pages: number[] = [];\r\n    const delta = 4;\r\n    let maxPages = 9;\r\n    let truncate = true;\r\n    let pageNum = 0;\r\n\r\n    if (totalPages < maxPages) {\r\n      maxPages = totalPages;\r\n      truncate = false;\r\n      pageNum = 0;\r\n    } else {\r\n      if (currentPage - delta < 0) {\r\n        pageNum = 0;\r\n      } else if (currentPage + delta > totalPages - 1) {\r\n        pageNum = totalPages - maxPages;\r\n      } else {\r\n        pageNum = currentPage - delta;\r\n      }\r\n    }\r\n\r\n    for (let pageIdx = 0; pageIdx < maxPages; pageIdx++) {\r\n      if (truncate) {\r\n        if (pageIdx === 0) {\r\n          // always show the first page number\r\n          pages.push(0);\r\n        } else if (pageIdx === 1 && pageNum !== 1) {\r\n          // show '...' if second page is not a 2\r\n          pages.push(-1);\r\n        } else if (pageIdx === maxPages - 1) {\r\n          // always show the last page number\r\n          pages.push(totalPages - 1);\r\n        } else if (pageIdx === maxPages - 2 && pageNum !== totalPages - 2) {\r\n          // show '...' if there is a gap between next to last page and last page\r\n          pages.push(-1);\r\n        } else {\r\n          pages.push(pageNum);\r\n        }\r\n      } else {\r\n        pages.push(pageNum);\r\n      }\r\n      pageNum++;\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  setPage(page: number): void {\r\n    if (page >= 0 && page <= this.dataPage.totalPages) {\r\n      this.dataPage.number = page;\r\n      this.pagerChange.emit(page);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "templateData": "<ul *ngIf=\"dataPage\" class=\"jazz-pager\" role=\"navigation\" aria-label=\"pagination\">\r\n  <li>\r\n    <a *ngIf=\"(dataPage['number'] !== 1)\" (click)=\"setPage(dataPage['number'] - 1)\" data-page=\"Previous\">Previous</a>\r\n    <span *ngIf=\"(dataPage['number'] === 1)\" [attr.aria-disabled]=\"true\" data-page=\"Previous\">Previous</span>\r\n  </li>\r\n  <li *ngFor=\"let page of iterablePages()\">\r\n    <a *ngIf=\"page >= 0\" (click)=\"setPage(page + 1)\"\r\n       attr.aria-label=\"Go to {{page + 1}}\"\r\n       attr.aria-current=\"{{ (dataPage.number === (page + 1)) ?'page': ''}}\"\r\n       attr.data-page=\"{{page + 1}}\" >{{page + 1}}\r\n    </a>\r\n    <span *ngIf=\"page < 0\">...</span>\r\n  </li>\r\n  <li>\r\n    <a *ngIf=\"(dataPage['number'] !== dataPage.totalPages)\" (click)=\"setPage(dataPage.number + 1)\" data-page=\"Next\">Next</a>\r\n    <span *ngIf=\"(dataPage['number'] === dataPage.totalPages)\" [attr.aria-disabled]=\"true\" data-page=\"Next\">Next</span>\r\n  </li>\r\n</ul>\r\n"
        },
        {
            "name": "Panel1Component",
            "id": "component-Panel1Component-cde66ef0233ad0e911f83f7f951a9966",
            "file": "src/stories/Tabs.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<h2>Panel 1</h2>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {moduleMetadata, storiesOf} from '@storybook/angular';\r\nimport {TabsComponent, TabComponent} from '../app/components/tabs/tabs.component';\r\nimport {APP_BASE_HREF} from '@angular/common';\r\nimport {RouterLink, RouterModule} from '@angular/router';\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  // selector: 'jazz-tab',\r\n  template: `<h2>Panel 1</h2>`\r\n})\r\nexport class Panel1Component {\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  // selector: 'jazz-tab',\r\n  template: `<h2>Panel 2</h2>`\r\n})\r\nexport class Panel2Component {\r\n}\r\n\r\nconst stories = storiesOf('Components/Tabs', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [TabsComponent, TabComponent, Panel1Component, Panel2Component],\r\n      imports: [\r\n        RouterModule.forRoot([\r\n          { path: 'panel1', component: Panel1Component },\r\n          { path: 'panel2', component: Panel2Component },\r\n        ], {\r\n          useHash: true,\r\n        })\r\n      ],\r\n      providers: [\r\n        { provide: APP_BASE_HREF, useValue: '/'},\r\n      ]\r\n    })\r\n  );\r\n\r\nstories.add('Default', () => {\r\n  return {\r\n    template:  `\r\n<jazz-tabs>\r\n    <jazz-tab label=\"Tab 1\"></jazz-tab>\r\n    <jazz-tab label=\"Tab 2\"></jazz-tab>\r\n</jazz-tabs>\r\n`\r\n  };\r\n});\r\n\r\nstories.add('Controlled Sections', () => {\r\n    return {\r\n      template:  `\r\n<jazz-tabs>\r\n    <jazz-tab label=\"Tab 1\" controls=\"panel1\"></jazz-tab>\r\n    <jazz-tab label=\"Tab 2\" controls=\"panel2\"></jazz-tab>\r\n</jazz-tabs>\r\n<div id=\"panel1\">\r\nPanel 1\r\n</div>\r\n<div id=\"panel2\">\r\nPanel 2\r\n</div>\r\n`\r\n    };\r\n});\r\n\r\nstories.add('Routing Support', () => {\r\n  return {\r\n    template:  `\r\n<jazz-tabs>\r\n    <jazz-tab label=\"Tab 1\" routeTo=\"/panel1\"></jazz-tab>\r\n    <jazz-tab label=\"Tab 2\" routeTo=\"/panel2\"></jazz-tab>\r\n</jazz-tabs>\r\n<router-outlet></router-outlet>\r\n`\r\n  };\r\n});\r\n\r\nstories.add('Routing Support (Selection)', () => {\r\n  return {\r\n    template:  `\r\n<jazz-tabs>\r\n    <jazz-tab label=\"Tab 1\" routeTo=\"/panel1\"></jazz-tab>\r\n    <jazz-tab label=\"Tab 2\" routeTo=\"/panel2\" selected=\"true\"></jazz-tab>\r\n</jazz-tabs>\r\n<router-outlet></router-outlet>\r\n`\r\n  };\r\n});\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "Panel2Component",
            "id": "component-Panel2Component-cde66ef0233ad0e911f83f7f951a9966",
            "file": "src/stories/Tabs.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<h2>Panel 2</h2>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {moduleMetadata, storiesOf} from '@storybook/angular';\r\nimport {TabsComponent, TabComponent} from '../app/components/tabs/tabs.component';\r\nimport {APP_BASE_HREF} from '@angular/common';\r\nimport {RouterLink, RouterModule} from '@angular/router';\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  // selector: 'jazz-tab',\r\n  template: `<h2>Panel 1</h2>`\r\n})\r\nexport class Panel1Component {\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  // selector: 'jazz-tab',\r\n  template: `<h2>Panel 2</h2>`\r\n})\r\nexport class Panel2Component {\r\n}\r\n\r\nconst stories = storiesOf('Components/Tabs', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [TabsComponent, TabComponent, Panel1Component, Panel2Component],\r\n      imports: [\r\n        RouterModule.forRoot([\r\n          { path: 'panel1', component: Panel1Component },\r\n          { path: 'panel2', component: Panel2Component },\r\n        ], {\r\n          useHash: true,\r\n        })\r\n      ],\r\n      providers: [\r\n        { provide: APP_BASE_HREF, useValue: '/'},\r\n      ]\r\n    })\r\n  );\r\n\r\nstories.add('Default', () => {\r\n  return {\r\n    template:  `\r\n<jazz-tabs>\r\n    <jazz-tab label=\"Tab 1\"></jazz-tab>\r\n    <jazz-tab label=\"Tab 2\"></jazz-tab>\r\n</jazz-tabs>\r\n`\r\n  };\r\n});\r\n\r\nstories.add('Controlled Sections', () => {\r\n    return {\r\n      template:  `\r\n<jazz-tabs>\r\n    <jazz-tab label=\"Tab 1\" controls=\"panel1\"></jazz-tab>\r\n    <jazz-tab label=\"Tab 2\" controls=\"panel2\"></jazz-tab>\r\n</jazz-tabs>\r\n<div id=\"panel1\">\r\nPanel 1\r\n</div>\r\n<div id=\"panel2\">\r\nPanel 2\r\n</div>\r\n`\r\n    };\r\n});\r\n\r\nstories.add('Routing Support', () => {\r\n  return {\r\n    template:  `\r\n<jazz-tabs>\r\n    <jazz-tab label=\"Tab 1\" routeTo=\"/panel1\"></jazz-tab>\r\n    <jazz-tab label=\"Tab 2\" routeTo=\"/panel2\"></jazz-tab>\r\n</jazz-tabs>\r\n<router-outlet></router-outlet>\r\n`\r\n  };\r\n});\r\n\r\nstories.add('Routing Support (Selection)', () => {\r\n  return {\r\n    template:  `\r\n<jazz-tabs>\r\n    <jazz-tab label=\"Tab 1\" routeTo=\"/panel1\"></jazz-tab>\r\n    <jazz-tab label=\"Tab 2\" routeTo=\"/panel2\" selected=\"true\"></jazz-tab>\r\n</jazz-tabs>\r\n<router-outlet></router-outlet>\r\n`\r\n  };\r\n});\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SearchButtonComponent",
            "id": "component-SearchButtonComponent-2ee50baf278aa9cc118d86a09ca77c5e",
            "file": "src/app/components/header/search-button/search-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-search-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchButtonTemplate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchButtonTemplate', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "onMainMenuSearchIconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSearch",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, ViewChild, ViewContainerRef} from '@angular/core';\r\nimport {ARIA_EXPANDED, ICON_CLOSE, ICON_SELECTOR} from '../../menu/menu-constants';\r\nimport {\r\n  HEADER_SELECTOR, SEARCH_PANEL, SEARCH_SHOWN_STYLE, ICON_SEARCH\r\n} from './../header-constants';\r\n\r\n@Component({\r\n  selector: 'app-jazz-search-button',\r\n  templateUrl: './search-button.component.html'\r\n})\r\nexport class SearchButtonComponent implements OnInit {\r\n\r\n  @ViewChild('searchButtonTemplate', {static: true}) searchButtonTemplate;\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.viewContainerRef.createEmbeddedView(this.searchButtonTemplate);\r\n  }\r\n\r\n  onSearchClick(event): void {\r\n    const button = event.target as HTMLElement;\r\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\r\n    const expand = !(expandedAttr && expandedAttr === 'true');\r\n    this.showSearch(expand, button);\r\n    event.stopImmediatePropagation();\r\n  }\r\n\r\n  onMainMenuSearchIconClick(event): void {\r\n    const icon = event.target as HTMLElement;\r\n    const button = icon.closest('button');\r\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\r\n    const expand = !(expandedAttr && expandedAttr === 'true');\r\n    this.showSearch(expand, button);\r\n    event.stopImmediatePropagation();\r\n  }\r\n\r\n  showSearch(expand, button): void {\r\n    // This makes sure regardless of which button is picked that the search elements are expanded/hidden\r\n    const headerEl = button.closest(HEADER_SELECTOR);\r\n    const searchToggleIcon = button.querySelector(ICON_SELECTOR);\r\n    const searchbar = headerEl.querySelector(SEARCH_PANEL);\r\n\r\n    if (expand) {\r\n      searchbar.classList.add(SEARCH_SHOWN_STYLE);\r\n      button.setAttribute(ARIA_EXPANDED, 'true');\r\n      searchToggleIcon.classList.remove(ICON_SEARCH);\r\n      searchToggleIcon.classList.add(ICON_CLOSE);\r\n      const input = searchbar.querySelector(\"input[type='search']\");\r\n      input.focus();\r\n    } else {\r\n      searchbar.classList.remove(SEARCH_SHOWN_STYLE);\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n      searchToggleIcon.classList.remove(ICON_CLOSE);\r\n      searchToggleIcon.classList.add(ICON_SEARCH);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #searchButtonTemplate>\r\n  <button class=\"jazz-header__search-bar-toggle\" (click)='onSearchClick($event)'\r\n          aria-expanded=\"false\" aria-label=\"Search Toggle\">\r\n    <i class=\"jazz-icon jazz-icon-search\" aria-hidden=\"true\" (click)='onMainMenuSearchIconClick($event)'></i>\r\n  </button>\r\n</ng-template>\r\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-b48daf08e1afa4295023fc3842a1e97b",
            "file": "src/app/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jazz-tab",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aria-label",
                    "defaultValue": "null",
                    "line": 33
                },
                {
                    "name": "aria-labelledby",
                    "defaultValue": "null",
                    "line": 34
                },
                {
                    "name": "controls",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 30
                },
                {
                    "name": "label",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "routeTo",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "line": 35
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {HIDDEN, UtilityFunctions} from '../utility-functions';\r\n\r\n/** Generate unique id for tab list */\r\nlet idGenerator = 0;\r\n\r\n// TODO: icons\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'jazz-tab',\r\n  template: ``\r\n})\r\nexport class TabComponent {\r\n\r\n  tabindex = 0;\r\n\r\n  @Input() disabled = false;\r\n  @Input() label: string;\r\n  @Input() controls: string;\r\n  @Input('aria-label') ariaLabel = null;\r\n  @Input('aria-labelledby') ariaLabelledby = null;\r\n  @Input() selected = false;\r\n  @Input() routeTo: string;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'jazz-tabs',\r\n  template: `\r\n    <div\r\n      [id]=\"getTabListId()\"\r\n      class=\"jazz-tablist\"\r\n      [class.jazz-auto-activate]=\"autoActivate\"\r\n      role=\"tablist\">\r\n      <button #button\r\n        [id]=\"getTabId(i)\"\r\n        role=\"tab\"\r\n        [attr.tabindex]=\"tab.tabindex\"\r\n        [disabled]=\"tab.disabled\"\r\n        [attr.aria-selected]=\"tab.selected\"\r\n        [attr.aria-controls]=\"tab.controls\"\r\n        [attr.aria-label]=\"tab.ariaLabel || null\"\r\n        [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\r\n        (click)=\"handleClickEvent(tab)\"\r\n        (keyup)=\"handleKeyboardEvent(tab, i, $event)\"\r\n        *ngFor=\"let tab of tabs; let i = index\">{{ tab.label }}</button>\r\n    </div>\r\n  `\r\n})\r\nexport class TabsComponent implements OnInit, AfterContentInit {\r\n\r\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\r\n  @ViewChildren('button') buttons: QueryList<ElementRef>;\r\n\r\n  // tslint:disable-next-line:variable-name\r\n  private _autoActivate = false;\r\n\r\n  @Input()\r\n  get autoActivate(): boolean {\r\n    return this._autoActivate;\r\n  }\r\n  set autoActivate(value: boolean) {\r\n    this._autoActivate = value;\r\n  }\r\n\r\n  // @Input()\r\n  // private autoActivate = false;\r\n\r\n  // tslint:disable-next-line:variable-name\r\n  private readonly _elementId: number;\r\n\r\n  constructor(private router: Router) {\r\n    this._elementId = idGenerator++;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n\r\n    this.initializeTabs();\r\n\r\n    this.tabs.changes.subscribe(\r\n      () => {\r\n        this.initializeTabs();\r\n      }\r\n    );\r\n  }\r\n\r\n  initializeTabs(): void {\r\n    let firstSelectedTab: TabComponent = null;\r\n    let firstCurrentRoute: TabComponent = null;\r\n    let firstEnabledTab: TabComponent = null;\r\n\r\n    // find first enabled and first selected (and enabled) tab\r\n\r\n    for (const tab of this.tabs) {\r\n      if (!firstEnabledTab && !tab.disabled) {\r\n        firstEnabledTab = tab;\r\n      }\r\n      if (!firstSelectedTab && !tab.disabled && tab.selected) {\r\n        firstSelectedTab = tab;\r\n      }\r\n      if (!firstCurrentRoute && !tab.disabled && tab.routeTo && this.router.isActive(tab.routeTo, true)) {\r\n        firstCurrentRoute = tab;\r\n      }\r\n    }\r\n\r\n    // select the first selected tab (if it is enabled), otherwise select the first enabled tab or the first route\r\n\r\n    if (firstSelectedTab) {\r\n      this.selectTab(firstSelectedTab);\r\n    } else if (firstEnabledTab) {\r\n      this.selectTab(firstEnabledTab);\r\n    } else if (firstCurrentRoute) {\r\n      this.selectTab(firstCurrentRoute);\r\n    }\r\n  }\r\n\r\n  getTabListId(): string {\r\n    return 'jazz-tabs-' + this._elementId;\r\n  }\r\n\r\n  getTabId(idx: number): string {\r\n    return this.getTabListId() + '-' + idx;\r\n  }\r\n\r\n  setControlledElementVisibility(controlledElementId: string, expanded: boolean): void {\r\n    if (controlledElementId) {\r\n      const controlledElement = document.getElementById(controlledElementId);\r\n      if (!controlledElement) {\r\n        throw new Error(`aria-controls is not properly configured: ${controlledElementId}`);\r\n      }\r\n      if (expanded) {\r\n        controlledElement.removeAttribute(HIDDEN);\r\n      } else {\r\n        controlledElement.setAttribute(HIDDEN, '');\r\n      }\r\n    }\r\n  }\r\n\r\n  navigateToRoute(routeUrl: string): void {\r\n    this.router.navigateByUrl(routeUrl);\r\n  }\r\n\r\n  /**\r\n   * De-select all tabs (buttons) in tablist, except the tab (button) provided.\r\n   *\r\n   * @param tablist\r\n   * @param exceptButton\r\n   */\r\n  deselectAllOtherButtonsInTablist(exceptTab: TabComponent): void {\r\n    this.tabs.forEach((tab) => {\r\n      if (tab !== exceptTab) {\r\n        this.deselectTab(tab);\r\n      }\r\n    });\r\n  }\r\n\r\n  selectTab(tab: TabComponent): void {\r\n\r\n    this.deselectAllOtherButtonsInTablist(tab);\r\n\r\n    // The selected tab is always set to be selected (selected=true).  Selecting an active tab will not de-select it.\r\n\r\n    this.setTabSelection(tab, true);\r\n  }\r\n\r\n  deselectTab(tab: TabComponent): void {\r\n    this.setTabSelection(tab, false);\r\n  }\r\n\r\n  setTabSelection(tab: TabComponent, selected: boolean): void {\r\n    if (tab.routeTo) {\r\n      this.navigateToRoute(tab.routeTo);\r\n    } else {\r\n      this.setControlledElementVisibility(tab.controls, selected);\r\n    }\r\n    if (selected) {\r\n      tab.selected = true;\r\n      tab.tabindex = 0;\r\n    } else {\r\n      tab.selected = false;\r\n      tab.tabindex = -1;\r\n    }\r\n  }\r\n\r\n  handleClickEvent(tab: TabComponent): void {\r\n    if (!tab.disabled && !tab.selected) {\r\n      this.selectTab(tab);\r\n    }\r\n  }\r\n\r\n  handleKeyboardEvent(eventTab: TabComponent, idx: number, keyEvent: KeyboardEvent): void {\r\n\r\n    let focusIdx = -1;\r\n\r\n    // identify the tab that should receive focus based on the key that was pressed\r\n\r\n    if (keyEvent.key === 'ArrowRight') {\r\n      focusIdx = this.getNextOrFirstEnabledTabIndex(idx);\r\n    } else if (keyEvent.key === 'ArrowLeft') {\r\n      focusIdx = this.getPreviousOrLastEnabledTab(idx);\r\n    } else if (keyEvent.key === 'Home') {\r\n      focusIdx = this.getFirstEnabledTabIndex();\r\n    } else if (keyEvent.key === 'End') {\r\n      focusIdx = this.getLastEnabledTabIndex();\r\n    }\r\n\r\n    if (focusIdx !== -1) {\r\n\r\n      // if the tablist is configured to automatically select the tab upon focus, then select the tab\r\n\r\n      if (this.autoActivate) {\r\n        this.selectTab(this.tabs.toArray()[focusIdx]);\r\n      }\r\n\r\n      // set focus to the tab\r\n      this.buttons.toArray()[focusIdx].nativeElement.focus();\r\n\r\n      keyEvent.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  getNextEnabledTabIndex(tabs: TabComponent[], startIdx: number): number {\r\n\r\n    const safeStartIdx = this.clampTabIndex(startIdx);\r\n\r\n    for (let i = safeStartIdx; i < tabs.length; i++) {\r\n      const tab = tabs[i];\r\n      if (!tab.disabled) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  getPreviousEnabledTabIndex(tabs: TabComponent[], startIdx: number): number {\r\n\r\n    const safeStartIdx = this.clampTabIndex(startIdx);\r\n\r\n    for (let i = safeStartIdx; i >= 0; i--) {\r\n      const tab = tabs[i];\r\n      if (!tab.disabled) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Find the first enabled tab (button) in the list of provided tabs (buttons)\r\n   */\r\n  getFirstEnabledTabIndex(): number {\r\n    return this.getNextEnabledTabIndex(this.tabs.toArray(), 0);\r\n  }\r\n\r\n  /**\r\n   * Find the last enabled tab (button) in the list of provided tabs (buttons).\r\n   */\r\n  getLastEnabledTabIndex(): number {\r\n    return this.getPreviousEnabledTabIndex(this.tabs.toArray(), this.tabs.length - 1);\r\n  }\r\n\r\n  /**\r\n   * Ensure that index is within the appropriate range for the number of tabs that we have.\r\n   *\r\n   * The max function is accounting for the NaN value with the `|| 0` portion of the expression to\r\n   * an infinite loop since Math.max(NaN, 0) === NaN.\r\n   *\r\n   * (per Angular Material Tabs code: https://github.com/angular/components/blob/master/src/material/tabs/tab-group.ts)\r\n   *\r\n   * @param index\r\n   * @private\r\n   */\r\n  private clampTabIndex(index: number | null): number {\r\n    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\r\n  }\r\n\r\n  /**\r\n   * Find the next enabled tab (button) in the list of tabs (buttons) provided.\r\n   *\r\n   * The search will begin at the position in the list where the provided tab (button) is located and the search\r\n   * will wrap around to the beginning of the provided list of tabs (buttons) if no enabled tab (button) is found\r\n   * in the list after the location of the provided tab (button).\r\n   *\r\n   * @param refTab the tab to use as a starting point for finding the next enabled tab\r\n   */\r\n  getNextOrFirstEnabledTabIndex(startIdx: number): number {\r\n    const tabsArr = this.tabs.toArray();\r\n    const idx = this.getNextEnabledTabIndex(tabsArr, startIdx + 1);\r\n    if (idx === -1) {\r\n      return this.getNextEnabledTabIndex(tabsArr, 0);\r\n    } else {\r\n      return idx;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find the previous enabled tab (button) in the list of tabs (buttons) provided.\r\n   *\r\n   * The search will begin at the position in the list where the provided tab (button) is located and the search\r\n   * will wrap around to the end of the provided list of tabs (buttons) if no enabled tab (button) is found\r\n   * in the list before the location of the provided tab (button).\r\n   *\r\n   * @param tabs\r\n   * @param refButton\r\n   */\r\n  getPreviousOrLastEnabledTab(startIdx: number): number {\r\n    const tabsArr = this.tabs.toArray();\r\n    const idx = this.getPreviousEnabledTabIndex(tabsArr, startIdx - 1);\r\n    if (idx === -1) {\r\n      return this.getPreviousEnabledTabIndex(tabsArr, tabsArr.length - 1);\r\n    } else {\r\n      return idx;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-b48daf08e1afa4295023fc3842a1e97b",
            "file": "src/app/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jazz-tabs",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n  [id]=\"getTabListId()\"\n  class=\"jazz-tablist\"\n  [class.jazz-auto-activate]=\"autoActivate\"\n  role=\"tablist\">\n  <button #button\n    [id]=\"getTabId(i)\"\n    role=\"tab\"\n    [attr.tabindex]=\"tab.tabindex\"\n    [disabled]=\"tab.disabled\"\n    [attr.aria-selected]=\"tab.selected\"\n    [attr.aria-controls]=\"tab.controls\"\n    [attr.aria-label]=\"tab.ariaLabel || null\"\n    [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\n    (click)=\"handleClickEvent(tab)\"\n    (keyup)=\"handleKeyboardEvent(tab, i, $event)\"\n    *ngFor=\"let tab of tabs; let i = index\">{{ tab.label }}</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoActivate",
                    "line": 72,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_autoActivate",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_elementId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "buttons",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'button'"
                        }
                    ]
                },
                {
                    "name": "tabs",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clampTabIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 291,
                    "description": "<p>Ensure that index is within the appropriate range for the number of tabs that we have.</p>\n<p>The max function is accounting for the NaN value with the <code>|| 0</code> portion of the expression to\nan infinite loop since Math.max(NaN, 0) === NaN.</p>\n<p>(per Angular Material Tabs code: <a href=\"https://github.com/angular/components/blob/master/src/material/tabs/tab-group.ts\">https://github.com/angular/components/blob/master/src/material/tabs/tab-group.ts</a>)</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7853,
                                "end": 7858,
                                "flags": 0,
                                "escapedText": "index"
                            },
                            "type": "number | null",
                            "tagName": {
                                "pos": 7847,
                                "end": 7852,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 7866,
                                "end": 7873,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "deselectAllOtherButtonsInTablist",
                    "args": [
                        {
                            "name": "exceptTab",
                            "type": "TabComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "description": "<p>De-select all tabs (buttons) in tablist, except the tab (button) provided.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "exceptTab",
                            "type": "TabComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deselectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFirstEnabledTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 269,
                    "description": "<p>Find the first enabled tab (button) in the list of provided tabs (buttons)</p>\n"
                },
                {
                    "name": "getLastEnabledTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 276,
                    "description": "<p>Find the last enabled tab (button) in the list of provided tabs (buttons).</p>\n"
                },
                {
                    "name": "getNextEnabledTabIndex",
                    "args": [
                        {
                            "name": "tabs",
                            "type": "TabComponent[]"
                        },
                        {
                            "name": "startIdx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 238,
                    "jsdoctags": [
                        {
                            "name": "tabs",
                            "type": "TabComponent[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startIdx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNextOrFirstEnabledTabIndex",
                    "args": [
                        {
                            "name": "startIdx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 304,
                    "description": "<p>Find the next enabled tab (button) in the list of tabs (buttons) provided.</p>\n<p>The search will begin at the position in the list where the provided tab (button) is located and the search\nwill wrap around to the beginning of the provided list of tabs (buttons) if no enabled tab (button) is found\nin the list after the location of the provided tab (button).</p>\n",
                    "jsdoctags": [
                        {
                            "name": "startIdx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPreviousEnabledTabIndex",
                    "args": [
                        {
                            "name": "tabs",
                            "type": "TabComponent[]"
                        },
                        {
                            "name": "startIdx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 252,
                    "jsdoctags": [
                        {
                            "name": "tabs",
                            "type": "TabComponent[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startIdx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPreviousOrLastEnabledTab",
                    "args": [
                        {
                            "name": "startIdx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 324,
                    "description": "<p>Find the previous enabled tab (button) in the list of tabs (buttons) provided.</p>\n<p>The search will begin at the position in the list where the provided tab (button) is located and the search\nwill wrap around to the end of the provided list of tabs (buttons) if no enabled tab (button) is found\nin the list before the location of the provided tab (button).</p>\n",
                    "jsdoctags": [
                        {
                            "name": "startIdx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabId",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabListId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 133
                },
                {
                    "name": "handleClickEvent",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKeyboardEvent",
                    "args": [
                        {
                            "name": "eventTab",
                            "type": "TabComponent"
                        },
                        {
                            "name": "idx",
                            "type": "number"
                        },
                        {
                            "name": "keyEvent",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "jsdoctags": [
                        {
                            "name": "eventTab",
                            "type": "TabComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keyEvent",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeTabs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "navigateToRoute",
                    "args": [
                        {
                            "name": "routeUrl",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "routeUrl",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setControlledElementVisibility",
                    "args": [
                        {
                            "name": "controlledElementId",
                            "type": "string"
                        },
                        {
                            "name": "expanded",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "jsdoctags": [
                        {
                            "name": "controlledElementId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expanded",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTabSelection",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabComponent"
                        },
                        {
                            "name": "selected",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selected",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {HIDDEN, UtilityFunctions} from '../utility-functions';\r\n\r\n/** Generate unique id for tab list */\r\nlet idGenerator = 0;\r\n\r\n// TODO: icons\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'jazz-tab',\r\n  template: ``\r\n})\r\nexport class TabComponent {\r\n\r\n  tabindex = 0;\r\n\r\n  @Input() disabled = false;\r\n  @Input() label: string;\r\n  @Input() controls: string;\r\n  @Input('aria-label') ariaLabel = null;\r\n  @Input('aria-labelledby') ariaLabelledby = null;\r\n  @Input() selected = false;\r\n  @Input() routeTo: string;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'jazz-tabs',\r\n  template: `\r\n    <div\r\n      [id]=\"getTabListId()\"\r\n      class=\"jazz-tablist\"\r\n      [class.jazz-auto-activate]=\"autoActivate\"\r\n      role=\"tablist\">\r\n      <button #button\r\n        [id]=\"getTabId(i)\"\r\n        role=\"tab\"\r\n        [attr.tabindex]=\"tab.tabindex\"\r\n        [disabled]=\"tab.disabled\"\r\n        [attr.aria-selected]=\"tab.selected\"\r\n        [attr.aria-controls]=\"tab.controls\"\r\n        [attr.aria-label]=\"tab.ariaLabel || null\"\r\n        [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\r\n        (click)=\"handleClickEvent(tab)\"\r\n        (keyup)=\"handleKeyboardEvent(tab, i, $event)\"\r\n        *ngFor=\"let tab of tabs; let i = index\">{{ tab.label }}</button>\r\n    </div>\r\n  `\r\n})\r\nexport class TabsComponent implements OnInit, AfterContentInit {\r\n\r\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\r\n  @ViewChildren('button') buttons: QueryList<ElementRef>;\r\n\r\n  // tslint:disable-next-line:variable-name\r\n  private _autoActivate = false;\r\n\r\n  @Input()\r\n  get autoActivate(): boolean {\r\n    return this._autoActivate;\r\n  }\r\n  set autoActivate(value: boolean) {\r\n    this._autoActivate = value;\r\n  }\r\n\r\n  // @Input()\r\n  // private autoActivate = false;\r\n\r\n  // tslint:disable-next-line:variable-name\r\n  private readonly _elementId: number;\r\n\r\n  constructor(private router: Router) {\r\n    this._elementId = idGenerator++;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n\r\n    this.initializeTabs();\r\n\r\n    this.tabs.changes.subscribe(\r\n      () => {\r\n        this.initializeTabs();\r\n      }\r\n    );\r\n  }\r\n\r\n  initializeTabs(): void {\r\n    let firstSelectedTab: TabComponent = null;\r\n    let firstCurrentRoute: TabComponent = null;\r\n    let firstEnabledTab: TabComponent = null;\r\n\r\n    // find first enabled and first selected (and enabled) tab\r\n\r\n    for (const tab of this.tabs) {\r\n      if (!firstEnabledTab && !tab.disabled) {\r\n        firstEnabledTab = tab;\r\n      }\r\n      if (!firstSelectedTab && !tab.disabled && tab.selected) {\r\n        firstSelectedTab = tab;\r\n      }\r\n      if (!firstCurrentRoute && !tab.disabled && tab.routeTo && this.router.isActive(tab.routeTo, true)) {\r\n        firstCurrentRoute = tab;\r\n      }\r\n    }\r\n\r\n    // select the first selected tab (if it is enabled), otherwise select the first enabled tab or the first route\r\n\r\n    if (firstSelectedTab) {\r\n      this.selectTab(firstSelectedTab);\r\n    } else if (firstEnabledTab) {\r\n      this.selectTab(firstEnabledTab);\r\n    } else if (firstCurrentRoute) {\r\n      this.selectTab(firstCurrentRoute);\r\n    }\r\n  }\r\n\r\n  getTabListId(): string {\r\n    return 'jazz-tabs-' + this._elementId;\r\n  }\r\n\r\n  getTabId(idx: number): string {\r\n    return this.getTabListId() + '-' + idx;\r\n  }\r\n\r\n  setControlledElementVisibility(controlledElementId: string, expanded: boolean): void {\r\n    if (controlledElementId) {\r\n      const controlledElement = document.getElementById(controlledElementId);\r\n      if (!controlledElement) {\r\n        throw new Error(`aria-controls is not properly configured: ${controlledElementId}`);\r\n      }\r\n      if (expanded) {\r\n        controlledElement.removeAttribute(HIDDEN);\r\n      } else {\r\n        controlledElement.setAttribute(HIDDEN, '');\r\n      }\r\n    }\r\n  }\r\n\r\n  navigateToRoute(routeUrl: string): void {\r\n    this.router.navigateByUrl(routeUrl);\r\n  }\r\n\r\n  /**\r\n   * De-select all tabs (buttons) in tablist, except the tab (button) provided.\r\n   *\r\n   * @param tablist\r\n   * @param exceptButton\r\n   */\r\n  deselectAllOtherButtonsInTablist(exceptTab: TabComponent): void {\r\n    this.tabs.forEach((tab) => {\r\n      if (tab !== exceptTab) {\r\n        this.deselectTab(tab);\r\n      }\r\n    });\r\n  }\r\n\r\n  selectTab(tab: TabComponent): void {\r\n\r\n    this.deselectAllOtherButtonsInTablist(tab);\r\n\r\n    // The selected tab is always set to be selected (selected=true).  Selecting an active tab will not de-select it.\r\n\r\n    this.setTabSelection(tab, true);\r\n  }\r\n\r\n  deselectTab(tab: TabComponent): void {\r\n    this.setTabSelection(tab, false);\r\n  }\r\n\r\n  setTabSelection(tab: TabComponent, selected: boolean): void {\r\n    if (tab.routeTo) {\r\n      this.navigateToRoute(tab.routeTo);\r\n    } else {\r\n      this.setControlledElementVisibility(tab.controls, selected);\r\n    }\r\n    if (selected) {\r\n      tab.selected = true;\r\n      tab.tabindex = 0;\r\n    } else {\r\n      tab.selected = false;\r\n      tab.tabindex = -1;\r\n    }\r\n  }\r\n\r\n  handleClickEvent(tab: TabComponent): void {\r\n    if (!tab.disabled && !tab.selected) {\r\n      this.selectTab(tab);\r\n    }\r\n  }\r\n\r\n  handleKeyboardEvent(eventTab: TabComponent, idx: number, keyEvent: KeyboardEvent): void {\r\n\r\n    let focusIdx = -1;\r\n\r\n    // identify the tab that should receive focus based on the key that was pressed\r\n\r\n    if (keyEvent.key === 'ArrowRight') {\r\n      focusIdx = this.getNextOrFirstEnabledTabIndex(idx);\r\n    } else if (keyEvent.key === 'ArrowLeft') {\r\n      focusIdx = this.getPreviousOrLastEnabledTab(idx);\r\n    } else if (keyEvent.key === 'Home') {\r\n      focusIdx = this.getFirstEnabledTabIndex();\r\n    } else if (keyEvent.key === 'End') {\r\n      focusIdx = this.getLastEnabledTabIndex();\r\n    }\r\n\r\n    if (focusIdx !== -1) {\r\n\r\n      // if the tablist is configured to automatically select the tab upon focus, then select the tab\r\n\r\n      if (this.autoActivate) {\r\n        this.selectTab(this.tabs.toArray()[focusIdx]);\r\n      }\r\n\r\n      // set focus to the tab\r\n      this.buttons.toArray()[focusIdx].nativeElement.focus();\r\n\r\n      keyEvent.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  getNextEnabledTabIndex(tabs: TabComponent[], startIdx: number): number {\r\n\r\n    const safeStartIdx = this.clampTabIndex(startIdx);\r\n\r\n    for (let i = safeStartIdx; i < tabs.length; i++) {\r\n      const tab = tabs[i];\r\n      if (!tab.disabled) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  getPreviousEnabledTabIndex(tabs: TabComponent[], startIdx: number): number {\r\n\r\n    const safeStartIdx = this.clampTabIndex(startIdx);\r\n\r\n    for (let i = safeStartIdx; i >= 0; i--) {\r\n      const tab = tabs[i];\r\n      if (!tab.disabled) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Find the first enabled tab (button) in the list of provided tabs (buttons)\r\n   */\r\n  getFirstEnabledTabIndex(): number {\r\n    return this.getNextEnabledTabIndex(this.tabs.toArray(), 0);\r\n  }\r\n\r\n  /**\r\n   * Find the last enabled tab (button) in the list of provided tabs (buttons).\r\n   */\r\n  getLastEnabledTabIndex(): number {\r\n    return this.getPreviousEnabledTabIndex(this.tabs.toArray(), this.tabs.length - 1);\r\n  }\r\n\r\n  /**\r\n   * Ensure that index is within the appropriate range for the number of tabs that we have.\r\n   *\r\n   * The max function is accounting for the NaN value with the `|| 0` portion of the expression to\r\n   * an infinite loop since Math.max(NaN, 0) === NaN.\r\n   *\r\n   * (per Angular Material Tabs code: https://github.com/angular/components/blob/master/src/material/tabs/tab-group.ts)\r\n   *\r\n   * @param index\r\n   * @private\r\n   */\r\n  private clampTabIndex(index: number | null): number {\r\n    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\r\n  }\r\n\r\n  /**\r\n   * Find the next enabled tab (button) in the list of tabs (buttons) provided.\r\n   *\r\n   * The search will begin at the position in the list where the provided tab (button) is located and the search\r\n   * will wrap around to the beginning of the provided list of tabs (buttons) if no enabled tab (button) is found\r\n   * in the list after the location of the provided tab (button).\r\n   *\r\n   * @param refTab the tab to use as a starting point for finding the next enabled tab\r\n   */\r\n  getNextOrFirstEnabledTabIndex(startIdx: number): number {\r\n    const tabsArr = this.tabs.toArray();\r\n    const idx = this.getNextEnabledTabIndex(tabsArr, startIdx + 1);\r\n    if (idx === -1) {\r\n      return this.getNextEnabledTabIndex(tabsArr, 0);\r\n    } else {\r\n      return idx;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find the previous enabled tab (button) in the list of tabs (buttons) provided.\r\n   *\r\n   * The search will begin at the position in the list where the provided tab (button) is located and the search\r\n   * will wrap around to the end of the provided list of tabs (buttons) if no enabled tab (button) is found\r\n   * in the list before the location of the provided tab (button).\r\n   *\r\n   * @param tabs\r\n   * @param refButton\r\n   */\r\n  getPreviousOrLastEnabledTab(startIdx: number): number {\r\n    const tabsArr = this.tabs.toArray();\r\n    const idx = this.getPreviousEnabledTabIndex(tabsArr, startIdx - 1);\r\n    if (idx === -1) {\r\n      return this.getPreviousEnabledTabIndex(tabsArr, tabsArr.length - 1);\r\n    } else {\r\n      return idx;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "accessors": {
                "autoActivate": {
                    "name": "autoActivate",
                    "setSignature": {
                        "name": "autoActivate",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 75,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "UtilityItemComponent",
            "id": "component-UtilityItemComponent-2872cd6bce66c6c76c03f4ad26f1dafb",
            "file": "src/app/components/header/utility-menu/utility-menu-item.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-utility-item",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "url",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-jazz-utility-item',\r\n  template: `\r\n      <ng-content></ng-content>\r\n  `,\r\n})\r\nexport class UtilityItemComponent {\r\n  @Input() url: string;\r\n  @Input() label: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "UtilityMenuComponent",
            "id": "component-UtilityMenuComponent-f50e848a92c46445c2b565bf2855ab92",
            "file": "src/app/components/header/utility-menu/utility-menu.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-utility-menu",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "utilityMenuComponents",
                    "type": "QueryList<UtilityItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "UtilityItemComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ContentChildren, QueryList} from '@angular/core';\r\nimport {UtilityItemComponent} from './utility-menu-item';\r\n\r\n@Component({\r\n  selector: 'app-jazz-utility-menu',\r\n  template: `\r\n      <ng-content></ng-content>\r\n  `,\r\n})\r\nexport class UtilityMenuComponent {\r\n  @ContentChildren(UtilityItemComponent) utilityMenuComponents: QueryList<UtilityItemComponent>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "MainMenu1Component"
                        },
                        {
                            "name": "MainMenu2Component"
                        },
                        {
                            "name": "MainMenu3Component"
                        },
                        {
                            "name": "MainPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "MenuMainButtonComponent"
                        },
                        {
                            "name": "MenuSubButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "MenuMainButtonComponent"
                        },
                        {
                            "name": "MenuSubButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "MainMenuComponent"
                        },
                        {
                            "name": "MainMenuItemComponent"
                        },
                        {
                            "name": "ModalDialogComponent"
                        },
                        {
                            "name": "PagerComponent"
                        },
                        {
                            "name": "SearchButtonComponent"
                        },
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "UtilityItemComponent"
                        },
                        {
                            "name": "UtilityMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "MainMenuComponent"
                        },
                        {
                            "name": "MainMenuItemComponent"
                        },
                        {
                            "name": "ModalDialogComponent"
                        },
                        {
                            "name": "PagerComponent"
                        },
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "UtilityItemComponent"
                        },
                        {
                            "name": "UtilityMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACCORDION_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-accordion`"
            },
            {
                "name": "ARIA_CONTROLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/utility-functions.ts",
                "type": "string",
                "defaultValue": "'aria-controls'"
            },
            {
                "name": "ARIA_CONTROLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "string",
                "defaultValue": "'aria-controls'"
            },
            {
                "name": "ARIA_EXPANDED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/utility-functions.ts",
                "type": "string",
                "defaultValue": "'aria-expanded'"
            },
            {
                "name": "ARIA_EXPANDED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "string",
                "defaultValue": "'aria-expanded'"
            },
            {
                "name": "ARIA_EXPANDED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "string",
                "defaultValue": "'aria-expanded'"
            },
            {
                "name": "ARIA_EXPANDED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
                "type": "string",
                "defaultValue": "'aria-expanded'"
            },
            {
                "name": "compact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Object.assign({}, headerOptions)"
            },
            {
                "name": "Compact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DoubleTruncated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "HEADER_NAV_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menu__nav-container`"
            },
            {
                "name": "HEADER_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-header`"
            },
            {
                "name": "HEADER_SUB_MENU_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menu__submenu-toggle`"
            },
            {
                "name": "headerOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "new HeaderOptions()"
            },
            {
                "name": "headerOptionsOnlyUtility",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Object.assign({}, headerOptions)"
            },
            {
                "name": "HIDDEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/utility-functions.ts",
                "type": "string",
                "defaultValue": "'hidden'"
            },
            {
                "name": "HIDDEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "string",
                "defaultValue": "'hidden'"
            },
            {
                "name": "ICON_CLOSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-icon-close`"
            },
            {
                "name": "ICON_CLOSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-icon-close`"
            },
            {
                "name": "ICON_MENU",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-icon-menu`"
            },
            {
                "name": "ICON_SEARCH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-icon-search`"
            },
            {
                "name": "ICON_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-icon`"
            },
            {
                "name": "ICON_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-icon`"
            },
            {
                "name": "idGenerator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/tabs/tabs.component.ts",
                "type": "number",
                "defaultValue": "0",
                "description": "<p>Generate unique id for tab list </p>\n"
            },
            {
                "name": "INPUT_SELECTORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "string",
                "defaultValue": "'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])'"
            },
            {
                "name": "INPUT_SELECTORS_EXCL_CLOSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "string",
                "defaultValue": "'a[href]:not([disabled]), button:not([disabled]):not(.jazz-modal-button__close), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])'"
            },
            {
                "name": "justHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Object.assign({}, headerOptions)"
            },
            {
                "name": "JustHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "justSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Object.assign({}, headerOptions)"
            },
            {
                "name": "JustSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mainMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "MenuItem[]",
                "defaultValue": "[]"
            },
            {
                "name": "MENU_BUTTON_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menu__menu-toggle`"
            },
            {
                "name": "MENU_HIDE_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menubar--hide`"
            },
            {
                "name": "MENU_MAIN_MENU_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menu__main-menu-navbar`"
            },
            {
                "name": "MENU_NAV_EXPANDED_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menu__nav-container--expanded`"
            },
            {
                "name": "MENU_RECENTLY_OPENED_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menu:recentlyOpened`"
            },
            {
                "name": "MENU_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menubar`"
            },
            {
                "name": "MENU_STICKY_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menubar--stuck`"
            },
            {
                "name": "MENU_SUB_NAV_EXPANDED_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menu__subnav-container--expanded`"
            },
            {
                "name": "MENUBAR_SHOWN_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menubar--shown`"
            },
            {
                "name": "MENUBAR_SUB_SHOWN_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menubar_submenu--shown`"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest-config/__mocks__/globalMocks.ts",
                "type": "",
                "defaultValue": "() => {\r\n    let storage = {};\r\n    return {\r\n      getItem: key => (key in storage ? storage[key] : null),\r\n      setItem: (key, value) => (storage[key] = value || ''),\r\n      removeItem: key => delete storage[key],\r\n      clear: () => (storage = {}),\r\n    };\r\n  }"
            },
            {
                "name": "MULTISELECTABLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "string",
                "defaultValue": "'aria-multiselectable'"
            },
            {
                "name": "OnlyUtilityMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pageSet1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  totalPages: 10,\r\n  number: 1\r\n}"
            },
            {
                "name": "pageSet2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  totalPages: 20,\r\n  number: 7\r\n}"
            },
            {
                "name": "prefix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config.ts",
                "type": "string",
                "defaultValue": "'jazz'"
            },
            {
                "name": "SEARCH_PANEL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-header__search-bar-panel`"
            },
            {
                "name": "SEARCH_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-header__search-bar-toggle`"
            },
            {
                "name": "SEARCH_SHOWN_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-header__search-bar-panel--shown`"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Accordion.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/Accordion', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [AccordionComponent],\r\n    })\r\n  )"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Alert.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/Alert', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [AlertComponent],\r\n    })\r\n  )"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Breadcrumbs.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/Breadcrumbs', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [AccordionComponent],\r\n    })\r\n  )"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Footer.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/Footer', module)"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/HeaderHTML.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/HeaderHTML', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      imports: [RouterModule.forRoot(routes, {useHash: true})],\r\n      declarations: [HeaderComponent, MenuComponent, MenuItemComponent, MenuMainButtonComponent, MenuSubButtonComponent,\r\n        SearchButtonComponent,  MainMenuItemComponent, MainMenuComponent, UtilityMenuComponent, UtilityItemComponent]\r\n    })\r\n  )"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Tabs.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/Tabs', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [TabsComponent, TabComponent, Panel1Component, Panel2Component],\r\n      imports: [\r\n        RouterModule.forRoot([\r\n          { path: 'panel1', component: Panel1Component },\r\n          { path: 'panel2', component: Panel2Component },\r\n        ], {\r\n          useHash: true,\r\n        })\r\n      ],\r\n      providers: [\r\n        { provide: APP_BASE_HREF, useValue: '/'},\r\n      ]\r\n    })\r\n  )"
            },
            {
                "name": "subMenu1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "MenuItem[]",
                "defaultValue": "[]"
            },
            {
                "name": "subMenu2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "MenuItem[]",
                "defaultValue": "[]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n  component: ButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "Story<PagerComponent>",
                "defaultValue": "(args: PagerComponent) => ({\r\n  component: PagerComponent,\r\n  props: args\r\n})"
            },
            {
                "name": "utilityMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "MenuItem[]",
                "defaultValue": "[]"
            }
        ],
        "functions": [
            {
                "name": "select",
                "file": "src/app/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "selector"
                    },
                    {
                        "name": "context"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "selector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "selectClosestTo",
                "file": "src/app/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "targetSelector"
                    },
                    {
                        "name": "closestToSelector"
                    },
                    {
                        "name": "context"
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "targetSelector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "closestToSelector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "simulateKeyupEvent",
                "file": "src/jest-config/setup.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "element"
                    },
                    {
                        "name": "value"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "element",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/accordion/accordion.component.ts": [
                {
                    "name": "ACCORDION_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-accordion`"
                },
                {
                    "name": "ARIA_CONTROLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "string",
                    "defaultValue": "'aria-controls'"
                },
                {
                    "name": "ARIA_EXPANDED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "string",
                    "defaultValue": "'aria-expanded'"
                },
                {
                    "name": "HIDDEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "string",
                    "defaultValue": "'hidden'"
                },
                {
                    "name": "MULTISELECTABLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "string",
                    "defaultValue": "'aria-multiselectable'"
                }
            ],
            "src/app/components/utility-functions.ts": [
                {
                    "name": "ARIA_CONTROLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/utility-functions.ts",
                    "type": "string",
                    "defaultValue": "'aria-controls'"
                },
                {
                    "name": "ARIA_EXPANDED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/utility-functions.ts",
                    "type": "string",
                    "defaultValue": "'aria-expanded'"
                },
                {
                    "name": "HIDDEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/utility-functions.ts",
                    "type": "string",
                    "defaultValue": "'hidden'"
                }
            ],
            "src/app/components/menu/menu-constants.ts": [
                {
                    "name": "ARIA_EXPANDED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "string",
                    "defaultValue": "'aria-expanded'"
                },
                {
                    "name": "HEADER_NAV_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menu__nav-container`"
                },
                {
                    "name": "HEADER_SUB_MENU_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menu__submenu-toggle`"
                },
                {
                    "name": "ICON_CLOSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-icon-close`"
                },
                {
                    "name": "ICON_MENU",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-icon-menu`"
                },
                {
                    "name": "ICON_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-icon`"
                },
                {
                    "name": "MENU_BUTTON_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menu__menu-toggle`"
                },
                {
                    "name": "MENU_HIDE_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menubar--hide`"
                },
                {
                    "name": "MENU_MAIN_MENU_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menu__main-menu-navbar`"
                },
                {
                    "name": "MENU_NAV_EXPANDED_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menu__nav-container--expanded`"
                },
                {
                    "name": "MENU_RECENTLY_OPENED_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menu:recentlyOpened`"
                },
                {
                    "name": "MENU_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menubar`"
                },
                {
                    "name": "MENU_STICKY_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menubar--stuck`"
                },
                {
                    "name": "MENU_SUB_NAV_EXPANDED_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menu__subnav-container--expanded`"
                },
                {
                    "name": "MENUBAR_SHOWN_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menubar--shown`"
                },
                {
                    "name": "MENUBAR_SUB_SHOWN_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menubar_submenu--shown`"
                }
            ],
            "src/app/components/menu/menu-main-button/menu-main-button.component.ts": [
                {
                    "name": "ARIA_EXPANDED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
                    "type": "string",
                    "defaultValue": "'aria-expanded'"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "compact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Object.assign({}, headerOptions)"
                },
                {
                    "name": "Compact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "headerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "new HeaderOptions()"
                },
                {
                    "name": "headerOptionsOnlyUtility",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Object.assign({}, headerOptions)"
                },
                {
                    "name": "justHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Object.assign({}, headerOptions)"
                },
                {
                    "name": "JustHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "justSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Object.assign({}, headerOptions)"
                },
                {
                    "name": "JustSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mainMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "MenuItem[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "OnlyUtilityMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "subMenu1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "MenuItem[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "subMenu2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "MenuItem[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "utilityMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "MenuItem[]",
                    "defaultValue": "[]"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n  component: ButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Pager.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DoubleTruncated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "pageSet1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  totalPages: 10,\r\n  number: 1\r\n}"
                },
                {
                    "name": "pageSet2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  totalPages: 20,\r\n  number: 7\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "Story<PagerComponent>",
                    "defaultValue": "(args: PagerComponent) => ({\r\n  component: PagerComponent,\r\n  props: args\r\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/app/components/header/header-constants.ts": [
                {
                    "name": "HEADER_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-header`"
                },
                {
                    "name": "ICON_CLOSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-icon-close`"
                },
                {
                    "name": "ICON_SEARCH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-icon-search`"
                },
                {
                    "name": "ICON_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-icon`"
                },
                {
                    "name": "SEARCH_PANEL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-header__search-bar-panel`"
                },
                {
                    "name": "SEARCH_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-header__search-bar-toggle`"
                },
                {
                    "name": "SEARCH_SHOWN_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-header__search-bar-panel--shown`"
                }
            ],
            "src/app/components/tabs/tabs.component.ts": [
                {
                    "name": "idGenerator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/tabs/tabs.component.ts",
                    "type": "number",
                    "defaultValue": "0",
                    "description": "<p>Generate unique id for tab list </p>\n"
                }
            ],
            "src/app/components/modal-dialog/modal-dialog.component.ts": [
                {
                    "name": "INPUT_SELECTORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
                    "type": "string",
                    "defaultValue": "'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])'"
                },
                {
                    "name": "INPUT_SELECTORS_EXCL_CLOSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
                    "type": "string",
                    "defaultValue": "'a[href]:not([disabled]), button:not([disabled]):not(.jazz-modal-button__close), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])'"
                }
            ],
            "src/jest-config/__mocks__/globalMocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest-config/__mocks__/globalMocks.ts",
                    "type": "",
                    "defaultValue": "() => {\r\n    let storage = {};\r\n    return {\r\n      getItem: key => (key in storage ? storage[key] : null),\r\n      setItem: (key, value) => (storage[key] = value || ''),\r\n      removeItem: key => delete storage[key],\r\n      clear: () => (storage = {}),\r\n    };\r\n  }"
                }
            ],
            "src/app/config.ts": [
                {
                    "name": "prefix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config.ts",
                    "type": "string",
                    "defaultValue": "'jazz'"
                }
            ],
            "src/stories/Accordion.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Accordion.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/Accordion', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [AccordionComponent],\r\n    })\r\n  )"
                }
            ],
            "src/stories/Alert.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Alert.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/Alert', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [AlertComponent],\r\n    })\r\n  )"
                }
            ],
            "src/stories/Breadcrumbs.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Breadcrumbs.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/Breadcrumbs', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [AccordionComponent],\r\n    })\r\n  )"
                }
            ],
            "src/stories/Footer.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Footer.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/Footer', module)"
                }
            ],
            "src/stories/HeaderHTML.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/HeaderHTML.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/HeaderHTML', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      imports: [RouterModule.forRoot(routes, {useHash: true})],\r\n      declarations: [HeaderComponent, MenuComponent, MenuItemComponent, MenuMainButtonComponent, MenuSubButtonComponent,\r\n        SearchButtonComponent,  MainMenuItemComponent, MainMenuComponent, UtilityMenuComponent, UtilityItemComponent]\r\n    })\r\n  )"
                }
            ],
            "src/stories/Tabs.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Tabs.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/Tabs', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      declarations: [TabsComponent, TabComponent, Panel1Component, Panel2Component],\r\n      imports: [\r\n        RouterModule.forRoot([\r\n          { path: 'panel1', component: Panel1Component },\r\n          { path: 'panel2', component: Panel2Component },\r\n        ], {\r\n          useHash: true,\r\n        })\r\n      ],\r\n      providers: [\r\n        { provide: APP_BASE_HREF, useValue: '/'},\r\n      ]\r\n    })\r\n  )"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/utils.ts": [
                {
                    "name": "select",
                    "file": "src/app/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "selector"
                        },
                        {
                            "name": "context"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectClosestTo",
                    "file": "src/app/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "targetSelector"
                        },
                        {
                            "name": "closestToSelector"
                        },
                        {
                            "name": "context"
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "targetSelector",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "closestToSelector",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/jest-config/setup.ts": [
                {
                    "name": "simulateKeyupEvent",
                    "file": "src/jest-config/setup.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "element"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app.routing.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "MainPageComponent"
                    },
                    {
                        "path": "mainMenu1",
                        "component": "MainMenu1Component"
                    },
                    {
                        "path": "mainMenu2",
                        "component": "MainMenu2Component"
                    },
                    {
                        "path": "mainMenu3",
                        "component": "MainMenu3Component"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCORDION_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_CONTROLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_EXPANDED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HIDDEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MULTISELECTABLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 75,
                "coverageCount": "6/8",
                "status": "good"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HEADER_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_CLOSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_SEARCH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEARCH_PANEL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEARCH_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEARCH_SHOWN_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/main-menu/main-menu-item.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/main-menu/main-menu.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/search-button/search-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/utility-menu/utility-menu-item.ts",
                "type": "component",
                "linktype": "component",
                "name": "UtilityItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/utility-menu/utility-menu.ts",
                "type": "component",
                "linktype": "component",
                "name": "UtilityMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_EXPANDED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HEADER_NAV_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HEADER_SUB_MENU_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_CLOSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_MENU",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_BUTTON_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_HIDE_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_MAIN_MENU_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_NAV_EXPANDED_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_RECENTLY_OPENED_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_STICKY_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_SUB_NAV_EXPANDED_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENUBAR_SHOWN_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENUBAR_SUB_SHOWN_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-item/menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuMainButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_EXPANDED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-sub-button/menu-sub-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuSubButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INPUT_SELECTORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INPUT_SELECTORS_EXCL_CLOSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pager/pager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 22,
                "coverageCount": "6/27",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tabs/tabs.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "idGenerator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/components/utility-functions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UtilityFunctions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/utility-functions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_CONTROLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/utility-functions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_EXPANDED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/utility-functions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HIDDEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prefix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main-menu/main-menu1/main-menu1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenu1Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/main-menu/main-menu2/main-menu2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenu2Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/main-menu/main-menu3/main-menu3.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenu3Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/main-page/main-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/model/data-page.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DataPage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/model/header-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HeaderOptions",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/model/menu-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "select",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "selectClosestTo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest-config/__mocks__/globalMocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest-config/setup.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "simulateKeyupEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Footer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "compact",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Compact",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "headerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "headerOptionsOnlyUtility",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "justHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JustHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "justSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JustSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OnlyUtilityMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subMenu1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subMenu2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utilityMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/HeaderHTML.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DoubleTruncated",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pageSet1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pageSet2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Tabs.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "Panel1Component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Tabs.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "Panel2Component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}