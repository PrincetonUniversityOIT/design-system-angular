{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [
        {
            "name": "DataPage",
            "id": "class-DataPage-70bc2b7f062db07a8ebc6e8d403df2d1",
            "file": "src/app/model/data-page.ts",
            "type": "class",
            "sourceCode": "export class DataPage<T> {\r\n  totalPages: number;\r\n  totalElements: number;\r\n  numberOfElements: number;\r\n  size: number;\r\n  number: number;\r\n  sort: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "number",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "numberOfElements",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "size",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sort",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalElements",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "totalPages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HeaderOptions",
            "id": "class-HeaderOptions-75685ec00c92f0dc3915624a6fc5d64d",
            "file": "src/app/model/header-options.ts",
            "type": "class",
            "sourceCode": "import {MenuItem} from './menu-item';\r\n\r\nexport class HeaderOptions {\r\n  public title: string\r\n  public siteBrandingName: string;\r\n  public siteBrandingSlogan: string;\r\n  public showSearch?: boolean;\r\n  public showCompact?: boolean;\r\n  public menuItems?: MenuItem[];\r\n  public utilityItems?: MenuItem[];\r\n\r\n  constructor() {\r\n\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "properties": [
                {
                    "name": "menuItems",
                    "type": "MenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showCompact",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showSearch",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "siteBrandingName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "siteBrandingSlogan",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "utilityItems",
                    "type": "MenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MenuItem",
            "id": "class-MenuItem-6b7a12a8dfae0a2b00646e56cc0500d0",
            "file": "src/app/model/menu-item.ts",
            "type": "class",
            "sourceCode": "export class MenuItem {\r\n  public readonly label: string\r\n  public readonly url: string;\r\n  public readonly shownByDefault?: boolean;\r\n\r\n  public subItems?: MenuItem[] = [];\r\n\r\n  constructor(label: string, url: string, subItems?: MenuItem[], shownByDefault?: boolean ) {\r\n    this.label = label;\r\n    this.url = url;\r\n    this.subItems = subItems;\r\n    this.shownByDefault = shownByDefault;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "label",
                        "type": "string"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "subItems",
                        "type": "MenuItem[]",
                        "optional": true
                    },
                    {
                        "name": "shownByDefault",
                        "type": "boolean",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "label",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subItems",
                        "type": "MenuItem[]",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shownByDefault",
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "shownByDefault",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "subItems",
                    "defaultValue": "[]",
                    "type": "MenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UtilityFunctions",
            "id": "class-UtilityFunctions-9e49fbc223a19461cf2a38bfec9a28b2",
            "file": "src/app/components/utility-functions.ts",
            "type": "class",
            "sourceCode": "export class UtilityFunctions {\r\n\r\n  static select(selector: string, context: ParentNode): [] {\r\n\r\n    if (typeof selector !== 'string') {\r\n      return [];\r\n    }\r\n\r\n    if (!context || !this.isElement(context)) {\r\n      context = window.document; // eslint-disable-line no-param-reassign\r\n    }\r\n\r\n    const selection = context.querySelectorAll(selector);\r\n    return Array.prototype.slice.call(selection);\r\n  }\r\n\r\n  static isElement(value): any {\r\n    return value && typeof value === 'object' && value.nodeType === 1;\r\n  }\r\n\r\n  static selectClosestTo(targetSelector: string, closestToSelector: string, context: Element): any {\r\n    const elements: Element[] = UtilityFunctions.select(targetSelector, context);\r\n    return elements.filter((element) => element.closest(closestToSelector) === context);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "isElement",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "selector",
                            "type": "string"
                        },
                        {
                            "name": "context",
                            "type": "ParentNode"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "ParentNode",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectClosestTo",
                    "args": [
                        {
                            "name": "targetSelector",
                            "type": "string"
                        },
                        {
                            "name": "closestToSelector",
                            "type": "string"
                        },
                        {
                            "name": "context",
                            "type": "Element"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetSelector",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "closestToSelector",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "Element",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-f3ba9acf141e961bcfad99f2e78e8680",
            "file": "src/app/components/accordion/accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-accordion",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordionButtons",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "'jazzAccordionButtons', {descendants: true, read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "toggleControl",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  OnInit,\n  QueryList\n} from '@angular/core';\nimport {prefix as PREFIX} from '../../config';\n\nconst ACCORDION_SELECTOR = `.${PREFIX}-accordion`;\nconst MULTISELECTABLE = 'aria-multiselectable';\n\nexport const ARIA_EXPANDED = 'aria-expanded';\nexport const ARIA_CONTROLS = 'aria-controls';\nexport const HIDDEN = 'hidden';\n\n@Component({\n  selector: 'app-jazz-accordion',\n  templateUrl: './accordion.component.html'\n})\nexport class AccordionComponent implements OnInit, AfterContentInit {\n  @ContentChildren('jazzAccordionButtons', {descendants: true, read: ElementRef}) accordionButtons: QueryList<ElementRef>;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterContentInit(): void{\n    this.accordionButtons.forEach((btn) => {\n      btn.nativeElement.addEventListener('click', this.click);\n    });\n  }\n\n  click = (event: Event): void => {\n    const button = event.target as HTMLElement;\n    const accordionEl = button.closest(ACCORDION_SELECTOR);\n    const multiselectable = accordionEl.getAttribute(MULTISELECTABLE) === 'true';\n\n    const expanded = this.toggleControl(button, null);\n\n    if (expanded && !multiselectable) {\n      this.accordionButtons.forEach((other) => {\n        if (other.nativeElement !== button) {\n          this.toggleControl(other.nativeElement, false);\n        }\n      });\n    }\n    event.stopImmediatePropagation();\n  }\n\n  toggleControl = (target: Element, expanded?: boolean): any => {\n\n    let safeExpanded = expanded;\n\n    if (typeof safeExpanded !== 'boolean') {\n      // invert the existing button value\n      safeExpanded = target.getAttribute(ARIA_EXPANDED) === 'false';\n    }\n\n    target.setAttribute(ARIA_EXPANDED, safeExpanded.toString());\n\n    const controlledElementId = target.getAttribute(ARIA_CONTROLS);\n    const controlledElement = document.getElementById(controlledElementId);\n    if (!controlledElement) {\n      throw new Error(`aria-controls is not properly configured: ${controlledElementId}`);\n    }\n\n    if (safeExpanded) {\n      controlledElement.removeAttribute(HIDDEN);\n    } else {\n      controlledElement.setAttribute(HIDDEN, '');\n    }\n\n    return safeExpanded;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "templateData": "<div class=\"jazz-accordion\" role=\"region\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-b1d9198e0d2df943426f2ab1acfb8d7b",
            "file": "src/app/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "heading",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-jazz-alert',\n  templateUrl: './alert.component.html'\n})\nexport class AlertComponent {\n\n  constructor() { }\n\n  @Input()\n  heading: string;\n\n  @Input()\n  title: string;\n\n  @Input()\n  content: string;\n\n  @Output()\n  onClose: EventEmitter<boolean> = new EventEmitter();\n\n  close(): void {\n    this.onClose.emit(true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "templateData": "<section class=\"jazz-alert-section\">\n  <h2 class=\"jazz-alert-section__heading jazz-visually-hidden\">{{ heading }}</h2>\n  <div class=\"jazz-alert-section__content\">\n    <div class=\"jazz-row\">\n      <h3 class=\"jazz-alert-section__title\">{{ title }}</h3>\n      <ng-content></ng-content>\n    </div>\n  </div>\n  <a title=\"Hide alert with title {{ title }} until it is updated\" class=\"jazz-alert-section__close\" role=\"button\" (click)=\"close()\">X</a>\n</section>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-703aa876a1eec8f2bcddfad40ddebf4b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "headerOptions",
                    "type": "HeaderOptions",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "defaultValue": "'Princeton Design System'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\r\nimport {MenuItem} from './model/menu-item';\r\nimport {HeaderOptions} from './model/header-options';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Princeton Design System';\r\n  headerOptions: HeaderOptions;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    const mainMenu: MenuItem[] = [\r\n     {\r\n       label: 'Main Menu 1',\r\n       url: '/mainMenu1',\r\n       subItems:\r\n        [\r\n          {\r\n          label: 'Sub Menu 1',\r\n          url: '/level2item1',\r\n          shownByDefault: true,\r\n          subItems:\r\n            [\r\n              {label: 'Level 3 Menu 1', url: '/level3item1'},\r\n              {label: 'Level 3 Menu 2', url: '/level3item2'},\r\n              {label: 'Level 3 Menu 3', url: '/level3item3'}\r\n            ],\r\n          },\r\n          {\r\n            label: 'Sub Menu 2',\r\n            url: '/level2item2',\r\n            subItems: [\r\n              {label: 'Level 3a Menu 1', url: '/level3aitem1'},\r\n              {label: 'Level 3a Menu 2', url: '/level3aitem2'},\r\n              {label: 'Level 3a Menu 3', url: '/level3aitem3'}\r\n            ]\r\n          },\r\n          {\r\n            label: 'Sub Menu 3',\r\n            url: '/level2item2'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n       label: 'Main Menu 2',\r\n       url: '/mainMenu2',\r\n       subItems:\r\n         [\r\n           {label: 'Level 3 Menu 1', url: '/level3item1'},\r\n           {label: 'Level 3 Menu 2', url: '/level3item2'},\r\n           {label: 'Level 3 Menu 3', url: '/level3item3'}\r\n         ],\r\n         },\r\n     {label: 'Main Menu 3', url: '/mainMenu3'}\r\n   ];\r\n\r\n    const utilityMenu: MenuItem[] = [];\r\n    utilityMenu.push(new MenuItem('Documentation', '/documentation'));\r\n    utilityMenu.push(new MenuItem('Log In', '/login'));\r\n\r\n    this.headerOptions = new HeaderOptions();\r\n    this.headerOptions.title = this.title;\r\n    this.headerOptions.siteBrandingName = 'RELATIVITY';\r\n    this.headerOptions.siteBrandingSlogan = 'The Princeton University Design System';\r\n    this.headerOptions.showCompact = false;\r\n    this.headerOptions.showSearch = true;\r\n    // this.headerOptions.menuItems = mainMenu;\r\n    // this.headerOptions.utilityItems = utilityMenu;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--<app-jazz-header [headerOptions]=\"headerOptions\">-->\r\n<app-jazz-header [title]=\"'Princeton University Design System'\" [siteBrandingName]=\"'RELATIVITY'\" [siteBrandingSlogan]=\"'The Princeton University Design System'\" [showCompact]=false [showSearch]=true>\r\n    <app-jazz-main-menu>\r\n      <app-jazz-main-menu-item label=\"Main Menu 1\" url=\"/mainMenu1\">\r\n          <app-jazz-main-menu-item label=\"Level 2 Menu 1\" url=\"/level2item1\" shownByDefault=\"true\">\r\n            <app-jazz-main-menu-item label=\"Level 3 Menu 1\" url=\"/level3item1\"></app-jazz-main-menu-item>\r\n            <app-jazz-main-menu-item label=\"Level 3 Menu 2\" url=\"/level3item1\"></app-jazz-main-menu-item>\r\n            <app-jazz-main-menu-item label=\"Level 3 Menu 3\" url=\"/level3item1\"></app-jazz-main-menu-item>\r\n          </app-jazz-main-menu-item>\r\n          <app-jazz-main-menu-item label=\"Level 2 Menu 2\" url=\"/level2item1\"></app-jazz-main-menu-item>\r\n          <app-jazz-main-menu-item label=\"Level 2 Menu 3\" url=\"/level2item1\"></app-jazz-main-menu-item>\r\n      </app-jazz-main-menu-item>\r\n      <app-jazz-main-menu-item label=\"Main Menu 2\" url=\"/mainMenu2\"></app-jazz-main-menu-item>\r\n      <app-jazz-main-menu-item label=\"Main Menu 3\" url=\"/mainMenu3\"></app-jazz-main-menu-item>\r\n    </app-jazz-main-menu>\r\n\r\n    <app-jazz-utility-menu>\r\n      <app-jazz-utility-item label=\"Documentation\" url=\"/documentation\"></app-jazz-utility-item>\r\n      <app-jazz-utility-item label=\"Log In\" url=\"/login\"></app-jazz-utility-item>\r\n    </app-jazz-utility-menu>\r\n</app-jazz-header>\r\n\r\n<main>\r\n  <div class=\"jazz-container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</main>\r\n\r\n<footer role=\"contentinfo\" class=\"jazz-footer\">\r\n  <div class=\"jazz-container jazz-footer__content\">\r\n    <div class=\"row\">\r\n      <div class=\"col-sm-3 col-xs-12\">\r\n        <h2>General Information</h2>\r\n        <ul class=\"jazz-footer__list\">\r\n          <li><a href=\"javascript:void(0);\">Contact Us</a></li>\r\n          <li><a href=\"javascript:void(0);\">About Us</a></li>\r\n          <li><a href=\"javascript:void(0);\">News</a></li>\r\n          <li><a href=\"javascript:void(0);\">Data Privacy Policy</a></li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"col-sm-3 col-xs-12\">\r\n        <h2>Services</h2>\r\n        <ul class=\"jazz-footer__list\">\r\n          <li><a href=\"javascript:void(0);\">Update Your Info</a></li>\r\n          <li><a href=\"javascript:void(0);\">Online Resources</a></li>\r\n          <li><a href=\"javascript:void(0);\">Visiting Campus</a></li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"col-sm-3 col-xs-12\">\r\n        <h2>University Links</h2>\r\n        <ul class=\"jazz-footer__list\">\r\n          <li><a href=\"javascript:void(0);\">Princeton University</a></li>\r\n          <li><a href=\"javascript:void(0);\">Princeton Athletics</a></li>\r\n          <li><a href=\"javascript:void(0);\">Princeton Career Development</a></li>\r\n          <li><a href=\"javascript:void(0);\">Princeton Prize</a></li>\r\n          <li><a href=\"javascript:void(0);\">Princetoniana</a></li>\r\n          <li><a href=\"javascript:void(0);\">Giving to Princeton</a></li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"col-sm-3 col-xs-12\">\r\n        <h2>Social Media</h2>\r\n        <ul class=\"jazz-footer__icon-list\">\r\n          <li><a href=\"javascript:void(0);\"><i class=\"jazz-icon jazz-icon-2x jazz-footer__icon jazz-icon-facebook\"></i><span class=\"jazz-visually-hidden\">Follow Us on Facebook</span></a></li>\r\n          <li><a href=\"javascript:void(0);\"><i class=\"jazz-icon jazz-icon-2x jazz-footer__icon jazz-icon-twitter\"></i><span class=\"jazz-visually-hidden\">Follow Us on Twitter</span></a></li>\r\n          <li><a href=\"javascript:void(0);\"><i class=\"jazz-icon jazz-icon-2x jazz-footer__icon jazz-icon-linkedin\"></i><span class=\"jazz-visually-hidden\">Follow Us on Linked In</span></a></li>\r\n          <li><a href=\"javascript:void(0);\"><i class=\"jazz-icon jazz-icon-2x jazz-footer__icon jazz-icon-instagram\"></i><span class=\"jazz-visually-hidden\">Follow Us on Instagram</span></a></li>\r\n          <li><a href=\"javascript:void(0);\"><i class=\"jazz-icon jazz-icon-2x jazz-footer__icon jazz-icon-youtube\"></i><span class=\"jazz-visually-hidden\">Follow Us on You Tube</span></a></li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"jazz-footer__subfooter\">\r\n    <div class=\"jazz-container\">\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-4 col-xs-12\">\r\n          <a href=\"javascript:void(0)\">Accessibility</a>\r\n        </div>\r\n        <div class=\"col-sm-4 col-xs-12\">\r\n          &copy; 2020 The Trustees of Princeton University\r\n        </div>\r\n        <div class=\"col-sm-4 col-xs-12\">\r\n          <a href=\"https://www.princeton.edu\" target=\"_blank\" class=\"jazz-no-icon\"><img class=\"jazz-footer__logo\" src=\"./assets/icons/pu-logo-stacked-white.svg\" alt=\"Princeton University\" /></a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</footer>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-7c358a882b1e2b1c4742530ff1bee36e",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "description": "<p>Is this button disabled?</p>\n",
                    "line": 38
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 32
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 12
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 24,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, Output, EventEmitter} from '@angular/core';\n\n@Component({\n  selector: 'app-jazz-button',\n  templateUrl: './button.component.html'\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Is this button disabled?\n   */\n  @Input()\n  disabled = false;\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  click = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    // const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n    //\n    // return ['storybook-button', `storybook-button--${this.size}`, mode];\n    return ['jazz-btn'];\n  }\n\n  public getDisabled(): string {\n    return this.disabled ? 'disabled' : '';\n  }\n\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 46
                    }
                }
            },
            "templateData": "<button\n  type=\"button\"\n  (click)=\"click.emit($event)\"\n  [ngClass]=\"classes\"\n  [disabled]=\"disabled\"\n>\n  {{ label }}\n</button>\n"
        },
        {
            "name": "DocumentationComponent",
            "id": "component-DocumentationComponent-97cce191ed8cf892b31713c7ffe5d1d2",
            "file": "src/app/main-menu/documentation/documentation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-documentation",
            "styleUrls": [
                "./documentation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./documentation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-documentation',\n  templateUrl: './documentation.component.html',\n  styleUrls: ['./documentation.component.css']\n})\nexport class DocumentationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./documentation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"jazz-page-title\">Documentation</h1>\n<h2>Documentation</h2>\n<p>\n  This is the section for documentation\n</p>\n\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-be41606a46746b1a5ade88101cf0358c",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "headerOptions",
                    "line": 28,
                    "type": "HeaderOptions"
                },
                {
                    "name": "showCompact",
                    "defaultValue": "false",
                    "line": 43,
                    "type": "boolean"
                },
                {
                    "name": "showSearch",
                    "defaultValue": "true",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "siteBrandingName",
                    "line": 34,
                    "type": "string"
                },
                {
                    "name": "siteBrandingSlogan",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 31,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mainMenu",
                    "type": "MainMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "MainMenuComponent"
                        }
                    ]
                },
                {
                    "name": "utilityMenu",
                    "type": "UtilityMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "UtilityMenuComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "displayWindowSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "retrieveMainMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "retrieveMenuItems",
                    "args": [
                        {
                            "name": "menuComponent",
                            "type": "MainMenuItemComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "MenuItem",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "menuComponent",
                            "type": "MainMenuItemComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveUtilityMenus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 52
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  HostListener,\r\n  Input,\r\n  AfterViewInit, ChangeDetectorRef, AfterViewChecked, ContentChild, OnInit\r\n} from '@angular/core';\r\nimport {HeaderOptions} from '../../model/header-options';\r\nimport {ARIA_EXPANDED} from '../menu/menu-constants';\r\nimport {\r\n  ICON_CLOSE,\r\n  ICON_SEARCH,\r\n  ICON_SELECTOR,\r\n  SEARCH_PANEL,\r\n  SEARCH_SELECTOR,\r\n  SEARCH_SHOWN_STYLE\r\n} from './header-constants';\r\nimport {MenuItem} from '../../model/menu-item';\r\nimport {MainMenuComponent} from './main-menu/main-menu';\r\nimport {MainMenuItemComponent} from './main-menu/main-menu-item';\r\nimport {UtilityMenuComponent} from './utility-menu/utility-menu';\r\n\r\n@Component({\r\n  selector: 'app-jazz-header',\r\n  templateUrl: './header.component.html'\r\n})\r\nexport class HeaderComponent implements OnInit, AfterViewInit, AfterViewChecked {\r\n  @Input()\r\n  headerOptions?: HeaderOptions;\r\n\r\n  @Input()\r\n  title?: string;\r\n\r\n  @Input()\r\n  siteBrandingName?: string;\r\n\r\n  @Input()\r\n  siteBrandingSlogan?: string;\r\n\r\n  @Input()\r\n  showSearch?: boolean = true;\r\n\r\n  @Input()\r\n  showCompact?: boolean = false;\r\n\r\n  @ContentChild(MainMenuComponent)\r\n  mainMenu: MainMenuComponent;\r\n\r\n  @ContentChild(UtilityMenuComponent)\r\n  utilityMenu: UtilityMenuComponent;\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event): void {\r\n    this.displayWindowSize();\r\n  }\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.checkInputs();\r\n  }\r\n\r\n  checkInputs(): void {\r\n    if (this.headerOptions &&  (this.siteBrandingName || this.siteBrandingSlogan || this.title || this.showSearch || this.showCompact)) {\r\n       console.warn('Please specify either the headerOptions or the individual properties for the header');\r\n    }\r\n\r\n    if (!this.headerOptions) {\r\n       this.headerOptions = Object.assign({}, {\r\n            title: this.title,\r\n            siteBrandingName: this.siteBrandingName,\r\n            siteBrandingSlogan: this.siteBrandingSlogan,\r\n            showSearch: this.showSearch,\r\n            showCompact: this.showCompact\r\n       });\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.retrieveMainMenu();\r\n    this.retrieveUtilityMenus();\r\n  }\r\n\r\n  retrieveUtilityMenus(): void {\r\n    if (!this.headerOptions.utilityItems && this.utilityMenu && this.utilityMenu.utilityMenuComponents.length > 0) {\r\n      const utilityMenu: MenuItem[] = [];\r\n      this.utilityMenu.utilityMenuComponents.forEach((item) => {\r\n         utilityMenu.push(Object.assign({}, {label: item.label, url: item.url}));\r\n      });\r\n      this.headerOptions.utilityItems = utilityMenu;\r\n    }\r\n  }\r\n\r\n  retrieveMainMenu(): void {\r\n    if (!this.headerOptions.menuItems && this.mainMenu && this.mainMenu.menuComponents.length > 0) {\r\n      const mainMenu: MenuItem[] = [];\r\n      this.mainMenu.menuComponents.forEach((item) => {\r\n        mainMenu.push(this.retrieveMenuItems(item));\r\n      });\r\n      this.headerOptions.menuItems = mainMenu;\r\n    }\r\n  }\r\n\r\n  retrieveMenuItems(menuComponent: MainMenuItemComponent): MenuItem {\r\n    const menuItem: MenuItem = Object.assign(new MenuItem(menuComponent.label, menuComponent.url), {\r\n      shownByDefault: menuComponent.shownByDefault ? menuComponent.shownByDefault : false,\r\n      subItems: []\r\n    });\r\n    if (menuComponent.menuComponents.length > 0) {\r\n      const removeSelf = menuComponent.menuComponents.filter(x => x !== menuComponent);\r\n      removeSelf.forEach((comp) => {\r\n        menuItem.subItems.push(this.retrieveMenuItems(comp));\r\n      });\r\n    }\r\n    return menuItem;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  displayWindowSize(): void {\r\n    // Search Reset\r\n    document.querySelectorAll(SEARCH_PANEL).forEach((searchbar) => {\r\n      searchbar.classList.remove(SEARCH_SHOWN_STYLE);\r\n    });\r\n\r\n    document.querySelectorAll(SEARCH_SELECTOR).forEach((button) => {\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n      const searchToggleIcon = button.querySelector(ICON_SELECTOR);\r\n      searchToggleIcon.classList.remove(ICON_CLOSE);\r\n      searchToggleIcon.classList.add(ICON_SEARCH);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "AfterViewChecked"
            ],
            "templateData": "<header role=\"banner\" class=\"jazz-header\" *ngIf=\"!headerOptions.showCompact\">\r\n  <h1 class=\"jazz-visually-hidden\">{{headerOptions.title}}</h1>\r\n  <div class=\"jazz-skip-links\">\r\n    <a href=\"#main-content\" class=\"jazz-skip-link\">Skip to main content</a>\r\n    <a href=\"#search\" class=\"jazz-skip-link\">Skip to search options</a>\r\n  </div>\r\n  <div class=\"jazz-container\">\r\n  <div class=\"jazz-header-container\">\r\n    <div class=\"jazz-header__pu-branding\">\r\n        <a href=\"https://www.princeton.edu\" title=\"{{ headerOptions.title }}\"><img src=\"./assets/logos/pu-logo-ww-os.png\" alt=\"{{ headerOptions.title}}\" /></a>\r\n    </div>\r\n    <div class=\"jazz-header-right-container\">\r\n      <div class=\"jazz-header__utility-menu jazz-header__utility-menu--hide-small\">\r\n        <ul *ngIf=\"headerOptions && headerOptions.utilityItems && headerOptions.utilityItems.length > 0\">\r\n          <li *ngFor=\"let utilityItem of headerOptions.utilityItems\">\r\n            <a [routerLink]=\"utilityItem.url\" routerLinkActive=\"active\" #menuLink=\"routerLinkActive\"\r\n               [attr.aria-current]=\"menuLink.isActive ? 'page' : undefined\">{{utilityItem.label}}</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"jazz-header__search-bar\" *ngIf=\"headerOptions.showSearch\">\r\n          <h2 class=\"jazz-visually-hidden\">Search</h2>\r\n          <app-jazz-search-button></app-jazz-search-button>\r\n          <div class=\"jazz-header__search-bar-panel\">\r\n            <form action=\"javascript:void(0)\" method=\"get\" accept-charset=\"UTF-8\" role=\"search\">\r\n              <label class=\"jazz-visually-hidden\" for=\"search-field\">Search</label>\r\n              <a id=\"search\">\r\n                <input type=\"search\" id=\"search-field\" placeholder=\"Search\" autocomplete=\"off\" />\r\n              </a>\r\n              <button class=\"jazz-button\" type=\"submit\">\r\n                <span class=\"jazz-visually-hidden\">Search</span>\r\n              </button>\r\n            </form>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"jazz-header-break\"></div>\r\n  <div class=\"jazz-header__site-branding\">\r\n    <div class=\"jazz-header__site-branding-contents\">\r\n      <a href=\"./\" title=\"Home\" rel=\"home\" tabindex=\"-1\" aria-hidden=\"true\" class=\"jazz-header__site-branding-home-link\"><img src=\"./assets/logos/shield.svg\" alt=\"{{ headerOptions.siteBrandingName }}\"/></a>\r\n      <div class=\"jazz-header__site-branding-info\">\r\n        <div class=\"jazz-header__site-branding-name\">\r\n          <a href=\"./\" title=\"Home\" rel=\"home\">{{ headerOptions.siteBrandingName }}</a>\r\n        </div>\r\n        <div class=\"jazz-header__site-branding-slogan\">\r\n          {{ headerOptions.siteBrandingSlogan }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"jazz-header-collapsed-header\">\r\n    <div class=\"jazz-container\">\r\n      <div class=\"jazz-header-collapsed-container\">\r\n        <div class=\"jazz-header-collapsed__pu-branding\">\r\n          <a href=\"javascript:void(0);\" title=\"{{headerOptions.title}}\"><img src=\"./assets/logos/shield.svg\" alt=\"{{headerOptions.title}}\" /></a>\r\n        </div>\r\n        <div class=\"jazz-header-collapsed__site-branding--divider\">\r\n        </div>\r\n        <div class=\"jazz-header-collapsed__site-branding\">\r\n          <div class=\"jazz-header-collapsed__site-branding-info\">\r\n            <div class=\"jazz-header-collapsed__site-branding-name\">\r\n              <a href=\"javascript:void(0);\" title=\"Home\" rel=\"home\">{{ headerOptions.siteBrandingName }}</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <app-jazz-menu [menuItems]=\"headerOptions.menuItems\" [utilityItems]=\"headerOptions.utilityItems\">\r\n\r\n  </app-jazz-menu>\r\n  </div>\r\n</header>\r\n\r\n<header role=\"banner\" class=\"jazz-header-compact\" *ngIf=\"headerOptions.showCompact\">\r\n  <h1 class=\"jazz-visually-hidden\">{{ headerOptions.title }}</h1>\r\n  <div class=\"jazz-skip-links\">\r\n    <a href=\"#main-content\" class=\"jazz-skip-link\">Skip to main content</a>\r\n    <a href=\"#search\" class=\"jazz-skip-link\">Skip to search options</a>\r\n  </div>\r\n  <div class=\"jazz-container\">\r\n    <div class=\"jazz-header-compact-container\">\r\n      <div class=\"jazz-header-compact-logo\">\r\n        <div class=\"jazz-header-compact__pu-branding\">\r\n          <a href=\"javascript:void(0);\" title=\"{{ headerOptions.title }}\"><img src=\"./assets/logos/pu-standard-ww-ws.png\" alt=\"{{ headerOptions.title }}\" /></a>\r\n        </div>\r\n        <div class=\"jazz-header-compact__site-branding--divider\">\r\n        </div>\r\n        <div class=\"jazz-header-compact__site-branding\">\r\n          <div class=\"jazz-header-compact__site-branding-info\">\r\n            <div class=\"jazz-header-compact__site-branding-name\">\r\n              <a href=\"javascript:void(0);\" title=\"Home\" rel=\"home\">{{ headerOptions.siteBrandingName }}</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"jazz-header-collapsed-header\">\r\n        <div class=\"jazz-header-collapsed-container\">\r\n          <div class=\"jazz-header-collapsed__pu-branding\">\r\n            <a href=\"javascript:void(0);\" title=\"{{ headerOptions.title }}\"><img src=\"./assets/logos/shield.svg\" alt=\"{{ headerOptions.title }}\" /></a>\r\n          </div>\r\n          <div class=\"jazz-header-collapsed__site-branding--divider\">\r\n          </div>\r\n          <div class=\"jazz-header-collapsed__site-branding\">\r\n            <div class=\"jazz-header-collapsed__site-branding-info\">\r\n              <div class=\"jazz-header-collapsed__site-branding-name\">\r\n                <a href=\"javascript:void(0);\" title=\"Home\" rel=\"home\">{{ headerOptions.siteBrandingName }}</a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"jazz-header-break\"></div>\r\n      <nav aria-label=\"Main Menu\" class=\"jazz-menu__main-menu\">\r\n        <div class=\"jazz-menu__main-menu-navbar\">\r\n          <app-jazz-menu-main-button></app-jazz-menu-main-button>\r\n          <div class=\"jazz-menu__nav-container\">\r\n            <div class=\"jazz-header-compact__utility-menu\">\r\n              <ul class=\"jazz-menubar\">\r\n                <li *ngFor=\"let menuItem of headerOptions.menuItems\">\r\n                  <a [routerLink]=\"menuItem.url\" routerLinkActive=\"active\" #menuLink=\"routerLinkActive\"\r\n                     [attr.aria-current]=\"menuLink.isActive ? 'page' : undefined\">{{menuItem.label}}</a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"jazz-header-compact__utility-menu--divider\"></div>\r\n            <div class=\"jazz-header-compact__utility-menu\">\r\n              <ul class=\"jazz-menubar\">\r\n                <li><a href=\"javascript void(0);\">Net Id</a></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</header>\r\n"
        },
        {
            "name": "MainMenu1Component",
            "id": "component-MainMenu1Component-efeedec8196c071030448be76bd24aa3",
            "file": "src/app/main-menu/main-menu1/main-menu1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-menu1",
            "styleUrls": [
                "./main-menu1.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-main-menu1',\n  templateUrl: './main-menu1.component.html',\n  styleUrls: ['./main-menu1.component.css']\n})\nexport class MainMenu1Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-menu1.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"jazz-page-title\">Main Menu 1</h1>\n<h2>Accordion</h2>\n<p>\n  This section describes the first point. Careful consideration of these points should be considered.\n</p>\n<app-jazz-accordion>\n  <h2>\n    <button #jazzAccordionButtons class=\"jazz-accordion__button\" aria-expanded=\"false\" aria-controls=\"content1\">Sed porttitor lectus nibh?</button>\n  </h2>\n  <div class=\"jazz-accordion__content\" id=\"content1\" hidden>\n    Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem. Praesent sapien massa, convallis a\n    pellentesque nec, egestas non nisi.\n  </div>\n  <h2>\n    <button #jazzAccordionButtons class=\"jazz-accordion__button\" aria-expanded=\"true\" aria-controls=\"content2\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ultricies ligula sed magna dictum porta?\n    </button>\n  </h2>\n  <div aria-hidden=\"false\" class=\"jazz-accordion__content\" id=\"content2\">\n    Quisque velit nisi, pretium ut lacinia in, elementum id enim. Curabitur arcu erat, accumsan id imperdiet\n    et, porttitor at sem. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus.\n    Cras ultricies ligula sed magna dictum porta.\n  </div>\n  <h2>\n    <button #jazzAccordionButtons class=\"jazz-accordion__button\" aria-expanded=\"false\" aria-controls=\"content3\">\n      Vivamus magna justo, lacinia eget consectetur sed, convallis at tellus. Curabitur aliquet quam id dui posuere blandit.\n    </button>\n  </h2>\n  <div class=\"jazz-accordion__content\" id=\"content3\" hidden>\n    Nulla porttitor accumsan tincidunt. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices\n    posuere cubilia Curae; Donec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet ligula.\n    Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem.\n  </div>\n  <h2>\n    <button #jazzAccordionButtons class=\"jazz-accordion__button\" aria-expanded=\"false\" aria-controls=\"content4\">\n      Vivamus magna justo, lacinia eget consectetur sed, convallis at tellus. Curabitur aliquet quam id dui posuere blandit.\n    </button>\n  </h2>\n  <div class=\"jazz-accordion__content\" id=\"content4\" hidden>\n    Nulla porttitor accumsan tincidunt. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices\n    posuere cubilia Curae; Donec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet ligula.\n    Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem.\n  </div>\n</app-jazz-accordion>\n"
        },
        {
            "name": "MainMenu2Component",
            "id": "component-MainMenu2Component-630c40821d88429fc804d6ddeb3ce80c",
            "file": "src/app/main-menu/main-menu2/main-menu2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-menu2",
            "styleUrls": [
                "./main-menu2.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-main-menu2',\n  templateUrl: './main-menu2.component.html',\n  styleUrls: ['./main-menu2.component.css']\n})\nexport class MainMenu2Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n  clicked(): void {\n    alert('Button was clicked');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-menu2.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"jazz-page-title\">Main Menu 2</h1>\n<h2>Second Point</h2>\n\n<nav class=\"jazz-breadcrumb\" aria-label=\"Breadcrumbs\">\n  <ol class=\"jazz-breadcrumb__list\">\n    <li class=\"jazz-breadcrumb__list-item\">\n      <a href=\"#\" class=\"jazz-breadcrumb__link\">Home</a>\n    </li>\n    <li class=\"jazz-breadcrumb__list-item\">\n      <a href=\"#\" class=\"jazz-breadcrumb__link\">Another Link</a>\n    </li>\n    <li class=\"jazz-breadcrumb__list-item\">\n      <a href=\"#\" class=\"jazz-breadcrumb__link\">Yet Another Link Level</a>\n    </li>\n    <li class=\"jazz-breadcrumb__list-item jazz-current\" aria-current=\"page\">And finally here were are the page description</li>\n  </ol>\n</nav>\n\n<p>\n  This section describes the second point. Careful consideration of these points should be considered. This is a button that activates a dialog box.\n  <app-jazz-modal-dialog [title]=\"'Sample Dialog'\" [buttonLabel]=\"'Click Me!'\" (buttonClicked)=\"clicked()\">\n      This is the content of the dialog\n  </app-jazz-modal-dialog>\n</p>\n\n"
        },
        {
            "name": "MainMenu3Component",
            "id": "component-MainMenu3Component-1057bec36fc7a5d8fecff8d1d8a36fa8",
            "file": "src/app/main-menu/main-menu3/main-menu3.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-menu3",
            "styleUrls": [
                "./main-menu3.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu3.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-main-menu3',\n  templateUrl: './main-menu3.component.html',\n  styleUrls: ['./main-menu3.component.css']\n})\nexport class MainMenu3Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-menu3.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"jazz-page-title\">Main Menu 3</h1>\n<h2>Third Point</h2>\n<p>\n  This section describes the third point. Careful consideration of these points should be considered.\n</p>\n"
        },
        {
            "name": "MainMenuComponent",
            "id": "component-MainMenuComponent-54d6491afc2678f3b57c3eb209bccbe8",
            "file": "src/app/components/header/main-menu/main-menu.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-main-menu",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuComponents",
                    "type": "QueryList<MainMenuItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MainMenuItemComponent, {descendants: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ContentChildren, QueryList} from '@angular/core';\r\nimport {MainMenuItemComponent} from './main-menu-item';\r\n\r\n@Component({\r\n  selector: 'app-jazz-main-menu',\r\n  template: `\r\n      <ng-content></ng-content>\r\n  `,\r\n})\r\nexport class MainMenuComponent {\r\n  @ContentChildren(MainMenuItemComponent, {descendants: false}) menuComponents: QueryList<MainMenuItemComponent>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MainMenuItemComponent",
            "id": "component-MainMenuItemComponent-eed74411d805a2887ac084847e691249",
            "file": "src/app/components/header/main-menu/main-menu-item.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-main-menu-item",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "shownByDefault",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "url",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuComponents",
                    "type": "QueryList<MainMenuItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MainMenuItemComponent, {descendants: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ContentChildren, Input, QueryList} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-jazz-main-menu-item',\r\n  template: `\r\n      <ng-content></ng-content>\r\n  `,\r\n})\r\nexport class MainMenuItemComponent {\r\n  @Input() url: string;\r\n  @Input() label: string;\r\n  @Input() shownByDefault: boolean;\r\n  @ContentChildren(MainMenuItemComponent, {descendants: false}) menuComponents: QueryList<MainMenuItemComponent>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MainPageComponent",
            "id": "component-MainPageComponent-8f436c98100b4b891c8421a9e2d1ad69",
            "file": "src/app/main-page/main-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-page",
            "styleUrls": [
                "./main-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css']\n})\nexport class MainPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-page.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"jazz-page-title\">Main Page</h1>\n<h2>Welcome to the Princeton Design System!</h2>\n<p>\n  This is the main page of the Princeton Design System.\n</p>\n\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-d3cbcf39d3aec82e20cc1826b7b51dce",
            "file": "src/app/components/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "mainMenuItems",
                    "line": 26,
                    "type": "MenuItem[]"
                },
                {
                    "name": "menuItems",
                    "line": 20,
                    "type": "MenuItem[]"
                },
                {
                    "name": "utilityItems",
                    "line": 23,
                    "type": "MenuItem[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeSubMenus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "displayWindowSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "getButtonForSelector",
                    "args": [
                        {
                            "name": "btnSelector",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        },
                        {
                            "name": "mainEl",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "btnSelector",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mainEl",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseOut",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetSubMenus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 29
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {MenuItem} from '../../model/menu-item';\r\nimport {Component, HostListener, Input} from '@angular/core';\r\nimport {\r\n  ARIA_EXPANDED,\r\n  HEADER_NAV_SELECTOR, HEADER_SUB_MENU_SELECTOR, ICON_CLOSE, ICON_MENU, ICON_SELECTOR, MENU_BUTTON_SELECTOR,\r\n  MENU_HIDE_STYLE, MENU_MAIN_MENU_SELECTOR,\r\n  MENU_NAV_EXPANDED_STYLE, MENU_RECENTLY_OPENED_ID, MENU_SELECTOR,\r\n  MENU_STICKY_STYLE, MENU_SUB_NAV_EXPANDED_STYLE,\r\n  MENUBAR_SHOWN_STYLE, MENUBAR_SUB_SHOWN_STYLE\r\n} from './menu-constants';\r\n\r\n\r\n@Component({\r\n  selector: 'app-jazz-menu',\r\n  templateUrl: './menu.component.html'\r\n})\r\nexport class MenuComponent {\r\n\r\n  @Input()\r\n  menuItems?: MenuItem[];\r\n\r\n  @Input()\r\n  utilityItems?: MenuItem[];\r\n\r\n  @Input()\r\n  mainMenuItems?: MenuItem[];\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event): void {\r\n    this.displayWindowSize();\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  displayWindowSize(): void {\r\n    // Main Menu Reset\r\n    document.querySelectorAll(HEADER_NAV_SELECTOR).forEach((header) => {\r\n      header.classList.remove(MENU_NAV_EXPANDED_STYLE);\r\n      header.querySelectorAll('ul').forEach((navbar) => {\r\n        navbar.classList.remove(MENU_NAV_EXPANDED_STYLE);\r\n        navbar.classList.remove(MENUBAR_SHOWN_STYLE);\r\n        navbar.classList.remove(MENU_STICKY_STYLE);\r\n        navbar.querySelectorAll('li').forEach((submenu) => {\r\n          submenu.classList.remove(MENU_STICKY_STYLE);\r\n          submenu.classList.remove(MENU_HIDE_STYLE);\r\n        });\r\n      });\r\n    });\r\n\r\n    document.querySelectorAll(MENU_BUTTON_SELECTOR).forEach((button) => {\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n      const menuToggleIcon = button.querySelector(ICON_SELECTOR);\r\n      menuToggleIcon.classList.remove(ICON_CLOSE);\r\n      menuToggleIcon.classList.add(ICON_MENU);\r\n    });\r\n\r\n    // Sub Menus Reset\r\n    document.querySelectorAll(MENU_SELECTOR).forEach((menu) => {\r\n      menu.querySelectorAll('ul').forEach((navbar) => {\r\n        navbar.classList.remove(MENU_SUB_NAV_EXPANDED_STYLE);\r\n        navbar.classList.remove(MENUBAR_SUB_SHOWN_STYLE);\r\n      });\r\n    });\r\n\r\n    document.querySelectorAll(HEADER_SUB_MENU_SELECTOR).forEach((button) => {\r\n      button.setAttribute(ARIA_EXPANDED, 'false');\r\n    });\r\n  }\r\n\r\n  // This retrieves the appropriate button depending on the selector passed in\r\n  getButtonForSelector(btnSelector, button, mainEl): any {\r\n    if (!button.matches(btnSelector)) {\r\n      button = mainEl.querySelector(btnSelector);\r\n    }\r\n    return button;\r\n  }\r\n\r\n  closeSubMenus(): void {\r\n    // const mainEl = event.btn.closest(MENU_MAIN_MENU_SELECTOR);\r\n    document.querySelectorAll(HEADER_NAV_SELECTOR).forEach((mainEl) => {\r\n      mainEl.querySelectorAll('li').forEach((navbar) => {\r\n        navbar.querySelectorAll('ul').forEach((list) => {\r\n          list.classList.remove(MENU_STICKY_STYLE);\r\n          list.classList.add(MENU_HIDE_STYLE);\r\n        });\r\n      });\r\n\r\n      // tslint:disable-next-line:no-shadowed-variable\r\n      mainEl.querySelectorAll(HEADER_SUB_MENU_SELECTOR).forEach((button) => {\r\n        button.setAttribute(ARIA_EXPANDED, 'false');\r\n      });\r\n    });\r\n  }\r\n\r\n  resetSubMenus(): void {\r\n    document.querySelectorAll(HEADER_NAV_SELECTOR).forEach((mainEl) => {\r\n      mainEl.querySelectorAll('li').forEach((navbar) => {\r\n        navbar.querySelectorAll('ul').forEach((list) => {\r\n          list.classList.remove(MENU_STICKY_STYLE);\r\n          list.classList.remove(MENU_HIDE_STYLE);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  onMouseOut(event): void {\r\n    const li = event.target as HTMLElement;\r\n    if (li) {\r\n      li.querySelectorAll('ul').forEach((subnav) => {\r\n        if (subnav.id === MENU_RECENTLY_OPENED_ID) {\r\n          subnav.classList.remove(MENU_HIDE_STYLE);\r\n          subnav.id = '';\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 31
            },
            "templateData": "<nav aria-label=\"Main Menu\" class=\"jazz-menu__main-menu\">\n  <h2 class=\"jazz-visually-hidden\">Main Menu</h2>\n\n  <div class=\"jazz-container\">\n    <div class=\"jazz-menu__main-menu-navbar\">\n      <app-jazz-menu-main-button></app-jazz-menu-main-button>\n      <div class=\"jazz-menu__nav-container\">\n        <ul *ngIf=\"menuItems && menuItems.length > 0\" class=\"jazz-menubar\" role=\"list\">\n            <li *ngFor=\"let level1item of menuItems\" (mouseleave)=\"onMouseOut($event)\">\n              <app-jazz-menu-item [menuItem]=\"level1item\" (closeSubMenus)=\"closeSubMenus()\" (resetSubMenus)=\"resetSubMenus()\"></app-jazz-menu-item>\n            </li>\n        </ul>\n        <div class=\"jazz-header__utility-menu jazz-header__utility-menu--hide-large\">\n          <ul *ngIf=\"utilityItems && utilityItems.length > 0\">\n            <li *ngFor=\"let utilityItem of utilityItems\" >\n              <a [routerLink]=\"utilityItem.url\" routerLinkActive=\"active\" #menuLink=\"routerLinkActive\"\n                [attr.aria-current]=\"menuLink.isActive ? 'page' : undefined\">{{utilityItem.label}}</a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</nav>\n"
        },
        {
            "name": "MenuItemComponent",
            "id": "component-MenuItemComponent-12bbcc74daed5e4ebecad6b6a2879373",
            "file": "src/app/components/menu/menu-item/menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-menu-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menuItem",
                    "line": 13,
                    "type": "MenuItem"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeSubMenus",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "resetSubMenus",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'template', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "getClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {MenuItem} from '../../../model/menu-item';\nimport {Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewContainerRef} from '@angular/core';\n\n@Component({\n  selector: 'app-jazz-menu-item',\n  templateUrl: './menu-item.component.html'\n})\nexport class MenuItemComponent implements OnInit {\n\n  @ViewChild('template', {static: true}) template;\n\n  @Input()\n  menuItem: MenuItem;\n\n  @Output()\n  closeSubMenus: EventEmitter<void> = new EventEmitter();\n\n  @Output()\n  resetSubMenus: EventEmitter<void> = new EventEmitter();\n\n  constructor(\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnInit(): void {\n    this.viewContainerRef.createEmbeddedView(this.template);\n  }\n\n  getClass(): string {\n    return this.menuItem.shownByDefault ? 'jazz-menubar__submenu--shown-by-default' : '';\n  }\n\n  close(): void {\n    this.closeSubMenus.emit();\n  }\n\n  reset(): void {\n    this.resetSubMenus.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #template>\n  <a [routerLink]=\"menuItem.url\" routerLinkActive=\"active\" #menuLink=\"routerLinkActive\"\n    [attr.aria-current]=\"menuLink.isActive ? 'page' : undefined\">{{menuItem.label}}</a>\n  <app-jazz-sub-button [menuItem]=\"menuItem\" (closeSubMenus)=\"close()\" (resetSubMenus)=\"reset()\"></app-jazz-sub-button>\n  <ul *ngIf=\"menuItem && menuItem.subItems && menuItem.subItems.length > 0\" [class]=\"getClass()\">\n    <li *ngFor=\"let levelItem of menuItem.subItems\">\n        <app-jazz-menu-item [menuItem]=\"levelItem\"></app-jazz-menu-item>\n    </li>\n  </ul>\n</ng-template>\n"
        },
        {
            "name": "MenuMainButtonComponent",
            "id": "component-MenuMainButtonComponent-1f0de429ce9e1f514169822f6e24b4cf",
            "file": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-menu-main-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-main-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mainButtonTemplate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'mainButtonTemplate', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onMainMenuClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMainMenuIconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMenu",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, ViewChild, ViewContainerRef} from '@angular/core';\nimport {\n  HEADER_NAV_SELECTOR, ICON_CLOSE,\n  ICON_SELECTOR,\n  MENU_MAIN_MENU_SELECTOR,\n  MENU_NAV_EXPANDED_STYLE,\n  MENUBAR_SHOWN_STYLE\n} from '../menu-constants';\n\nexport const ARIA_EXPANDED = 'aria-expanded';\n\n@Component({\n  selector: 'app-jazz-menu-main-button',\n  templateUrl: './menu-main-button.component.html'\n})\nexport class MenuMainButtonComponent implements OnInit {\n\n  @ViewChild('mainButtonTemplate', {static: true}) mainButtonTemplate;\n\n  constructor(\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnInit(): void {\n    this.viewContainerRef.createEmbeddedView(this.mainButtonTemplate);\n  }\n\n  onMainMenuClick(event): void {\n    const button = event.target as HTMLElement;\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\n    const expand = !(expandedAttr && expandedAttr === 'true');\n    this.showMenu(expand, button);\n    event.stopImmediatePropagation();\n  }\n\n  onMainMenuIconClick(event): void {\n    const icon = event.target as HTMLElement;\n    const button = icon.closest('button');\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\n    const expand = !(expandedAttr && expandedAttr === 'true');\n    this.showMenu(expand, button);\n    event.stopImmediatePropagation();\n  }\n\n  // tslint:disable-next-line:typedef\n  showMenu(expand, button) {\n    // This makes sure regardless of which button is picked that the menu elements are expanded/hidden\n    const menuEl = button.closest(MENU_MAIN_MENU_SELECTOR);\n    const menuToggleIcon = button.querySelector(ICON_SELECTOR);\n    const navbar = menuEl.querySelector('ul');\n    const navContainer = menuEl.querySelector(HEADER_NAV_SELECTOR);\n\n    if (expand) {\n      navContainer.classList.add(MENU_NAV_EXPANDED_STYLE);\n      navbar.classList.add(MENUBAR_SHOWN_STYLE);\n      button.setAttribute(ARIA_EXPANDED, 'true');\n      menuToggleIcon.classList.remove('jazz-icon-menu');\n      menuToggleIcon.classList.add(ICON_CLOSE);\n    } else {\n      navContainer.classList.remove(MENU_NAV_EXPANDED_STYLE);\n      navbar.classList.remove(MENUBAR_SHOWN_STYLE);\n      button.setAttribute(ARIA_EXPANDED, 'false');\n      menuToggleIcon.classList.remove(ICON_CLOSE);\n      menuToggleIcon.classList.add('jazz-icon-menu');\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #mainButtonTemplate>\n  <button class=\"jazz-menu__menu-toggle\" (click)='onMainMenuClick($event)'\n          aria-expanded=\"false\" aria-label=\"Navigation Menu Toggle\">\n    Menu<i class=\"jazz-icon jazz-icon-menu\" aria-hidden=\"true\" (click)='onMainMenuIconClick($event)'></i>\n  </button>\n</ng-template>\n"
        },
        {
            "name": "MenuSubButtonComponent",
            "id": "component-MenuSubButtonComponent-491003b7c1e1031d39939fa2265ecb0e",
            "file": "src/app/components/menu/menu-sub-button/menu-sub-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-sub-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-sub-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menuItem",
                    "line": 16,
                    "type": "MenuItem"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeSubMenus",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "resetSubMenus",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "subButtonTemplate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'subButtonTemplate', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onSubMenuClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSubMenu",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSubMenuCondensed",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSubMenuFull",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewContainerRef} from '@angular/core';\nimport {MenuItem} from '../../../model/menu-item';\nimport {\n  ARIA_EXPANDED,\n  MENU_HIDE_STYLE,\n  MENU_RECENTLY_OPENED_ID,\n  MENU_STICKY_STYLE, MENU_SUB_NAV_EXPANDED_STYLE, MENUBAR_SUB_SHOWN_STYLE\n} from '../menu-constants';\n\n@Component({\n  selector: 'app-jazz-sub-button',\n  templateUrl: './menu-sub-button.component.html'\n})\nexport class MenuSubButtonComponent implements OnInit {\n  @Input()\n  menuItem: MenuItem;\n\n  @Output()\n  closeSubMenus: EventEmitter<void> = new EventEmitter();\n\n  @Output()\n  resetSubMenus: EventEmitter<void> = new EventEmitter();\n\n  @ViewChild('subButtonTemplate', {static: true}) subButtonTemplate;\n\n  constructor(\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnInit(): void {\n    this.viewContainerRef.createEmbeddedView(this.subButtonTemplate);\n  }\n\n  onSubMenuClick(event): void {\n    const button = event.target as HTMLElement;\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\n    const expand = !(expandedAttr && expandedAttr === 'true');\n    this.showSubMenu(expand, button);\n  }\n\n  showSubMenu(expand, button): void {\n    const mq = window.matchMedia('(min-width: 900px)');\n    if (mq.matches) {\n      this.showSubMenuFull(expand, button);\n    } else {\n      this.showSubMenuCondensed(expand, button);\n    }\n  }\n\n  showSubMenuFull(expand, button): void {\n    // This makes sure regardless of which button is picked that the menu elements are expanded/hidden\n    const navbar = button.closest('li');\n    const navContainer = navbar.querySelector('ul');\n    if (expand) {\n      this.closeSubMenus.emit();\n\n      navContainer.classList.add(MENU_STICKY_STYLE);\n      navContainer.classList.remove(MENU_HIDE_STYLE);\n      navbar.classList.add(MENU_STICKY_STYLE);\n      button.setAttribute(ARIA_EXPANDED, 'true');\n    } else {\n      this.resetSubMenus.emit();\n\n      navContainer.classList.remove(MENU_STICKY_STYLE);\n      navContainer.classList.add(MENU_HIDE_STYLE);\n      navContainer.id = MENU_RECENTLY_OPENED_ID;\n      navbar.classList.remove(MENU_STICKY_STYLE);\n      button.setAttribute(ARIA_EXPANDED, 'false');\n    }\n  }\n\n  showSubMenuCondensed(expand, button): void {\n    // This makes sure regardless of which button is picked that the menu elements are expanded/hidden\n    const navbar = button.closest('li');\n    const navContainer = navbar.querySelector('ul');\n\n    if (expand) {\n      navContainer.classList.add(MENU_SUB_NAV_EXPANDED_STYLE);\n      navbar.classList.add(MENUBAR_SUB_SHOWN_STYLE);\n      button.setAttribute(ARIA_EXPANDED, 'true');\n    } else {\n      navContainer.classList.remove(MENU_SUB_NAV_EXPANDED_STYLE);\n      navbar.classList.remove(MENUBAR_SUB_SHOWN_STYLE);\n      button.setAttribute(ARIA_EXPANDED, 'false');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #subButtonTemplate>\n  <button *ngIf='menuItem && menuItem.subItems && menuItem.subItems.length > 0' class=\"jazz-menu__submenu-toggle\" type=\"button\" aria-expanded=\"false\" (click)='onSubMenuClick($event)'>\n    <span class=\"jazz-visually-hidden\">\n      {{menuItem.label}}\n    </span>\n  </button>\n</ng-template>\n"
        },
        {
            "name": "ModalDialogComponent",
            "id": "component-ModalDialogComponent-79e4e7478b264f6e2b53a79511813d3e",
            "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-modal-dialog",
            "styleUrls": [
                "./modal-dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonLabel",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "content",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 25,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 31,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "modalWrapper",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'jazzModalWrapper'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "focusOnFirstInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "handleKeyEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keepFocusWithin",
                    "args": [
                        {
                            "name": "keyEvent",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "keyEvent",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modalClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "onAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component, ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {UtilityFunctions} from '../utility-functions';\n\nconst INPUT_SELECTORS_EXCL_CLOSE = 'a[href]:not([disabled]), button:not([disabled]):not(.jazz-modal-button__close), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])';\nconst INPUT_SELECTORS = 'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])';\n\n@Component({\n  selector: 'app-jazz-modal-dialog',\n  templateUrl: './modal-dialog.component.html',\n  styleUrls: ['./modal-dialog.component.css']\n})\nexport class ModalDialogComponent implements OnInit {\n\n  @Input()\n  buttonLabel: string;\n\n  @Input()\n  title: string;\n\n  @Input()\n  content: string;\n\n  @Output()\n  buttonClicked: EventEmitter<void> = new EventEmitter();\n\n  @ViewChild('jazzModalWrapper')\n  modalWrapper: ElementRef;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onAction(event: Event): void {\n    console.log('onAction')\n\n    if (!this.handleKeyEvents(event)) {\n      return;\n    }\n\n    this.modalWrapper.nativeElement.classList.toggle('jazz-modal__wrapper--visible');\n    if (this.modalWrapper.nativeElement.classList.contains('jazz-modal__wrapper--visible')) {\n      this.focusOnFirstInput();\n    }\n\n    event.stopImmediatePropagation();\n  }\n\n  handleKeyEvents(event: Event): boolean {\n    if (event instanceof KeyboardEvent) {\n      const keyEvent: KeyboardEvent = event as KeyboardEvent;\n      const isTabPressed = (keyEvent.key === 'Tab');\n      const isEscPressed = (keyEvent.key === 'Escape');\n      const isEnterPressed = (keyEvent.key === 'Enter');\n\n      // Handle tab navigation to keep it within the window\n      if (isTabPressed) {\n        this.keepFocusWithin(keyEvent);\n        return false;\n      }\n\n      // Only allow Enter and Escape Key Press\n      if (!isEnterPressed && !isEscPressed) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  focusOnFirstInput(): void {\n    const focusableEls: HTMLElement[] = UtilityFunctions.select(INPUT_SELECTORS_EXCL_CLOSE, this.modalWrapper.nativeElement);\n    if (focusableEls.length > 0) {\n      focusableEls[0].focus();\n    }\n  }\n\n  keepFocusWithin(keyEvent): void {\n    const focusableEls: HTMLElement[] = UtilityFunctions.select(INPUT_SELECTORS, this.modalWrapper.nativeElement);\n    const firstFocusableEl = focusableEls[0];\n    const lastFocusableEl = focusableEls[focusableEls.length - 1];\n\n    if (keyEvent.shiftKey ) /* shift + tab */ {\n      if (document.activeElement === firstFocusableEl) {\n        lastFocusableEl.focus();\n        keyEvent.preventDefault();\n      }\n    } else /* tab */ {\n      if (document.activeElement === lastFocusableEl) {\n        firstFocusableEl.focus();\n        keyEvent.preventDefault();\n      }\n    }\n  }\n\n  close(): void {\n    console.log('close')\n    this.modalWrapper.nativeElement.classList.remove('jazz-modal__wrapper--visible');\n  }\n\n  modalClick(): void {\n    this.close();\n    this.buttonClicked.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"jazz-modal\" role=\"region\">\n  <button class=\"jazz-btn jazz-modal__button\" (click)=\"onAction($event)\">{{ buttonLabel }}</button>\n  <div #jazzModalWrapper role=\"presentation\" class=\"jazz-modal-wrapper\" (keydown)=\"onAction($event)\">\n    <div role=\"dialog\" aria-label=\"Test Dialog with Script\" aria-modal=\"true\" class=\"jazz-modal-window jazz-modal--sm\">\n      <div class=\"jazz-modal-title\">\n        {{ title }}\n        <button class=\"jazz-modal__button jazz-modal-button__close jazz-modal-button--transparent\"\n                aria-label=\"Close modal dialog\" (click)=\"close()\"></button>\n      </div>\n      <div class=\"jazz-modal-content\" aria-labelledBy=\"jazz-modal-title\">\n        <ng-content></ng-content>\n      </div>\n      <div class=\"jazz-modal-button-container\">\n        <button class=\"jazz-btn jazz-modal__button\" (click)=\"close()\">Cancel</button>\n        <button class=\"jazz-btn jazz-modal__button\" (click)=\"modalClick()\">OK</button>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PagerComponent",
            "id": "component-PagerComponent-fc724dfd0a8b4331cd13652501a1e2ea",
            "file": "src/app/components/pager/pager.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-pager",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pager.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataPage",
                    "line": 11,
                    "type": "DataPage<any>"
                }
            ],
            "outputsClass": [
                {
                    "name": "pagerChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "iterablePages",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "setPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {DataPage} from '../../model/data-page';\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-jazz-pager',\n  templateUrl: './pager.component.html'\n})\nexport class PagerComponent {\n\n  @Input('dataPage')\n  public dataPage: DataPage<any>;\n\n  @Output()\n  public pagerChange: EventEmitter<any> = new EventEmitter();\n\n  constructor() {}\n\n  iterablePages(): number[] {\n\n    const totalPages: number = this.dataPage.totalPages;\n    const currentPage: number = this.dataPage.number;\n    const pages: number[] = [];\n    const delta = 4;\n    let maxPages = 9;\n    let truncate = true;\n    let pageNum = 0;\n\n    if (totalPages < maxPages) {\n      maxPages = totalPages;\n      truncate = false;\n      pageNum = 0;\n    } else {\n      if (currentPage - delta < 0) {\n        pageNum = 0;\n      } else if (currentPage + delta > totalPages - 1) {\n        pageNum = totalPages - maxPages;\n      } else {\n        pageNum = currentPage - delta;\n      }\n    }\n\n    for (let pageIdx = 0; pageIdx < maxPages; pageIdx++) {\n      if (truncate) {\n        if (pageIdx === 0) {\n          // always show the first page number\n          pages.push(0);\n        } else if (pageIdx === 1 && pageNum !== 1) {\n          // show '...' if second page is not a 2\n          pages.push(-1);\n        } else if (pageIdx === maxPages - 1) {\n          // always show the last page number\n          pages.push(totalPages - 1);\n        } else if (pageIdx === maxPages - 2 && pageNum !== totalPages - 2) {\n          // show '...' if there is a gap between next to last page and last page\n          pages.push(-1);\n        } else {\n          pages.push(pageNum);\n        }\n      } else {\n        pages.push(pageNum);\n      }\n      pageNum++;\n    }\n\n    return pages;\n  }\n\n  setPage(page: number): void {\n    if (page >= 0 && page <= this.dataPage.totalPages) {\n      this.dataPage.number = page;\n      this.pagerChange.emit(page);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "templateData": "<ul *ngIf=\"dataPage\" class=\"jazz-pager\" role=\"navigation\" aria-label=\"pagination\">\r\n  <li>\r\n    <a *ngIf=\"(dataPage['number'] !== 1)\" (click)=\"setPage(dataPage['number'] - 1)\" data-page=\"Previous\">Previous</a>\r\n    <span *ngIf=\"(dataPage['number'] === 1)\" [attr.aria-disabled]=\"true\" data-page=\"Previous\">Previous</span>\r\n  </li>\r\n  <li *ngFor=\"let page of iterablePages()\">\r\n    <a *ngIf=\"page >= 0\" (click)=\"setPage(page + 1)\"\r\n       attr.aria-label=\"Go to {{page + 1}}\"\r\n       attr.aria-current=\"{{ (dataPage.number === (page + 1)) ?'page': ''}}\"\r\n       attr.data-page=\"{{page + 1}}\" >{{page + 1}}\r\n    </a>\r\n    <span *ngIf=\"page < 0\">...</span>\r\n  </li>\r\n  <li>\r\n    <a *ngIf=\"(dataPage['number'] !== dataPage.totalPages)\" (click)=\"setPage(dataPage.number + 1)\" data-page=\"Next\">Next</a>\r\n    <span *ngIf=\"(dataPage['number'] === dataPage.totalPages)\" [attr.aria-disabled]=\"true\" data-page=\"Next\">Next</span>\r\n  </li>\r\n</ul>\r\n"
        },
        {
            "name": "SearchButtonComponent",
            "id": "component-SearchButtonComponent-ff5c5969008b3197121047f7ec4503d3",
            "file": "src/app/components/header/search-button/search-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-search-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchButtonTemplate",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchButtonTemplate', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "onMainMenuSearchIconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSearch",
                    "args": [
                        {
                            "name": "expand",
                            "type": ""
                        },
                        {
                            "name": "button",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, ViewChild, ViewContainerRef} from '@angular/core';\nimport {ARIA_EXPANDED, ICON_CLOSE, ICON_SELECTOR} from '../../menu/menu-constants';\nimport {\n  HEADER_SELECTOR, SEARCH_PANEL, SEARCH_SHOWN_STYLE, ICON_SEARCH\n} from './../header-constants';\n\n@Component({\n  selector: 'app-jazz-search-button',\n  templateUrl: './search-button.component.html'\n})\nexport class SearchButtonComponent implements OnInit {\n\n  @ViewChild('searchButtonTemplate', {static: true}) searchButtonTemplate;\n\n  constructor(\n    private viewContainerRef: ViewContainerRef\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.viewContainerRef.createEmbeddedView(this.searchButtonTemplate);\n  }\n\n  onSearchClick(event): void {\n    const button = event.target as HTMLElement;\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\n    const expand = !(expandedAttr && expandedAttr === 'true');\n    this.showSearch(expand, button);\n    event.stopImmediatePropagation();\n  }\n\n  onMainMenuSearchIconClick(event): void {\n    const icon = event.target as HTMLElement;\n    const button = icon.closest('button');\n    const expandedAttr = button.getAttribute(ARIA_EXPANDED);\n    const expand = !(expandedAttr && expandedAttr === 'true');\n    this.showSearch(expand, button);\n    event.stopImmediatePropagation();\n  }\n\n  showSearch(expand, button): void {\n    // This makes sure regardless of which button is picked that the search elements are expanded/hidden\n    const headerEl = button.closest(HEADER_SELECTOR);\n    const searchToggleIcon = button.querySelector(ICON_SELECTOR);\n    const searchbar = headerEl.querySelector(SEARCH_PANEL);\n\n    if (expand) {\n      searchbar.classList.add(SEARCH_SHOWN_STYLE);\n      button.setAttribute(ARIA_EXPANDED, 'true');\n      searchToggleIcon.classList.remove(ICON_SEARCH);\n      searchToggleIcon.classList.add(ICON_CLOSE);\n      const input = searchbar.querySelector(\"input[type='search']\");\n      input.focus();\n    } else {\n      searchbar.classList.remove(SEARCH_SHOWN_STYLE);\n      button.setAttribute(ARIA_EXPANDED, 'false');\n      searchToggleIcon.classList.remove(ICON_CLOSE);\n      searchToggleIcon.classList.add(ICON_SEARCH);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #searchButtonTemplate>\n  <button class=\"jazz-header__search-bar-toggle\" (click)='onSearchClick($event)'\n          aria-expanded=\"false\" aria-label=\"Search Toggle\">\n    <i class=\"jazz-icon jazz-icon-search\" aria-hidden=\"true\" (click)='onMainMenuSearchIconClick($event)'></i>\n  </button>\n</ng-template>\n"
        },
        {
            "name": "UtilityItemComponent",
            "id": "component-UtilityItemComponent-2872cd6bce66c6c76c03f4ad26f1dafb",
            "file": "src/app/components/header/utility-menu/utility-menu-item.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-utility-item",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "url",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-jazz-utility-item',\r\n  template: `\r\n      <ng-content></ng-content>\r\n  `,\r\n})\r\nexport class UtilityItemComponent {\r\n  @Input() url: string;\r\n  @Input() label: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "UtilityMenuComponent",
            "id": "component-UtilityMenuComponent-f50e848a92c46445c2b565bf2855ab92",
            "file": "src/app/components/header/utility-menu/utility-menu.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jazz-utility-menu",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "utilityMenuComponents",
                    "type": "QueryList<UtilityItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "UtilityItemComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ContentChildren, QueryList} from '@angular/core';\r\nimport {UtilityItemComponent} from './utility-menu-item';\r\n\r\n@Component({\r\n  selector: 'app-jazz-utility-menu',\r\n  template: `\r\n      <ng-content></ng-content>\r\n  `,\r\n})\r\nexport class UtilityMenuComponent {\r\n  @ContentChildren(UtilityItemComponent) utilityMenuComponents: QueryList<UtilityItemComponent>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "DocumentationComponent"
                        },
                        {
                            "name": "MainMenu1Component"
                        },
                        {
                            "name": "MainMenu2Component"
                        },
                        {
                            "name": "MainMenu3Component"
                        },
                        {
                            "name": "MainPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "MenuMainButtonComponent"
                        },
                        {
                            "name": "MenuSubButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "MenuMainButtonComponent"
                        },
                        {
                            "name": "MenuSubButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "MainMenuComponent"
                        },
                        {
                            "name": "MainMenuItemComponent"
                        },
                        {
                            "name": "ModalDialogComponent"
                        },
                        {
                            "name": "PagerComponent"
                        },
                        {
                            "name": "SearchButtonComponent"
                        },
                        {
                            "name": "UtilityItemComponent"
                        },
                        {
                            "name": "UtilityMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "MainMenuComponent"
                        },
                        {
                            "name": "MainMenuItemComponent"
                        },
                        {
                            "name": "ModalDialogComponent"
                        },
                        {
                            "name": "PagerComponent"
                        },
                        {
                            "name": "UtilityItemComponent"
                        },
                        {
                            "name": "UtilityMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACCORDION_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-accordion`"
            },
            {
                "name": "ARIA_CONTROLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "string",
                "defaultValue": "'aria-controls'"
            },
            {
                "name": "ARIA_EXPANDED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "string",
                "defaultValue": "'aria-expanded'"
            },
            {
                "name": "ARIA_EXPANDED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
                "type": "string",
                "defaultValue": "'aria-expanded'"
            },
            {
                "name": "ARIA_EXPANDED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "string",
                "defaultValue": "'aria-expanded'"
            },
            {
                "name": "compact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Object.assign({}, headerOptions)"
            },
            {
                "name": "Compact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DoubleTruncated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "HEADER_NAV_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menu__nav-container`"
            },
            {
                "name": "HEADER_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-header`"
            },
            {
                "name": "HEADER_SUB_MENU_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menu__submenu-toggle`"
            },
            {
                "name": "headerOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "new HeaderOptions()"
            },
            {
                "name": "headerOptionsOnlyUtility",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Object.assign({}, headerOptions)"
            },
            {
                "name": "HIDDEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "string",
                "defaultValue": "'hidden'"
            },
            {
                "name": "ICON_CLOSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-icon-close`"
            },
            {
                "name": "ICON_CLOSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-icon-close`"
            },
            {
                "name": "ICON_MENU",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-icon-menu`"
            },
            {
                "name": "ICON_SEARCH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-icon-search`"
            },
            {
                "name": "ICON_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-icon`"
            },
            {
                "name": "ICON_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-icon`"
            },
            {
                "name": "INPUT_SELECTORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "string",
                "defaultValue": "'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])'"
            },
            {
                "name": "INPUT_SELECTORS_EXCL_CLOSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "string",
                "defaultValue": "'a[href]:not([disabled]), button:not([disabled]):not(.jazz-modal-button__close), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])'"
            },
            {
                "name": "justHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Object.assign({}, headerOptions)"
            },
            {
                "name": "JustHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "justSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Object.assign({}, headerOptions)"
            },
            {
                "name": "JustSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mainMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "MenuItem[]",
                "defaultValue": "[]"
            },
            {
                "name": "MENU_BUTTON_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menu__menu-toggle`"
            },
            {
                "name": "MENU_HIDE_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menubar--hide`"
            },
            {
                "name": "MENU_MAIN_MENU_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menu__main-menu-navbar`"
            },
            {
                "name": "MENU_NAV_EXPANDED_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menu__nav-container--expanded`"
            },
            {
                "name": "MENU_RECENTLY_OPENED_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menu:recentlyOpened`"
            },
            {
                "name": "MENU_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-menubar`"
            },
            {
                "name": "MENU_STICKY_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menubar--stuck`"
            },
            {
                "name": "MENU_SUB_NAV_EXPANDED_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menu__subnav-container--expanded`"
            },
            {
                "name": "MENUBAR_SHOWN_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menubar--shown`"
            },
            {
                "name": "MENUBAR_SUB_SHOWN_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/menu/menu-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-menubar_submenu--shown`"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest-config/__mocks__/globalMocks.ts",
                "type": "",
                "defaultValue": "() => {\n    let storage = {};\n    return {\n      getItem: key => (key in storage ? storage[key] : null),\n      setItem: (key, value) => (storage[key] = value || ''),\n      removeItem: key => delete storage[key],\n      clear: () => (storage = {}),\n    };\n  }"
            },
            {
                "name": "MULTISELECTABLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/accordion/accordion.component.ts",
                "type": "string",
                "defaultValue": "'aria-multiselectable'"
            },
            {
                "name": "OnlyUtilityMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pageSet1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "object",
                "defaultValue": "{\n  totalPages: 10,\n  number: 1\n}"
            },
            {
                "name": "pageSet2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "object",
                "defaultValue": "{\n  totalPages: 20,\n  number: 7\n}"
            },
            {
                "name": "prefix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config.ts",
                "type": "string",
                "defaultValue": "'jazz'"
            },
            {
                "name": "SEARCH_PANEL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-header__search-bar-panel`"
            },
            {
                "name": "SEARCH_SELECTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`.${PREFIX}-header__search-bar-toggle`"
            },
            {
                "name": "SEARCH_SHOWN_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header-constants.ts",
                "type": "",
                "defaultValue": "`${PREFIX}-header__search-bar-panel--shown`"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Accordion.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/Accordion', module)\n  .addDecorator(\n    moduleMetadata({\n      declarations: [AccordionComponent],\n    })\n  )"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/HeaderHTML.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/HeaderHTML', module)\n  .addDecorator(\n    moduleMetadata({\n      imports: [RouterModule.forRoot(routes, {useHash: true})],\n      declarations: [HeaderComponent, MenuComponent, MenuItemComponent, MenuMainButtonComponent, MenuSubButtonComponent,\n        SearchButtonComponent,  MainMenuItemComponent, MainMenuComponent, UtilityMenuComponent, UtilityItemComponent]\n    })\n  )"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Breadcrumbs.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/Breadcrumbs', module)\n  .addDecorator(\n    moduleMetadata({\n      declarations: [AccordionComponent],\n    })\n  )"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Alert.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Components/Alert', module)\n  .addDecorator(\n    moduleMetadata({\n      declarations: [AlertComponent],\n    })\n  )"
            },
            {
                "name": "subMenu1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "MenuItem[]",
                "defaultValue": "[]"
            },
            {
                "name": "subMenu2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "MenuItem[]",
                "defaultValue": "[]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Pager.stories.ts",
                "type": "Story<PagerComponent>",
                "defaultValue": "(args: PagerComponent) => ({\n  component: PagerComponent,\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\n  component: HeaderComponent,\n  props: args,\n})"
            },
            {
                "name": "utilityMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "MenuItem[]",
                "defaultValue": "[]"
            }
        ],
        "functions": [
            {
                "name": "select",
                "file": "src/app/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "selector"
                    },
                    {
                        "name": "context"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "selector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "selectClosestTo",
                "file": "src/app/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "targetSelector"
                    },
                    {
                        "name": "closestToSelector"
                    },
                    {
                        "name": "context"
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "targetSelector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "closestToSelector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/accordion/accordion.component.ts": [
                {
                    "name": "ACCORDION_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-accordion`"
                },
                {
                    "name": "ARIA_CONTROLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "string",
                    "defaultValue": "'aria-controls'"
                },
                {
                    "name": "ARIA_EXPANDED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "string",
                    "defaultValue": "'aria-expanded'"
                },
                {
                    "name": "HIDDEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "string",
                    "defaultValue": "'hidden'"
                },
                {
                    "name": "MULTISELECTABLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/accordion/accordion.component.ts",
                    "type": "string",
                    "defaultValue": "'aria-multiselectable'"
                }
            ],
            "src/app/components/menu/menu-constants.ts": [
                {
                    "name": "ARIA_EXPANDED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "string",
                    "defaultValue": "'aria-expanded'"
                },
                {
                    "name": "HEADER_NAV_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menu__nav-container`"
                },
                {
                    "name": "HEADER_SUB_MENU_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menu__submenu-toggle`"
                },
                {
                    "name": "ICON_CLOSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-icon-close`"
                },
                {
                    "name": "ICON_MENU",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-icon-menu`"
                },
                {
                    "name": "ICON_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-icon`"
                },
                {
                    "name": "MENU_BUTTON_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menu__menu-toggle`"
                },
                {
                    "name": "MENU_HIDE_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menubar--hide`"
                },
                {
                    "name": "MENU_MAIN_MENU_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menu__main-menu-navbar`"
                },
                {
                    "name": "MENU_NAV_EXPANDED_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menu__nav-container--expanded`"
                },
                {
                    "name": "MENU_RECENTLY_OPENED_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menu:recentlyOpened`"
                },
                {
                    "name": "MENU_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-menubar`"
                },
                {
                    "name": "MENU_STICKY_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menubar--stuck`"
                },
                {
                    "name": "MENU_SUB_NAV_EXPANDED_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menu__subnav-container--expanded`"
                },
                {
                    "name": "MENUBAR_SHOWN_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menubar--shown`"
                },
                {
                    "name": "MENUBAR_SUB_SHOWN_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-menubar_submenu--shown`"
                }
            ],
            "src/app/components/menu/menu-main-button/menu-main-button.component.ts": [
                {
                    "name": "ARIA_EXPANDED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
                    "type": "string",
                    "defaultValue": "'aria-expanded'"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "compact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Object.assign({}, headerOptions)"
                },
                {
                    "name": "Compact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "headerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "new HeaderOptions()"
                },
                {
                    "name": "headerOptionsOnlyUtility",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Object.assign({}, headerOptions)"
                },
                {
                    "name": "justHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Object.assign({}, headerOptions)"
                },
                {
                    "name": "JustHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "justSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Object.assign({}, headerOptions)"
                },
                {
                    "name": "JustSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mainMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "MenuItem[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "OnlyUtilityMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "subMenu1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "MenuItem[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "subMenu2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "MenuItem[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\n  component: HeaderComponent,\n  props: args,\n})"
                },
                {
                    "name": "utilityMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "MenuItem[]",
                    "defaultValue": "[]"
                }
            ],
            "src/stories/Pager.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DoubleTruncated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "pageSet1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  totalPages: 10,\n  number: 1\n}"
                },
                {
                    "name": "pageSet2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  totalPages: 20,\n  number: 7\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Pager.stories.ts",
                    "type": "Story<PagerComponent>",
                    "defaultValue": "(args: PagerComponent) => ({\n  component: PagerComponent,\n  props: args\n})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/app/components/header/header-constants.ts": [
                {
                    "name": "HEADER_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-header`"
                },
                {
                    "name": "ICON_CLOSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-icon-close`"
                },
                {
                    "name": "ICON_SEARCH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-icon-search`"
                },
                {
                    "name": "ICON_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-icon`"
                },
                {
                    "name": "SEARCH_PANEL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-header__search-bar-panel`"
                },
                {
                    "name": "SEARCH_SELECTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`.${PREFIX}-header__search-bar-toggle`"
                },
                {
                    "name": "SEARCH_SHOWN_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header-constants.ts",
                    "type": "",
                    "defaultValue": "`${PREFIX}-header__search-bar-panel--shown`"
                }
            ],
            "src/app/components/modal-dialog/modal-dialog.component.ts": [
                {
                    "name": "INPUT_SELECTORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
                    "type": "string",
                    "defaultValue": "'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])'"
                },
                {
                    "name": "INPUT_SELECTORS_EXCL_CLOSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/modal-dialog/modal-dialog.component.ts",
                    "type": "string",
                    "defaultValue": "'a[href]:not([disabled]), button:not([disabled]):not(.jazz-modal-button__close), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])'"
                }
            ],
            "src/jest-config/__mocks__/globalMocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest-config/__mocks__/globalMocks.ts",
                    "type": "",
                    "defaultValue": "() => {\n    let storage = {};\n    return {\n      getItem: key => (key in storage ? storage[key] : null),\n      setItem: (key, value) => (storage[key] = value || ''),\n      removeItem: key => delete storage[key],\n      clear: () => (storage = {}),\n    };\n  }"
                }
            ],
            "src/app/config.ts": [
                {
                    "name": "prefix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config.ts",
                    "type": "string",
                    "defaultValue": "'jazz'"
                }
            ],
            "src/stories/Accordion.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Accordion.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/Accordion', module)\n  .addDecorator(\n    moduleMetadata({\n      declarations: [AccordionComponent],\n    })\n  )"
                }
            ],
            "src/stories/HeaderHTML.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/HeaderHTML.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/HeaderHTML', module)\n  .addDecorator(\n    moduleMetadata({\n      imports: [RouterModule.forRoot(routes, {useHash: true})],\n      declarations: [HeaderComponent, MenuComponent, MenuItemComponent, MenuMainButtonComponent, MenuSubButtonComponent,\n        SearchButtonComponent,  MainMenuItemComponent, MainMenuComponent, UtilityMenuComponent, UtilityItemComponent]\n    })\n  )"
                }
            ],
            "src/stories/Breadcrumbs.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Breadcrumbs.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/Breadcrumbs', module)\n  .addDecorator(\n    moduleMetadata({\n      declarations: [AccordionComponent],\n    })\n  )"
                }
            ],
            "src/stories/Alert.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Alert.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Components/Alert', module)\n  .addDecorator(\n    moduleMetadata({\n      declarations: [AlertComponent],\n    })\n  )"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/utils.ts": [
                {
                    "name": "select",
                    "file": "src/app/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "selector"
                        },
                        {
                            "name": "context"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectClosestTo",
                    "file": "src/app/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "targetSelector"
                        },
                        {
                            "name": "closestToSelector"
                        },
                        {
                            "name": "context"
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "targetSelector",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "closestToSelector",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app.routing.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "MainPageComponent"
                    },
                    {
                        "path": "mainMenu1",
                        "component": "MainMenu1Component"
                    },
                    {
                        "path": "mainMenu2",
                        "component": "MainMenu2Component"
                    },
                    {
                        "path": "mainMenu3",
                        "component": "MainMenu3Component"
                    },
                    {
                        "path": "documentation",
                        "component": "DocumentationComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCORDION_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_CONTROLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_EXPANDED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HIDDEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MULTISELECTABLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 75,
                "coverageCount": "6/8",
                "status": "good"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HEADER_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_CLOSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_SEARCH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEARCH_PANEL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEARCH_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEARCH_SHOWN_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/main-menu/main-menu-item.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/main-menu/main-menu.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/search-button/search-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/utility-menu/utility-menu-item.ts",
                "type": "component",
                "linktype": "component",
                "name": "UtilityItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/utility-menu/utility-menu.ts",
                "type": "component",
                "linktype": "component",
                "name": "UtilityMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_EXPANDED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HEADER_NAV_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HEADER_SUB_MENU_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_CLOSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_MENU",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_BUTTON_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_HIDE_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_MAIN_MENU_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_NAV_EXPANDED_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_RECENTLY_OPENED_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_SELECTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_STICKY_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENU_SUB_NAV_EXPANDED_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENUBAR_SHOWN_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MENUBAR_SUB_SHOWN_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-item/menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuMainButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-main-button/menu-main-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARIA_EXPANDED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-sub-button/menu-sub-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuSubButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INPUT_SELECTORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal-dialog/modal-dialog.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INPUT_SELECTORS_EXCL_CLOSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pager/pager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/utility-functions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UtilityFunctions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prefix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main-menu/documentation/documentation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/main-menu/main-menu1/main-menu1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenu1Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/main-menu/main-menu2/main-menu2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenu2Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/main-menu/main-menu3/main-menu3.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenu3Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/main-page/main-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/model/data-page.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DataPage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/model/header-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HeaderOptions",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/model/menu-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "select",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "selectClosestTo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest-config/__mocks__/globalMocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "compact",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Compact",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "headerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "headerOptionsOnlyUtility",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "justHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JustHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "justSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JustSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OnlyUtilityMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subMenu1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subMenu2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utilityMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/HeaderHTML.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DoubleTruncated",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pageSet1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pageSet2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}