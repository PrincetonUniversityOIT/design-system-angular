export const ARIA_EXPANDED = 'aria-expanded';
export const ARIA_CONTROLS = 'aria-controls';
export const HIDDEN = 'hidden';
export class UtilityFunctions {
    static select(selector, context) {
        if (typeof selector !== 'string') {
            return [];
        }
        if (!context || !this.isElement(context)) {
            context = window.document; // eslint-disable-line no-param-reassign
        }
        const selection = context.querySelectorAll(selector);
        return Array.prototype.slice.call(selection);
    }
    static isElement(value) {
        return value && typeof value === 'object' && value.nodeType === 1;
    }
    static selectClosestTo(targetSelector, closestToSelector, context) {
        const elements = UtilityFunctions.select(targetSelector, context);
        return elements.filter((element) => element.closest(closestToSelector) === context);
    }
    static toggleControl(target, expanded, attribute) {
        const safeAttribute = attribute || ARIA_EXPANDED;
        let safeExpanded = expanded;
        if (typeof safeExpanded !== 'boolean') {
            // invert the existing button value
            safeExpanded = target.getAttribute(safeAttribute) === 'false';
        }
        target.setAttribute(safeAttribute, safeExpanded.toString());
        const controlledElementId = target.getAttribute(ARIA_CONTROLS);
        if (controlledElementId) {
            const controlledElement = document.getElementById(controlledElementId);
            if (!controlledElement) {
                throw new Error(`aria-controls is not properly configured: ${controlledElementId}`);
            }
            if (safeExpanded) {
                controlledElement.removeAttribute(HIDDEN);
            }
            else {
                controlledElement.setAttribute(HIDDEN, '');
            }
        }
        return safeExpanded;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0eS1mdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9kZXNpZ24tc3lzdGVtLWFuZ3VsYXIvc3JjL2xpYi91dGlsaXR5LWZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxlQUFlLENBQUM7QUFDN0MsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQztBQUUvQixNQUFNLE9BQU8sZ0JBQWdCO0lBRTNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBZ0IsRUFBRSxPQUFtQjtRQUVqRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDeEMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyx3Q0FBd0M7U0FDcEU7UUFFRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckQsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSztRQUNwQixPQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxlQUFlLENBQUMsY0FBc0IsRUFBRSxpQkFBeUIsRUFBRSxPQUFnQjtRQUN4RixNQUFNLFFBQVEsR0FBYyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdFLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQW1CLEVBQUUsUUFBa0IsRUFBRSxTQUFrQjtRQUU5RSxNQUFNLGFBQWEsR0FBVyxTQUFTLElBQUksYUFBYSxDQUFDO1FBRXpELElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQztRQUU1QixJQUFJLE9BQU8sWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUNyQyxtQ0FBbUM7WUFDbkMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLEtBQUssT0FBTyxDQUFDO1NBQy9EO1FBRUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFNUQsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQy9ELElBQUksbUJBQW1CLEVBQUU7WUFDdkIsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO2dCQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7YUFDckY7WUFDRCxJQUFJLFlBQVksRUFBRTtnQkFDaEIsaUJBQWlCLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzNDO2lCQUFNO2dCQUNMLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDNUM7U0FDRjtRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBBUklBX0VYUEFOREVEID0gJ2FyaWEtZXhwYW5kZWQnO1xuZXhwb3J0IGNvbnN0IEFSSUFfQ09OVFJPTFMgPSAnYXJpYS1jb250cm9scyc7XG5leHBvcnQgY29uc3QgSElEREVOID0gJ2hpZGRlbic7XG5cbmV4cG9ydCBjbGFzcyBVdGlsaXR5RnVuY3Rpb25zIHtcblxuICBzdGF0aWMgc2VsZWN0KHNlbGVjdG9yOiBzdHJpbmcsIGNvbnRleHQ6IFBhcmVudE5vZGUpOiBbXSB7XG5cbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGlmICghY29udGV4dCB8fCAhdGhpcy5pc0VsZW1lbnQoY29udGV4dCkpIHtcbiAgICAgIGNvbnRleHQgPSB3aW5kb3cuZG9jdW1lbnQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB9XG5cbiAgICBjb25zdCBzZWxlY3Rpb24gPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWxlY3Rpb24pO1xuICB9XG5cbiAgc3RhdGljIGlzRWxlbWVudCh2YWx1ZSk6IGFueSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUubm9kZVR5cGUgPT09IDE7XG4gIH1cblxuICBzdGF0aWMgc2VsZWN0Q2xvc2VzdFRvKHRhcmdldFNlbGVjdG9yOiBzdHJpbmcsIGNsb3Nlc3RUb1NlbGVjdG9yOiBzdHJpbmcsIGNvbnRleHQ6IEVsZW1lbnQpOiBhbnkge1xuICAgIGNvbnN0IGVsZW1lbnRzOiBFbGVtZW50W10gPSBVdGlsaXR5RnVuY3Rpb25zLnNlbGVjdCh0YXJnZXRTZWxlY3RvciwgY29udGV4dCk7XG4gICAgcmV0dXJuIGVsZW1lbnRzLmZpbHRlcigoZWxlbWVudCkgPT4gZWxlbWVudC5jbG9zZXN0KGNsb3Nlc3RUb1NlbGVjdG9yKSA9PT0gY29udGV4dCk7XG4gIH1cblxuICBzdGF0aWMgdG9nZ2xlQ29udHJvbCh0YXJnZXQ6IEhUTUxFbGVtZW50LCBleHBhbmRlZD86IGJvb2xlYW4sIGF0dHJpYnV0ZT86IHN0cmluZyk6IGJvb2xlYW4ge1xuXG4gICAgY29uc3Qgc2FmZUF0dHJpYnV0ZTogc3RyaW5nID0gYXR0cmlidXRlIHx8IEFSSUFfRVhQQU5ERUQ7XG5cbiAgICBsZXQgc2FmZUV4cGFuZGVkID0gZXhwYW5kZWQ7XG5cbiAgICBpZiAodHlwZW9mIHNhZmVFeHBhbmRlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAvLyBpbnZlcnQgdGhlIGV4aXN0aW5nIGJ1dHRvbiB2YWx1ZVxuICAgICAgc2FmZUV4cGFuZGVkID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShzYWZlQXR0cmlidXRlKSA9PT0gJ2ZhbHNlJztcbiAgICB9XG5cbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKHNhZmVBdHRyaWJ1dGUsIHNhZmVFeHBhbmRlZC50b1N0cmluZygpKTtcblxuICAgIGNvbnN0IGNvbnRyb2xsZWRFbGVtZW50SWQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKEFSSUFfQ09OVFJPTFMpO1xuICAgIGlmIChjb250cm9sbGVkRWxlbWVudElkKSB7XG4gICAgICBjb25zdCBjb250cm9sbGVkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbnRyb2xsZWRFbGVtZW50SWQpO1xuICAgICAgaWYgKCFjb250cm9sbGVkRWxlbWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGFyaWEtY29udHJvbHMgaXMgbm90IHByb3Blcmx5IGNvbmZpZ3VyZWQ6ICR7Y29udHJvbGxlZEVsZW1lbnRJZH1gKTtcbiAgICAgIH1cbiAgICAgIGlmIChzYWZlRXhwYW5kZWQpIHtcbiAgICAgICAgY29udHJvbGxlZEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKEhJRERFTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250cm9sbGVkRWxlbWVudC5zZXRBdHRyaWJ1dGUoSElEREVOLCAnJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNhZmVFeHBhbmRlZDtcbiAgfVxufVxuIl19