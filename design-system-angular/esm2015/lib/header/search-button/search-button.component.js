import { Component, ViewChild, ViewContainerRef } from '@angular/core';
import { ARIA_EXPANDED, ICON_CLOSE, ICON_SELECTOR } from '../../menu/menu-constants';
import { HEADER_SELECTOR, SEARCH_PANEL, SEARCH_SHOWN_STYLE, ICON_SEARCH } from './../header-constants';
export class SearchButtonComponent {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    ngOnInit() {
        this.viewContainerRef.createEmbeddedView(this.searchButtonTemplate);
    }
    onSearchClick(event) {
        const button = event.target;
        const expandedAttr = button.getAttribute(ARIA_EXPANDED);
        const expand = !(expandedAttr && expandedAttr === 'true');
        this.showSearch(expand, button);
        event.stopImmediatePropagation();
    }
    onMainMenuSearchIconClick(event) {
        const icon = event.target;
        const button = icon.closest('button');
        const expandedAttr = button.getAttribute(ARIA_EXPANDED);
        const expand = !(expandedAttr && expandedAttr === 'true');
        this.showSearch(expand, button);
        event.stopImmediatePropagation();
    }
    showSearch(expand, button) {
        // This makes sure regardless of which button is picked that the search elements are expanded/hidden
        const headerEl = button.closest(HEADER_SELECTOR);
        const searchToggleIcon = button.querySelector(ICON_SELECTOR);
        const searchbar = headerEl.querySelector(SEARCH_PANEL);
        if (expand) {
            searchbar.classList.add(SEARCH_SHOWN_STYLE);
            button.setAttribute(ARIA_EXPANDED, 'true');
            searchToggleIcon.classList.remove(ICON_SEARCH);
            searchToggleIcon.classList.add(ICON_CLOSE);
            const input = searchbar.querySelector("input[type='search']");
            input.focus();
        }
        else {
            searchbar.classList.remove(SEARCH_SHOWN_STYLE);
            button.setAttribute(ARIA_EXPANDED, 'false');
            searchToggleIcon.classList.remove(ICON_CLOSE);
            searchToggleIcon.classList.add(ICON_SEARCH);
        }
    }
}
SearchButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'jazz-search-button',
                template: "<ng-template #searchButtonTemplate>\n  <button class=\"jazz-header__search-bar-toggle\" (click)='onSearchClick($event)'\n          aria-expanded=\"false\" aria-label=\"Search Toggle\">\n    <i class=\"jazz-icon jazz-icon-search\" aria-hidden=\"true\" (click)='onMainMenuSearchIconClick($event)'></i>\n  </button>\n</ng-template>\n"
            },] }
];
SearchButtonComponent.ctorParameters = () => [
    { type: ViewContainerRef }
];
SearchButtonComponent.propDecorators = {
    searchButtonTemplate: [{ type: ViewChild, args: ['searchButtonTemplate', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kZXNpZ24tc3lzdGVtLWFuZ3VsYXIvc3JjL2xpYi9oZWFkZXIvc2VhcmNoLWJ1dHRvbi9zZWFyY2gtYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFpQixTQUFTLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDbkYsT0FBTyxFQUNMLGVBQWUsRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUMvRCxNQUFNLHVCQUF1QixDQUFDO0FBTS9CLE1BQU0sT0FBTyxxQkFBcUI7SUFJaEMsWUFDVSxnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUU1QyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQUs7UUFDakIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQXFCLENBQUM7UUFDM0MsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN4RCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsWUFBWSxJQUFJLFlBQVksS0FBSyxNQUFNLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNoQyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUQseUJBQXlCLENBQUMsS0FBSztRQUM3QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsTUFBcUIsQ0FBQztRQUN6QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLFlBQVksSUFBSSxZQUFZLEtBQUssTUFBTSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEMsS0FBSyxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTTtRQUN2QixvR0FBb0c7UUFDcEcsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDN0QsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV2RCxJQUFJLE1BQU0sRUFBRTtZQUNWLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0MsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMvQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZjthQUFNO1lBQ0wsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUMvQyxNQUFNLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM1QyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzlDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDOzs7WUFyREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLHNWQUE2QzthQUM5Qzs7O1lBVDRDLGdCQUFnQjs7O21DQVkxRCxTQUFTLFNBQUMsc0JBQXNCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkluaXQsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FSSUFfRVhQQU5ERUQsIElDT05fQ0xPU0UsIElDT05fU0VMRUNUT1J9IGZyb20gJy4uLy4uL21lbnUvbWVudS1jb25zdGFudHMnO1xuaW1wb3J0IHtcbiAgSEVBREVSX1NFTEVDVE9SLCBTRUFSQ0hfUEFORUwsIFNFQVJDSF9TSE9XTl9TVFlMRSwgSUNPTl9TRUFSQ0hcbn0gZnJvbSAnLi8uLi9oZWFkZXItY29uc3RhbnRzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnamF6ei1zZWFyY2gtYnV0dG9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC1idXR0b24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaEJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQFZpZXdDaGlsZCgnc2VhcmNoQnV0dG9uVGVtcGxhdGUnLCB7c3RhdGljOiB0cnVlfSkgc2VhcmNoQnV0dG9uVGVtcGxhdGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnNlYXJjaEJ1dHRvblRlbXBsYXRlKTtcbiAgfVxuXG4gIG9uU2VhcmNoQ2xpY2soZXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBidXR0b24gPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgZXhwYW5kZWRBdHRyID0gYnV0dG9uLmdldEF0dHJpYnV0ZShBUklBX0VYUEFOREVEKTtcbiAgICBjb25zdCBleHBhbmQgPSAhKGV4cGFuZGVkQXR0ciAmJiBleHBhbmRlZEF0dHIgPT09ICd0cnVlJyk7XG4gICAgdGhpcy5zaG93U2VhcmNoKGV4cGFuZCwgYnV0dG9uKTtcbiAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIG9uTWFpbk1lbnVTZWFyY2hJY29uQ2xpY2soZXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBpY29uID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGJ1dHRvbiA9IGljb24uY2xvc2VzdCgnYnV0dG9uJyk7XG4gICAgY29uc3QgZXhwYW5kZWRBdHRyID0gYnV0dG9uLmdldEF0dHJpYnV0ZShBUklBX0VYUEFOREVEKTtcbiAgICBjb25zdCBleHBhbmQgPSAhKGV4cGFuZGVkQXR0ciAmJiBleHBhbmRlZEF0dHIgPT09ICd0cnVlJyk7XG4gICAgdGhpcy5zaG93U2VhcmNoKGV4cGFuZCwgYnV0dG9uKTtcbiAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIHNob3dTZWFyY2goZXhwYW5kLCBidXR0b24pOiB2b2lkIHtcbiAgICAvLyBUaGlzIG1ha2VzIHN1cmUgcmVnYXJkbGVzcyBvZiB3aGljaCBidXR0b24gaXMgcGlja2VkIHRoYXQgdGhlIHNlYXJjaCBlbGVtZW50cyBhcmUgZXhwYW5kZWQvaGlkZGVuXG4gICAgY29uc3QgaGVhZGVyRWwgPSBidXR0b24uY2xvc2VzdChIRUFERVJfU0VMRUNUT1IpO1xuICAgIGNvbnN0IHNlYXJjaFRvZ2dsZUljb24gPSBidXR0b24ucXVlcnlTZWxlY3RvcihJQ09OX1NFTEVDVE9SKTtcbiAgICBjb25zdCBzZWFyY2hiYXIgPSBoZWFkZXJFbC5xdWVyeVNlbGVjdG9yKFNFQVJDSF9QQU5FTCk7XG5cbiAgICBpZiAoZXhwYW5kKSB7XG4gICAgICBzZWFyY2hiYXIuY2xhc3NMaXN0LmFkZChTRUFSQ0hfU0hPV05fU1RZTEUpO1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZShBUklBX0VYUEFOREVELCAndHJ1ZScpO1xuICAgICAgc2VhcmNoVG9nZ2xlSWNvbi5jbGFzc0xpc3QucmVtb3ZlKElDT05fU0VBUkNIKTtcbiAgICAgIHNlYXJjaFRvZ2dsZUljb24uY2xhc3NMaXN0LmFkZChJQ09OX0NMT1NFKTtcbiAgICAgIGNvbnN0IGlucHV0ID0gc2VhcmNoYmFyLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFt0eXBlPSdzZWFyY2gnXVwiKTtcbiAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlYXJjaGJhci5jbGFzc0xpc3QucmVtb3ZlKFNFQVJDSF9TSE9XTl9TVFlMRSk7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKEFSSUFfRVhQQU5ERUQsICdmYWxzZScpO1xuICAgICAgc2VhcmNoVG9nZ2xlSWNvbi5jbGFzc0xpc3QucmVtb3ZlKElDT05fQ0xPU0UpO1xuICAgICAgc2VhcmNoVG9nZ2xlSWNvbi5jbGFzc0xpc3QuYWRkKElDT05fU0VBUkNIKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==