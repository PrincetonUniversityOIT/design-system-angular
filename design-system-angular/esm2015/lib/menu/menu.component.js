import { Component, HostListener, Input } from '@angular/core';
import { ARIA_EXPANDED, HEADER_NAV_SELECTOR, HEADER_SUB_MENU_SELECTOR, ICON_CLOSE, ICON_MENU, ICON_SELECTOR, MENU_BUTTON_SELECTOR, MENU_HIDE_STYLE, MENU_NAV_EXPANDED_STYLE, MENU_RECENTLY_OPENED_ID, MENU_SELECTOR, MENU_STICKY_STYLE, MENU_SUB_NAV_EXPANDED_STYLE, MENUBAR_SHOWN_STYLE, MENUBAR_SUB_SHOWN_STYLE } from './menu-constants';
export class MenuComponent {
    constructor() { }
    onResize(event) {
        this.displayWindowSize();
    }
    displayWindowSize() {
        // Main Menu Reset
        document.querySelectorAll(HEADER_NAV_SELECTOR).forEach((header) => {
            header.classList.remove(MENU_NAV_EXPANDED_STYLE);
            header.querySelectorAll('ul').forEach((navbar) => {
                navbar.classList.remove(MENU_NAV_EXPANDED_STYLE);
                navbar.classList.remove(MENUBAR_SHOWN_STYLE);
                navbar.classList.remove(MENU_STICKY_STYLE);
                navbar.querySelectorAll('li').forEach((submenu) => {
                    submenu.classList.remove(MENU_STICKY_STYLE);
                    submenu.classList.remove(MENU_HIDE_STYLE);
                });
            });
        });
        document.querySelectorAll(MENU_BUTTON_SELECTOR).forEach((button) => {
            button.setAttribute(ARIA_EXPANDED, 'false');
            const menuToggleIcon = button.querySelector(ICON_SELECTOR);
            menuToggleIcon.classList.remove(ICON_CLOSE);
            menuToggleIcon.classList.add(ICON_MENU);
        });
        // Sub Menus Reset
        document.querySelectorAll(MENU_SELECTOR).forEach((menu) => {
            menu.querySelectorAll('ul').forEach((navbar) => {
                navbar.classList.remove(MENU_SUB_NAV_EXPANDED_STYLE);
                navbar.classList.remove(MENUBAR_SUB_SHOWN_STYLE);
            });
        });
        document.querySelectorAll(HEADER_SUB_MENU_SELECTOR).forEach((button) => {
            button.setAttribute(ARIA_EXPANDED, 'false');
        });
    }
    // This retrieves the appropriate button depending on the selector passed in
    getButtonForSelector(btnSelector, button, mainEl) {
        if (!button.matches(btnSelector)) {
            button = mainEl.querySelector(btnSelector);
        }
        return button;
    }
    closeSubMenus() {
        // const mainEl = event.btn.closest(MENU_MAIN_MENU_SELECTOR);
        document.querySelectorAll(HEADER_NAV_SELECTOR).forEach((mainEl) => {
            mainEl.querySelectorAll('li').forEach((navbar) => {
                navbar.querySelectorAll('ul').forEach((list) => {
                    list.classList.remove(MENU_STICKY_STYLE);
                    list.classList.add(MENU_HIDE_STYLE);
                });
            });
            // tslint:disable-next-line:no-shadowed-variable
            mainEl.querySelectorAll(HEADER_SUB_MENU_SELECTOR).forEach((button) => {
                button.setAttribute(ARIA_EXPANDED, 'false');
            });
        });
    }
    resetSubMenus() {
        document.querySelectorAll(HEADER_NAV_SELECTOR).forEach((mainEl) => {
            mainEl.querySelectorAll('li').forEach((navbar) => {
                navbar.querySelectorAll('ul').forEach((list) => {
                    list.classList.remove(MENU_STICKY_STYLE);
                    list.classList.remove(MENU_HIDE_STYLE);
                });
            });
        });
    }
    onMouseOut(event) {
        const li = event.target;
        if (li) {
            li.querySelectorAll('ul').forEach((subnav) => {
                if (subnav.id === MENU_RECENTLY_OPENED_ID) {
                    subnav.classList.remove(MENU_HIDE_STYLE);
                    subnav.id = '';
                }
            });
        }
    }
}
MenuComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'jazz-menu',
                template: "<nav aria-label=\"Main Menu\" class=\"jazz-menu__main-menu\">\n  <h2 class=\"jazz-visually-hidden\">Main Menu</h2>\n\n  <div class=\"jazz-container\">\n    <div class=\"jazz-menu__main-menu-navbar\">\n      <jazz-menu-main-button buttonClass=\"jazz-menu__menu-toggle\" [showCompact]=\"false\"></jazz-menu-main-button>\n      <div class=\"jazz-menu__nav-container\">\n        <ul *ngIf=\"menuItems && menuItems.length > 0\" class=\"jazz-menubar\" role=\"list\">\n            <li *ngFor=\"let level1item of menuItems\" (mouseleave)=\"onMouseOut($event)\">\n              <jazz-menu-item [menuItem]=\"level1item\" (closeSubMenus)=\"closeSubMenus()\" (resetSubMenus)=\"resetSubMenus()\"></jazz-menu-item>\n            </li>\n        </ul>\n        <div class=\"jazz-header__utility-menu jazz-header__utility-menu--hide-large\">\n          <ul *ngIf=\"utilityItems && utilityItems.length > 0\">\n            <li *ngFor=\"let utilityItem of utilityItems\" >\n              <a [routerLink]=\"utilityItem.url\" routerLinkActive=\"active\" #menuLink=\"routerLinkActive\"\n                [attr.aria-current]=\"menuLink.isActive ? 'page' : undefined\">{{utilityItem.label}}</a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</nav>\n"
            },] }
];
MenuComponent.ctorParameters = () => [];
MenuComponent.propDecorators = {
    menuItems: [{ type: Input }],
    utilityItems: [{ type: Input }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,