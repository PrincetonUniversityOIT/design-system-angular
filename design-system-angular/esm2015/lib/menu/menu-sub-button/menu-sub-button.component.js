import { Component, EventEmitter, Input, Output, ViewChild, ViewContainerRef } from '@angular/core';
import { ARIA_EXPANDED, MENU_HIDE_STYLE, MENU_RECENTLY_OPENED_ID, MENU_STICKY_STYLE, MENU_SUB_NAV_EXPANDED_STYLE, MENUBAR_SUB_SHOWN_STYLE } from '../menu-constants';
import { MainMenuItemComponent } from "../../header/main-menu/main-menu-item";
export class MenuSubButtonComponent {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
        this.closeSubMenus = new EventEmitter();
        this.resetSubMenus = new EventEmitter();
    }
    ngOnInit() {
        this.viewContainerRef.createEmbeddedView(this.subButtonTemplate);
    }
    onSubMenuClick(event) {
        const button = event.target;
        const expandedAttr = button.getAttribute(ARIA_EXPANDED);
        const expand = !(expandedAttr && expandedAttr === 'true');
        this.showSubMenu(expand, button);
    }
    showSubMenu(expand, button) {
        const mq = window.matchMedia('(min-width: 900px)');
        if (mq.matches) {
            this.showSubMenuFull(expand, button);
        }
        else {
            this.showSubMenuCondensed(expand, button);
        }
    }
    showSubMenuFull(expand, button) {
        // This makes sure regardless of which button is picked that the menu elements are expanded/hidden
        const navbar = button.closest('li');
        const navContainer = navbar.querySelector('ul');
        if (expand) {
            this.closeSubMenus.emit();
            navContainer.classList.add(MENU_STICKY_STYLE);
            navContainer.classList.remove(MENU_HIDE_STYLE);
            navbar.classList.add(MENU_STICKY_STYLE);
            button.setAttribute(ARIA_EXPANDED, 'true');
        }
        else {
            this.resetSubMenus.emit();
            navContainer.classList.remove(MENU_STICKY_STYLE);
            navContainer.classList.add(MENU_HIDE_STYLE);
            navContainer.id = MENU_RECENTLY_OPENED_ID;
            navbar.classList.remove(MENU_STICKY_STYLE);
            button.setAttribute(ARIA_EXPANDED, 'false');
        }
    }
    showSubMenuCondensed(expand, button) {
        // This makes sure regardless of which button is picked that the menu elements are expanded/hidden
        const navbar = button.closest('li');
        const navContainer = navbar.querySelector('ul');
        if (expand) {
            navContainer.classList.add(MENU_SUB_NAV_EXPANDED_STYLE);
            navbar.classList.add(MENUBAR_SUB_SHOWN_STYLE);
            button.setAttribute(ARIA_EXPANDED, 'true');
        }
        else {
            navContainer.classList.remove(MENU_SUB_NAV_EXPANDED_STYLE);
            navbar.classList.remove(MENUBAR_SUB_SHOWN_STYLE);
            button.setAttribute(ARIA_EXPANDED, 'false');
        }
    }
}
MenuSubButtonComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'jazz-sub-button',
                template: "<ng-template #subButtonTemplate>\n  <button *ngIf='menuItem && menuItem.menuComponents && menuItem.menuComponents.length > 0' class=\"jazz-menu__submenu-toggle\" type=\"button\" aria-expanded=\"false\" (click)='onSubMenuClick($event)'>\n    <span class=\"jazz-visually-hidden\">\n      {{menuItem.label}}\n    </span>\n  </button>\n</ng-template>\n"
            },] }
];
MenuSubButtonComponent.ctorParameters = () => [
    { type: ViewContainerRef }
];
MenuSubButtonComponent.propDecorators = {
    menuItem: [{ type: Input }],
    closeSubMenus: [{ type: Output }],
    resetSubMenus: [{ type: Output }],
    subButtonTemplate: [{ type: ViewChild, args: ['subButtonTemplate', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1zdWItYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Rlc2lnbi1zeXN0ZW0tYW5ndWxhci9zcmMvbGliL21lbnUvbWVudS1zdWItYnV0dG9uL21lbnUtc3ViLWJ1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFMUcsT0FBTyxFQUNMLGFBQWEsRUFDYixlQUFlLEVBQ2YsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUFFLDJCQUEyQixFQUFFLHVCQUF1QixFQUN4RSxNQUFNLG1CQUFtQixDQUFDO0FBRTNCLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHVDQUF1QyxDQUFDO0FBTzVFLE1BQU0sT0FBTyxzQkFBc0I7SUFZakMsWUFDVSxnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVI1QyxrQkFBYSxHQUF1QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBR3ZELGtCQUFhLEdBQXVCLElBQUksWUFBWSxFQUFFLENBQUM7SUFNcEQsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELGNBQWMsQ0FBQyxLQUFLO1FBQ2xCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFxQixDQUFDO1FBQzNDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLFlBQVksSUFBSSxZQUFZLEtBQUssTUFBTSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTTtRQUN4QixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDbkQsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNMLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsZUFBZSxDQUFDLE1BQU0sRUFBRSxNQUFNO1FBQzVCLGtHQUFrRztRQUNsRyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRTFCLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDOUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUM1QzthQUFNO1lBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUUxQixZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ2pELFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzVDLFlBQVksQ0FBQyxFQUFFLEdBQUcsdUJBQXVCLENBQUM7WUFDMUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsTUFBTTtRQUNqQyxrR0FBa0c7UUFDbEcsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhELElBQUksTUFBTSxFQUFFO1lBQ1YsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUN4RCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzVDO2FBQU07WUFDTCxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQzNELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDOzs7WUE3RUYsU0FBUyxTQUFDO2dCQUNULDhDQUE4QztnQkFDOUMsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0Isd1dBQStDO2FBQ2hEOzs7WUFma0UsZ0JBQWdCOzs7dUJBaUJoRixLQUFLOzRCQUdMLE1BQU07NEJBR04sTUFBTTtnQ0FHTixTQUFTLFNBQUMsbUJBQW1CLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNZW51SXRlbX0gZnJvbSAnLi4vLi4vbW9kZWwvbWVudS1pdGVtJztcbmltcG9ydCB7XG4gIEFSSUFfRVhQQU5ERUQsXG4gIE1FTlVfSElERV9TVFlMRSxcbiAgTUVOVV9SRUNFTlRMWV9PUEVORURfSUQsXG4gIE1FTlVfU1RJQ0tZX1NUWUxFLCBNRU5VX1NVQl9OQVZfRVhQQU5ERURfU1RZTEUsIE1FTlVCQVJfU1VCX1NIT1dOX1NUWUxFXG59IGZyb20gJy4uL21lbnUtY29uc3RhbnRzJztcbmltcG9ydCB7TWVudUl0ZW1Db21wb25lbnR9IGZyb20gXCIuLi9tZW51LWl0ZW0vbWVudS1pdGVtLmNvbXBvbmVudFwiO1xuaW1wb3J0IHtNYWluTWVudUl0ZW1Db21wb25lbnR9IGZyb20gXCIuLi8uLi9oZWFkZXIvbWFpbi1tZW51L21haW4tbWVudS1pdGVtXCI7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnamF6ei1zdWItYnV0dG9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21lbnUtc3ViLWJ1dHRvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTWVudVN1YkJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpXG4gIG1lbnVJdGVtOiBNYWluTWVudUl0ZW1Db21wb25lbnQ7XG5cbiAgQE91dHB1dCgpXG4gIGNsb3NlU3ViTWVudXM6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBAT3V0cHV0KClcbiAgcmVzZXRTdWJNZW51czogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBWaWV3Q2hpbGQoJ3N1YkJ1dHRvblRlbXBsYXRlJywge3N0YXRpYzogdHJ1ZX0pIHN1YkJ1dHRvblRlbXBsYXRlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZlxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnN1YkJ1dHRvblRlbXBsYXRlKTtcbiAgfVxuXG4gIG9uU3ViTWVudUNsaWNrKGV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgYnV0dG9uID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGV4cGFuZGVkQXR0ciA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoQVJJQV9FWFBBTkRFRCk7XG4gICAgY29uc3QgZXhwYW5kID0gIShleHBhbmRlZEF0dHIgJiYgZXhwYW5kZWRBdHRyID09PSAndHJ1ZScpO1xuICAgIHRoaXMuc2hvd1N1Yk1lbnUoZXhwYW5kLCBidXR0b24pO1xuICB9XG5cbiAgc2hvd1N1Yk1lbnUoZXhwYW5kLCBidXR0b24pOiB2b2lkIHtcbiAgICBjb25zdCBtcSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA5MDBweCknKTtcbiAgICBpZiAobXEubWF0Y2hlcykge1xuICAgICAgdGhpcy5zaG93U3ViTWVudUZ1bGwoZXhwYW5kLCBidXR0b24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3dTdWJNZW51Q29uZGVuc2VkKGV4cGFuZCwgYnV0dG9uKTtcbiAgICB9XG4gIH1cblxuICBzaG93U3ViTWVudUZ1bGwoZXhwYW5kLCBidXR0b24pOiB2b2lkIHtcbiAgICAvLyBUaGlzIG1ha2VzIHN1cmUgcmVnYXJkbGVzcyBvZiB3aGljaCBidXR0b24gaXMgcGlja2VkIHRoYXQgdGhlIG1lbnUgZWxlbWVudHMgYXJlIGV4cGFuZGVkL2hpZGRlblxuICAgIGNvbnN0IG5hdmJhciA9IGJ1dHRvbi5jbG9zZXN0KCdsaScpO1xuICAgIGNvbnN0IG5hdkNvbnRhaW5lciA9IG5hdmJhci5xdWVyeVNlbGVjdG9yKCd1bCcpO1xuICAgIGlmIChleHBhbmQpIHtcbiAgICAgIHRoaXMuY2xvc2VTdWJNZW51cy5lbWl0KCk7XG5cbiAgICAgIG5hdkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKE1FTlVfU1RJQ0tZX1NUWUxFKTtcbiAgICAgIG5hdkNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKE1FTlVfSElERV9TVFlMRSk7XG4gICAgICBuYXZiYXIuY2xhc3NMaXN0LmFkZChNRU5VX1NUSUNLWV9TVFlMRSk7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKEFSSUFfRVhQQU5ERUQsICd0cnVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzZXRTdWJNZW51cy5lbWl0KCk7XG5cbiAgICAgIG5hdkNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKE1FTlVfU1RJQ0tZX1NUWUxFKTtcbiAgICAgIG5hdkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKE1FTlVfSElERV9TVFlMRSk7XG4gICAgICBuYXZDb250YWluZXIuaWQgPSBNRU5VX1JFQ0VOVExZX09QRU5FRF9JRDtcbiAgICAgIG5hdmJhci5jbGFzc0xpc3QucmVtb3ZlKE1FTlVfU1RJQ0tZX1NUWUxFKTtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoQVJJQV9FWFBBTkRFRCwgJ2ZhbHNlJyk7XG4gICAgfVxuICB9XG5cbiAgc2hvd1N1Yk1lbnVDb25kZW5zZWQoZXhwYW5kLCBidXR0b24pOiB2b2lkIHtcbiAgICAvLyBUaGlzIG1ha2VzIHN1cmUgcmVnYXJkbGVzcyBvZiB3aGljaCBidXR0b24gaXMgcGlja2VkIHRoYXQgdGhlIG1lbnUgZWxlbWVudHMgYXJlIGV4cGFuZGVkL2hpZGRlblxuICAgIGNvbnN0IG5hdmJhciA9IGJ1dHRvbi5jbG9zZXN0KCdsaScpO1xuICAgIGNvbnN0IG5hdkNvbnRhaW5lciA9IG5hdmJhci5xdWVyeVNlbGVjdG9yKCd1bCcpO1xuXG4gICAgaWYgKGV4cGFuZCkge1xuICAgICAgbmF2Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoTUVOVV9TVUJfTkFWX0VYUEFOREVEX1NUWUxFKTtcbiAgICAgIG5hdmJhci5jbGFzc0xpc3QuYWRkKE1FTlVCQVJfU1VCX1NIT1dOX1NUWUxFKTtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoQVJJQV9FWFBBTkRFRCwgJ3RydWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmF2Q29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoTUVOVV9TVUJfTkFWX0VYUEFOREVEX1NUWUxFKTtcbiAgICAgIG5hdmJhci5jbGFzc0xpc3QucmVtb3ZlKE1FTlVCQVJfU1VCX1NIT1dOX1NUWUxFKTtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoQVJJQV9FWFBBTkRFRCwgJ2ZhbHNlJyk7XG4gICAgfVxuICB9XG59XG4iXX0=