{"version":3,"file":"tabs.component.d.ts","sources":["tabs.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { Router } from '@angular/router';\n/**\n * The TabComponent represents a single tab in a list of tabs.\n *\n * This component mostly serves as a data structure, but also helps to expose the API through the jazz-tab element.\n * @example\n `` `\n     <jazz-tab label=\"Tab 1\" routeTo=\"/panel1\"></jazz-tab>\n `` `\n */\nexport declare class TabComponent {\n    /**\n     * The tabindex of this tab.  This value should never be set by the user because it is controlled by the TabsComponent.\n     *\n     * @ignore\n     */\n    tabindex: number;\n    /**\n     * Indicates if the tab is disabled.\n     */\n    disabled: boolean;\n    /**\n     * The label for the tab.\n     */\n    label: string;\n    /**\n     * The HTML id of the element/section within the HTML document that is controlled by this tab.\n     */\n    controls: string;\n    /**\n     * The HTML aria-label for this tab.\n     */\n    ariaLabel: any;\n    /**\n     * The HTML aria-labelledby for this tab.\n     */\n    ariaLabelledby: any;\n    /**\n     * Indicates if the tab is selected.  Only one tab in a set of tabs should be selected at any given time.\n     */\n    selected: boolean;\n    /**\n     * The url route to routeTo when this tab is selected.\n     */\n    routeTo: string;\n}\n/**\n * The TabsComponent represents the wrapper around individual tabs.\n *\n * This component is responsible for the rendering of both the wrapping structure and the individual tabs.\n * @example\n `` `\n  <jazz-tabs [autoActivate]=\"true\">\n     <jazz-tab label=\"Tab 1\" routeTo=\"/panel1\"></jazz-tab>\n     <jazz-tab label=\"Tab Disabled\" disabled=\"true\"></jazz-tab>\n     <jazz-tab label=\"Tab 2\" routeTo=\"/panel2\" selected=\"true\"></jazz-tab>\n  </jazz-tabs>\n `` `\n */\nexport declare class TabsComponent implements OnInit, AfterContentInit, OnDestroy {\n    private router;\n    /**\n     * The list of TabComponent objects that are contained in this tab list.\n     *\n     * @ignore\n     */\n    tabs: QueryList<TabComponent>;\n    /**\n     * The list of tab elements that are contained in this tab list.\n     *\n     * @ignore\n     * @private\n     */\n    private tabItems;\n    /**\n     * @ignore\n     */\n    private _tabsChangeSubscription;\n    /**\n     * Internal variable for tracking if this component will automatically select tabs when they receive focus.\n     *\n     * @ignore\n     */\n    private _autoActivate;\n    /**\n     * The id of the list of tabs for use in generating the HTML id of the wrapping element.\n     *\n     * @ignore\n     */\n    private readonly _elementId;\n    /**\n     * Internal variable for tracking if this component will show buttons or links\n     *\n     * @ignore\n     */\n    private _useButtons;\n    /**\n     * Controls if a tab will become selected when it receives focus.\n     */\n    get autoActivate(): boolean;\n    set autoActivate(value: boolean);\n    /**\n     * Controls if a tab will use buttons or links\n     */\n    get useButtons(): boolean;\n    set useButtons(value: boolean);\n    /**\n     * Returns the list of TabComponent components that are part of this tab list.\n     */\n    getTabs(): TabComponent[];\n    constructor(router: Router);\n    ngOnInit(): void;\n    /**\n     * During this Angular lifecycle phase, the tabs are initialized and a subscription is established for listening for tab changes.\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Subscriptions are released and resource handles are destroyed.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Initializes the tabs by identifying the tab that should be selected.\n     *\n     * The logic accounts for the case where multiple tabs are marked as selected by selecting only the first tab that is marked as selected.\n     * The logic also accounts for the case where the selected tab is disabled (selected tabs cannot be disabled) by selecting the first\n     * tab in the list of tabs.\n     *\n     * @ignore\n     */\n    private initializeTabs;\n    /**\n     * Generates the HTML id for the tab list wrapping element.\n     *\n     * @ignore\n     */\n    getTabListId(): string;\n    /**\n     * Generates the id of an individual tab.\n     *\n     * @ignore\n     */\n    private getTabId;\n    /**\n     * Changes the visibility of the specified element (which is controlled by the selected tab).\n     *\n     * @ignore\n     * @param controlledElementId the HTML id of the controlled element\n     * @param shown indicates if the element should be expanded (shown) or not (hidden)\n     * @private\n     */\n    private setControlledElementVisibility;\n    /**\n     * De-select all tabs in tablist, except the tab provided.\n     *\n     * @ignore\n     * @param exceptTab\n     */\n    private deselectAllOtherButtonsInTablist;\n    /**\n     * Selects the specified tab.  By selecting a tab, all other tabs are deselected.\n     *\n     * @param tab the tab to be selected\n     */\n    selectTab(tab: TabComponent): void;\n    /**\n     * Delselects the specified tab.\n     *\n     * @param tab the tab to be deselected\n     */\n    deselectTab(tab: TabComponent): void;\n    /**\n     * Sets the tab selection based on the specified tab and selection indicator (boolean).\n     *\n     * If the tab has a URL specified (with the routeTo parameter), then the router is used to navigate to that route if the tab is to be\n     * selected.  Otherwise, the element that is controlled by this tab will have its visibility set accordingly.\n     *\n     * The tab is marked as selected/deselected as appropriate and its tabindex is set to control focusability based on if the tab is\n     * selected (will receive focus using the keyboard) or not (will not receive focus using the keyboard).\n     *\n     * @ignore\n     * @param tab\n     * @param selected\n     * @private\n     */\n    private setTabSelection;\n    /**\n     * Handles click events on individual tabs.  If the tab is not already selected, then it will be selected.\n     *\n     * @ignore\n     * @param tab\n     * @private\n     */\n    private handleClickEvent;\n    /**\n     * Handles keyboard events on the individual tabs, specifically: ArrowRight, ArrowLeft, Home, and End.  These keyboard events control\n     * which tab has focus.\n     *\n     * If this tab list is configured to autoActive, then the appropriate tab will be selected when it receives focus.\n     *\n     * @ignore\n     * @param eventTab\n     * @param idx\n     * @param keyEvent\n     * @private\n     */\n    private handleKeyboardEvent;\n    /**\n     * Finds the next tab, starting at the specified index in the tab list.\n     *\n     * @ignore\n     * @param tabs\n     * @param startIdx\n     * @private\n     */\n    private getNextTabIndex;\n    /**\n     * Finds the previous tab, starting at the specified index in the tab list.\n     *\n     * @ignore\n     * @param tabs\n     * @param startIdx\n     */\n    private getPreviousTabIndex;\n    /**\n     * Finds the first tab in the list of provided tabs\n     *\n     * @ignore\n     */\n    private getFirstTabIndex;\n    /**\n     * Finds the last tab in the list of provided tabs.\n     *\n     * @ignore\n     */\n    private getLastTabIndex;\n    /**\n     * Ensure that index is within the appropriate range for the number of tabs that we have.\n     *\n     * The max function is accounting for the NaN value with the `|| 0` portion of the expression to\n     * an infinite loop since Math.max(NaN, 0) === NaN.\n     *\n     * (per Angular Material Tabs code: https://github.com/angular/components/blob/master/src/material/tabs/tab-group.ts)\n     *\n     * @ignore\n     * @param index\n     * @private\n     */\n    private clampTabIndex;\n    /**\n     * Find the next tab in the list of tabs provided.\n     *\n     * The search will begin at the position in the list where the provided tab is located and the search\n     * will wrap around to the beginning of the provided list of tabs.\n     *\n     * @param startIdx the index of the tab to use as a starting point for finding the next tab\n     * @ignore\n     */\n    private getNextOrFirstTabIndex;\n    /**\n     * Find the previous tab in the list of tabs provided.\n     *\n     * The search will begin at the position in the list where the provided tab is located and the search\n     * will wrap around to the end of the provided list of tabs.\n     *\n     * @param startIdx\n     * @ignore\n     */\n    private getPreviousOrLastTab;\n}\n"]}